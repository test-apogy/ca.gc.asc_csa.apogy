/**
 * Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)
 */
package org.eclipse.symphony.examples.satellite.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.symphony.common.images.ImagesAlbum;
import org.eclipse.symphony.common.images.Symphony__CommonImagesPackage;

import org.eclipse.symphony.common.images.util.Symphony__CommonImagesSwitch;
import org.eclipse.symphony.common.topology.AggregateContentNode;
import org.eclipse.symphony.common.topology.ContentNode;
import org.eclipse.symphony.common.topology.Symphony__CommonTopologyPackage;
import org.eclipse.symphony.common.topology.util.Symphony__CommonTopologySwitch;
import org.eclipse.symphony.core.environment.EarthSurfaceWorksite;
import org.eclipse.symphony.core.environment.GeographicCoordinatesPolygonShapeImageMapLayer;
import org.eclipse.symphony.core.environment.ImageMapLayer;
import org.eclipse.symphony.core.environment.Symphony__CoreEnvironmentPackage;
import org.eclipse.symphony.core.environment.orbit.earth.CorridorPoint;
import org.eclipse.symphony.core.environment.orbit.earth.EarthSurfaceLocation;
import org.eclipse.symphony.core.environment.orbit.earth.Symphony__CoreEnvironmentOrbitEarthPackage;
import org.eclipse.symphony.core.environment.orbit.earth.util.Symphony__CoreEnvironmentOrbitEarthSwitch;
import org.eclipse.symphony.core.environment.util.Symphony__CoreEnvironmentSwitch;
import org.eclipse.symphony.examples.satellite.Symphony__ExamplesSatelliteFactory;
import org.eclipse.symphony.examples.satellite.Symphony__ExamplesSatellitePackage;

import org.eclipse.symphony.examples.satellite.util.Symphony__ExamplesSatelliteAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Symphony__ExamplesSatelliteItemProviderAdapterFactory extends Symphony__ExamplesSatelliteAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(Symphony__ExamplesSatelliteEditPlugin.INSTANCE, Symphony__ExamplesSatellitePackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Symphony__ExamplesSatelliteItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ConstellationCommandPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstellationCommandPlanItemProvider constellationCommandPlanItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ConstellationCommandPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstellationCommandPlanAdapter() {
		if (constellationCommandPlanItemProvider == null) {
			constellationCommandPlanItemProvider = new ConstellationCommandPlanItemProvider(this);
		}

		return constellationCommandPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ConstellationCommandPlanItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstellationCommandPlanItemItemProvider constellationCommandPlanItemItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ConstellationCommandPlanItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstellationCommandPlanItemAdapter() {
		if (constellationCommandPlanItemItemProvider == null) {
			constellationCommandPlanItemItemProvider = new ConstellationCommandPlanItemItemProvider(this);
		}

		return constellationCommandPlanItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.DefaultConstellation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefaultConstellationItemProvider defaultConstellationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.DefaultConstellation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefaultConstellationAdapter() {
		if (defaultConstellationItemProvider == null) {
			defaultConstellationItemProvider = new DefaultConstellationItemProvider(this);
		}

		return defaultConstellationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ConstellationRequestsList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstellationRequestsListItemProvider constellationRequestsListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ConstellationRequestsList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstellationRequestsListAdapter() {
		if (constellationRequestsListItemProvider == null) {
			constellationRequestsListItemProvider = new ConstellationRequestsListItemProvider(this);
		}

		return constellationRequestsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ImageConstellationRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageConstellationRequestItemProvider imageConstellationRequestItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ImageConstellationRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageConstellationRequestAdapter() {
		if (imageConstellationRequestItemProvider == null) {
			imageConstellationRequestItemProvider = new ImageConstellationRequestItemProvider(this);
		}

		return imageConstellationRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.SatellitesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SatellitesListItemProvider satellitesListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.SatellitesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSatellitesListAdapter() {
		if (satellitesListItemProvider == null) {
			satellitesListItemProvider = new SatellitesListItemProvider(this);
		}

		return satellitesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.Satellite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SatelliteItemProvider satelliteItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.Satellite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSatelliteAdapter() {
		if (satelliteItemProvider == null) {
			satelliteItemProvider = new SatelliteItemProvider(this);
		}

		return satelliteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.AbstractSatelliteCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractSatelliteCommandItemProvider abstractSatelliteCommandItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.AbstractSatelliteCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractSatelliteCommandAdapter() {
		if (abstractSatelliteCommandItemProvider == null) {
			abstractSatelliteCommandItemProvider = new AbstractSatelliteCommandItemProvider(this);
		}

		return abstractSatelliteCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.AcquireImageSatelliteCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireImageSatelliteCommandItemProvider acquireImageSatelliteCommandItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.AcquireImageSatelliteCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquireImageSatelliteCommandAdapter() {
		if (acquireImageSatelliteCommandItemProvider == null) {
			acquireImageSatelliteCommandItemProvider = new AcquireImageSatelliteCommandItemProvider(this);
		}

		return acquireImageSatelliteCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.OrbitalImage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrbitalImageItemProvider orbitalImageItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.OrbitalImage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrbitalImageAdapter() {
		if (orbitalImageItemProvider == null) {
			orbitalImageItemProvider = new OrbitalImageItemProvider(this);
		}

		return orbitalImageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ConstellationDownlinksList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstellationDownlinksListItemProvider constellationDownlinksListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ConstellationDownlinksList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstellationDownlinksListAdapter() {
		if (constellationDownlinksListItemProvider == null) {
			constellationDownlinksListItemProvider = new ConstellationDownlinksListItemProvider(this);
		}

		return constellationDownlinksListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ConstellationDownlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstellationDownlinkItemProvider constellationDownlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ConstellationDownlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstellationDownlinkAdapter() {
		if (constellationDownlinkItemProvider == null) {
			constellationDownlinkItemProvider = new ConstellationDownlinkItemProvider(this);
		}

		return constellationDownlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.OrbitalImageConstellationDownlinkItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrbitalImageConstellationDownlinkItemItemProvider orbitalImageConstellationDownlinkItemItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.OrbitalImageConstellationDownlinkItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrbitalImageConstellationDownlinkItemAdapter() {
		if (orbitalImageConstellationDownlinkItemItemProvider == null) {
			orbitalImageConstellationDownlinkItemItemProvider = new OrbitalImageConstellationDownlinkItemItemProvider(this);
		}

		return orbitalImageConstellationDownlinkItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.examples.satellite.ConstellationUtilities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstellationUtilitiesItemProvider constellationUtilitiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.examples.satellite.ConstellationUtilities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstellationUtilitiesAdapter() {
		if (constellationUtilitiesItemProvider == null) {
			constellationUtilitiesItemProvider = new ConstellationUtilitiesItemProvider(this);
		}

		return constellationUtilitiesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (constellationCommandPlanItemProvider != null) constellationCommandPlanItemProvider.dispose();
		if (constellationCommandPlanItemItemProvider != null) constellationCommandPlanItemItemProvider.dispose();
		if (defaultConstellationItemProvider != null) defaultConstellationItemProvider.dispose();
		if (constellationRequestsListItemProvider != null) constellationRequestsListItemProvider.dispose();
		if (imageConstellationRequestItemProvider != null) imageConstellationRequestItemProvider.dispose();
		if (satellitesListItemProvider != null) satellitesListItemProvider.dispose();
		if (satelliteItemProvider != null) satelliteItemProvider.dispose();
		if (abstractSatelliteCommandItemProvider != null) abstractSatelliteCommandItemProvider.dispose();
		if (acquireImageSatelliteCommandItemProvider != null) acquireImageSatelliteCommandItemProvider.dispose();
		if (orbitalImageItemProvider != null) orbitalImageItemProvider.dispose();
		if (constellationDownlinksListItemProvider != null) constellationDownlinksListItemProvider.dispose();
		if (constellationDownlinkItemProvider != null) constellationDownlinkItemProvider.dispose();
		if (orbitalImageConstellationDownlinkItemItemProvider != null) orbitalImageConstellationDownlinkItemItemProvider.dispose();
		if (constellationUtilitiesItemProvider != null) constellationUtilitiesItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link Symphony__CoreEnvironmentOrbitEarthPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CoreEnvironmentOrbitEarthChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CoreEnvironmentOrbitEarthSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseEarthSurfaceLocation(EarthSurfaceLocation object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.EARTH_SURFACE_LOCATION__GEOGRAPHICAL_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.EARTH_SURFACE_LOCATION__GEOGRAPHICAL_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.EARTH_SURFACE_LOCATION__GEOGRAPHICAL_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseCorridorPoint(CorridorPoint object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__LEFT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__LEFT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__LEFT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__CENTER,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__CENTER,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__CENTER,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__RIGHT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__RIGHT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentOrbitEarthPackage.Literals.CORRIDOR_POINT__RIGHT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__ExamplesSatelliteEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link Symphony__CoreEnvironmentPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CoreEnvironmentChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CoreEnvironmentSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseEarthSurfaceWorksite(EarthSurfaceWorksite object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.EARTH_SURFACE_WORKSITE__GEOGRAPHICAL_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.EARTH_SURFACE_WORKSITE__GEOGRAPHICAL_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.EARTH_SURFACE_WORKSITE__GEOGRAPHICAL_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseImageMapLayer(ImageMapLayer object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.IMAGE_MAP_LAYER__IMAGE,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImage()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.IMAGE_MAP_LAYER__LEGEND,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImage()));

				return null;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseGeographicCoordinatesPolygonShapeImageMapLayer(GeographicCoordinatesPolygonShapeImageMapLayer object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.GEOGRAPHIC_COORDINATES_POLYGON_SHAPE_IMAGE_MAP_LAYER__POLYGON_VERTICES_GEOGRAPHIC_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.GEOGRAPHIC_COORDINATES_POLYGON_SHAPE_IMAGE_MAP_LAYER__POLYGON_VERTICES_GEOGRAPHIC_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreEnvironmentPackage.Literals.GEOGRAPHIC_COORDINATES_POLYGON_SHAPE_IMAGE_MAP_LAYER__POLYGON_VERTICES_GEOGRAPHIC_COORDINATES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__ExamplesSatelliteEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link Symphony__CommonImagesPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CommonImagesChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CommonImagesSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseImagesAlbum(ImagesAlbum object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonImagesPackage.Literals.IMAGES_ALBUM__IMAGES,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImage()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__ExamplesSatelliteEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link Symphony__CommonTopologyPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CommonTopologyChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CommonTopologySwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <T> Object caseContentNode(ContentNode<T> object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationCommandPlan()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationCommandPlanItem()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createDefaultConstellation()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationRequestsList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createSatellitesList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createSatellite()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImage()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationDownlinksList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationDownlink()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImageConstellationDownlinkItem()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationUtilities()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <T> Object caseAggregateContentNode(AggregateContentNode<T> object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationCommandPlan()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationCommandPlanItem()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createDefaultConstellation()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationRequestsList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createImageConstellationRequest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createSatellitesList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createSatellite()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAbstractSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createAcquireImageSatelliteCommand()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImage()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationDownlinksList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationDownlink()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createOrbitalImageConstellationDownlinkItem()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__ExamplesSatelliteFactory.eINSTANCE.createConstellationUtilities()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__ExamplesSatelliteEditPlugin.INSTANCE;
		}
	}

}
