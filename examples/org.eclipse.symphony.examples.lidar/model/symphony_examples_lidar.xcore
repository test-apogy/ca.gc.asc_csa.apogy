@GenModel(prefix="EMFEcoreExampleLidar",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  copyrightText="Canadian Space Agency / Agence spatiale canadienne - Copyright (c) 2015",
		  modelName="EMFEcoreExampleLidar",
		  suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.examples.lidar/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.examples.lidar.edit/src-generated")

package org.eclipse.symphony.examples.lidar

import ca.gc.space.mrt.sensors.fov.RectangularFrustrumFieldOfView

import ca.gc.space.mrt.geometry.data3d.CartesianCoordinatesSet

/* 
 * This is an abstraction of the Lidar unit, a 3D laser-based range
 * finder which is capable of scanning the environment and returning
 * a point cloud encompassing the resulting information.  It has a
 * field of view, which determines the subsection of the environment
 * that the unit can scan.  It also can keep track of whether or not
 * the unit was initialized.
 */
abstract class Lidar
{
	/*
	 * This is the Lidar's field of view, which corresponds to a rectangular
	 * frustrum with defined limits.
	 */
	@GenModel(children="true",
			  notify="true",
			  property="Readonly",
			  propertyCategory="Field Of View")
	contains RectangularFrustrumFieldOfView[1] fov

	/*
	 * This is whether or not the Lidar unit has been been successfully
	 * initialized; initially false.
	 * @see #init()
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Readonly",
			  propertyCategory="Status")
	boolean initialized = "false"

	/*
	 * This operation is used to perform the steps necessary to initialize
	 * the Lidar unit.
	 * @return Whether or not the Lidar's initialization was successfully completed
	 */
	op boolean init()
	 
	/* 
	 * This operation is used to acquire a depth scan of the field of view, with the given
	 * horizontal and vertical resolution.
	 * <p>
	 * Note: This method operates synchronously and will block until the entire scan has been
	 *       completed.  
	 * @param horizontalResolution The horizontal angular resolution of the scan (in radians.)
	 * @param verticalResolution The vertical angular resolution of the scan (in radians.)
	 * @return The resulting scan with the given horizontal and vertical angular resolution.
	 * @see #acquireScanNonBlocking(double, double)
	 */
	op CartesianCoordinatesSet acquireScan(@GenModel(csa_units="rad") double horizontalResolution,
										   @GenModel(csa_units="rad") double verticalResolution)
	
	/* 
	 * This operation is used to acquire a depth scan of the field of view, with the given
	 * horizontal and vertical resolution.
	 * <p>
	 * Note: This method operates asynchronously and as such, will return immediately, even
	 *       if the scan is not yet completed.
	 * @param horizontalResolution The horizontal angular resolution of the scan (in radians.)
	 * @param verticalResolution The vertical angular resolution of the scan (in radians.)
	 * @return The resulting scan with the given horizontal and vertical angular resolution.
	 * @see #acquireScan(double, double)
	 */
	op CartesianCoordinatesSet acquireScanNonBlocking(@GenModel(csa_units="rad") double horizontalResolution,
													  @GenModel(csa_units="rad") double verticalResolution)
}

/* 
 * This is a specific implementation of the Lidar unit, in which
 * all operations are stubs and hence, non-functional; the
 * operations should simply log a message, indicating that they
 * were performed.
 */
class LidarStub extends Lidar
{
	/*
	 * For specific implementation details,
	 * see {@link org.eclipse.symphony.examples.lidar.impl.LidarStubImpl}
	 */
}

/*
 * This is a simulated implementation of the Lidar unit, where all
 * operations are executed upon a simulated (i.e. virtual) Lidar.
 * While there are no physical components interacted with, it attempts
 * to emulate, wherever possible, the actions and results of its real
 * world counterpart(s).
 */
class LidarSimulated extends Lidar
{
	/*
	 * For specific implementation details,
	 * see {@link org.eclipse.symphony.examples.lidar.impl.LidarSimulatedImpl}
	 */
}
