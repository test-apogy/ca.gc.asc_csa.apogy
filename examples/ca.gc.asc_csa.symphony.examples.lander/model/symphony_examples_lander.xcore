@GenModel(prefix="SymphonyExampleLander", copyrightText="Canadian Space Agency / Agence spatiale canadienne Copyright (c) 2015", modelName="SymphonyExampleLander")
@GenModel(modelDirectory="/ca.gc.asc_csa.symphony.examples.lander/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.symphony.examples.lander.edit/src-generated")

package ca.gc.asc_csa.symphony.examples.lander

import ca.gc.asc_csa.symphony.core.SymphonySystemApiAdapter
import ca.gc.asc_csa.symphony.core.SymphonyInitializationData

import ca.gc.asc_csa.eclipse.emf.ecore.examples.lander.LanderLegExtension

/*
 * This class is the specialized Symphony API adapter, used for connecting
 * the existing lander example, located at
 * {@link ca.gc.asc_csa.eclipse.emf.ecore.examples.lander.Lander},
 * to Symphony; one can override the well-known callback functions to make
 * Symphony perform a variety of useful functions, including initialization,
 * disposal and other features. 
 */
class LanderSymphonySystemApiAdapter extends SymphonySystemApiAdapter
{
	/*
	 * For specific implementation details,
	 * please see
	 * {@link ca.gc.asc_csa.symphony.examples.lander.impl.LanderSymphonySystemApiAdapterImpl}
	 */
}

/*
 * This class specifies the initialization data that Symphony
 * should be interested in when (re)initializing the PTU dish
 * antenna with the API Adapter (which in this case is
 * {@link ca.gc.asc_csa.symphony.examples.antenna.PTUDishAntennaSymphonySystemApiAdapter})
 */
class LanderData extends SymphonyInitializationData
{
	/*
	 * This is whether or not the lander has been initialized.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Status")
	boolean initialized = "false"
	
	/*
	 * This is whether or not the lander has been disposed.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Status")
	boolean disposed = "false"
	
	/*
	 * This is whether or not flying is permitted for the
	 * lander.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Flight")
	boolean flyingEnabled = "false"
	
	/*
	 * This is the extension position for the lander's
	 * leg A.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Legs")
	LanderLegExtension legAExtension
	
	/*
	 * This is the extension position for the lander's
	 * leg B.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Legs")
	LanderLegExtension legBExtension 
	
	/*
	 * This is the extension position for the lander's
	 * leg C.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Legs")
	LanderLegExtension legCExtension
	
	/*
	 * This is the thrust level (in N) of the lander
	 */
	@GenModel(csa_units="N",
			  children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Flight")
	double currThrustLevel = "0.0"
	
	/*
	 * This is the minimum thrust level (in N) of the lander
	 */
	@GenModel(csa_units="N",
			  children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Flight")
	double minThrustLevel = "0.0"
	
	/*
	 * This is the maximum thrust level (in N) of the lander
	 */
	@GenModel(csa_units="N",
			  children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Flight")
	double maxThrustLevel = "0.0"
	
	/*
	 * This is the angular velocity (in radians / second)
	 * of the lander in the X direction. 
	 */
	 @GenModel(csa_units="rad/s",
	 		   children="false",
	 		   notify="true",
	 		   property="Editable",
	 		   propertyCategory="Velocities")
	 double xAngularVelocity = "0.0"
	
	/*
	 * This is the angular velocity (in radians / second)
	 * of the lander in the Y direction.
	 */
	@GenModel(csa_units="rad/s",
			  children="false",
			  notify="true",
			  property="Editable",
			  propertyCategory="Velocities")
	double yAngularVelocity = "0.0"
}