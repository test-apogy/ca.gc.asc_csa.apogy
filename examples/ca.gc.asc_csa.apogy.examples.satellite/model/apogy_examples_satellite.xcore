@GenModel(prefix="ApogyExamplesSatellite",
		  copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
		  modelName="ApogyExamplesSatellite",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.examples.satellite/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.examples.satellite.edit/src-generated")

package ca.gc.asc_csa.apogy.examples.satellite

import ca.gc.asc_csa.apogy.common.emf.Described
import ca.gc.asc_csa.apogy.common.emf.Named
import ca.gc.asc_csa.apogy.common.emf.Timed
import ca.gc.asc_csa.apogy.common.images.EImage
import ca.gc.asc_csa.apogy.core.environment.GeographicCoordinates
import ca.gc.asc_csa.apogy.core.environment.orbit.OrbitModel
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.GroundStationReferencesList

/*
 * Basic Types.
 */
 type List<T> wraps java.util.List
 type SortedSet<T> wraps java.util.SortedSet

/*
 * Represents a constellation of Satellites. It provides basic queries used to schedule 
 * image acquisition and upload requests and downloads data from the satellites.
 */
abstract class AbstractConstellation{
	/*
	 * List of the constellation {@link Satellite}. 
	 */
	contains SatellitesList[0..1] satellitesList	
	
	/*
	 * List of the {@link GroundStation}.
	 */
	contains GroundStationReferencesList[0..1] groundStationsReferencesList
	
	/*
	 * List of {@link ConstellationDownlinkList} used to store {@link ConstellationDownlink}.
	 */
	contains ConstellationDownlinksList[0..1] downlinksLists
	
	/*
	 * List of {@link AbstractConstellationRequest}.
	 */
	contains ConstellationRequestsList[0..1] constellationRequestsList

	/*
	 * Returns the list of {@link AbstractSatelliteCommand} required to process the constellation {@link AbstractConstellationRequest} 
	 * based on the available constellation satellites.
	 * @param startDate The start date of the period to be queried.
	 * @param endDate The end date of the period to be queried.
	 * @return Reference to the {@link SatelliteCommandPlan}.
	 */
	op ConstellationCommandPlan plan(Date startDate, Date endDate)
	
	/*
	 * Returns the list of {@link AbstractSatelliteCommand} required to process a specific list of {@link AbstractConstellationRequest} 
	 * based on the available constellation satellites.
	 * @param requests Refers to the list of {@link AbstractConstellationRequest} to process.
	 * @param startDate The start date of the period to be queried.
	 * @param endDate The end date of the period to be queried.
	 * @return Reference to the {@link SatelliteCommandPlan}.
	 */
	op ConstellationCommandPlan plan(List<AbstractConstellationRequest> requests, Date startDate, Date endDate)
	
	/*
	 * Packages and commits the list of {@link AbstractSatelliteCommand}.  
	 * @param satelliteCommands Reference to the list of {@link AbstractSatelliteCommand}.
	 */
	op void commit(List<AbstractSatelliteCommand> satelliteCommands)

	/* 
	 * Updates the {@link AbstractConstellationRequest} state based on the {@link ConstallationDownlink}. 
	 * @param downlink Reference to the {@link ConstellationDownlink}.
	 */
	op void apply(ConstellationDownlink downlink)
	
	/*
	 * Adds the specified {@link AbstractConstellationRequest} to the constellation.
	 * @param request Specifies the request to add to the {@link AbstractConstellation}.
	 */
	op void add(AbstractConstellationRequest request)
	
	/*
	 * Adds all the {@link AbstractConstellationRequest} specified in the list to the constellation.
	 * @param requests Specifies the requests to add to the {@link AbstractConstellation}.
	 */	
	op void addAll(List<AbstractConstellationRequest> requests)
	
	/*
	 * Removes the specified {@link AbstractConstellationRequest} from the constellation.
	 * @param request Specifies the request to remove from the {@link AbstractConstellation}.
	 */	
	op void remove(AbstractConstellationRequest request)
	
	/*
	 * Removes all the {@link AbstractConstellationRequest} specified in the list from the constellation.
	 * @param request Specifies the requests to remove from the {@link AbstractConstellation}.
	 */		
	op void removeAll(List<AbstractConstellationRequest> requests)	
}

/*
 * This class contains a list of {@link SatelliteCommandPlanItem}.
 * The {@link AbstractConstellation#plan} produces {@link SatelliteCommandPlan}. 
 */
class ConstellationCommandPlan{
	/*
	 * List of {@link SatelliteCommandPlanItem}.
	 */
	contains ConstellationCommandPlanItem[0..*] constellationCommandPlanItems
}

/*
 * This class specifies the link between an {@link AbstractConstellationRequest} and a {@link AbstractSatelliteCommand}.
 */
class ConstellationCommandPlanItem{
	/*
	 * Reference to the {@link AbstractConstellationRequest}.
	 */	
	refers AbstractConstellationRequest[1] request
	
	/*
	 * Reference to the {@link AbstractSatelliteCommand} used/required to service the {@link AbstractConstellationRequest}.
	 */
	contains AbstractSatelliteCommand[0..1] satelliteCommand	
}

/*
 * Constellation Default Implementation Class.
 */
class DefaultConstellation extends AbstractConstellation{	
}

/*
 * List that contains {@link AbstractConstellationRequest}.
 */
class ConstellationRequestsList{	
	/*
	 * {@link AbstractConstellationRequest} container.
	 */
	contains AbstractConstellationRequest[0..*] constellationRequests
}

/*
 * This abstract class is used to model Constellation Request such as {@link ImageConstellationRequest}.
 */
abstract class AbstractConstellationRequest{	
	/*
	 * Request Unique Identifier.
	 */
	long uid = "0"
	
	/*
	 * Request Priority.
	 */
	ConstellationRequestPriority orderPriority = "NORMAL"
	
	/*
	 * Order Status.
	 */
	ConstellationRequestStatus orderStatus = "NEW"	
	
	/*
	 * Reference to the {@link AbstractSatelliteCommand} associated to the {@link AbstractConstellationRequest}.
	 */
	contains AbstractSatelliteCommand satelliteCommand opposite constellationRequest 	
}

/*
 * Class that documents a request to take an orbital image at a specific location.  
 * It also serves to store the status and the image obtained if any. 
 */
class ImageConstellationRequest extends AbstractConstellationRequest, GeographicCoordinates{
	
	/*
	 * Contains the {@link OrbitalImage} if the {@link ImageConstellationRequest} was successfully processed and retrieved.
	 */
	contains OrbitalImage[0..1] image	
} 

/*
 * This enumeration is used to indicate the possible {@link AbstractConstellationRequest} order priorities.
 */
enum ConstellationRequestPriority{
	LOW = 0, 
	NORMAL = 1,
	HIGH = 2
}

/*
 * This enumeration is used to indicate the possible {@link AbstractConstellationRequest} statuses.
 */
enum ConstellationRequestStatus{
	NEW = 0,
	COMMITTED = 1,
	COMPLETED = 2,
	FAILED = 3
}

/*
 * List that contains {@link Satellite}. 
 */
class SatellitesList{
	contains Satellite[0..*] satellites
}

/*
 * Class that defines the properties of a specific satellite.
 */
class Satellite extends Named{
	/*
	 * Refers to the {@link OrbitModel}.
	 */
	refers OrbitModel orbitModel
	
	/*
	 * The satellite maximum roll rate.
	 */
	@GenModel(apogy_units="rad/s")
	double maximumRollRate = "0.017452778"
	
	/*
	 * The satellite maximum roll.
	 */
	@GenModel(apogy_units="rad")
	double maximumRoll = "0.087"	
}

/*
 * Satellite Command.
 */
class AbstractSatelliteCommand extends GeographicCoordinates, Timed{	
	/*
	 * Refers the {@link Satellite} associated with the {@link AbstractSatelliteCommand}. 
	 */
	refers Satellite satellite

	/* 
	 * Reference to the associated {@link AbstractConstellationRequest}.
	 */
	container AbstractConstellationRequest constellationRequest opposite satelliteCommand
}

/*
 * Satellite Command to Acquire OrbitalImage
 */
class AcquireImageSatelliteCommand extends AbstractSatelliteCommand
{
	/* 
	 * The satellite is nadir looking, and can roll back and forth (+- X degrees) along its trajectory.
     * An imager is mounted on its nadir axis and can take images of the Earth below. 
     */
	double rollAngle = "0.0"	
}

/*
 * This class represents an orbital image.
 */
class OrbitalImage extends EImage{
	contains GeographicCoordinates[1] coordinates	
	double rollAngle = "0.0"	
}

/*
 * This class represents a list of {@link ConstellationDownlink}.
 */
class ConstellationDownlinksList extends Named, Described{	
	contains ConstellationDownlink[0..*] downlinks
}

/* 
 * A {@link ConstellationDownlink} class contains the {@link AbstractConstellationDownlinkItem}.
 */
class ConstellationDownlink{
	contains AbstractConstellationDownlinkItem[0..*] downlinkItems
}

/*
 * This class represents an item in a {@link ConstellationDownlink}.
 */
abstract class AbstractConstellationDownlinkItem{
	/*
	 * Unique {@link AbstractConstellationRequest} identifier.
	 */
	long requestUID = "0"		
}

/*
 * This class represents a {@link AbstractDownlinkItem} that contains an {@link OrbitalImage}.
 */
class OrbitalImageConstellationDownlinkItem extends AbstractConstellationDownlinkItem{
	contains OrbitalImage[0..1] image	
}

/*
 * Utilities class for the satellite example.
 */
class ConstellationUtilities{
	/*
	 * Sorts the list of {@link AbstractConstellationRequest} based on {@link AbstractConstellationRequest#priority}.
	 * @param requests Specifies the list of {@link AbstractConstellationRequest} to sort.
	 */
	op SortedSet<AbstractConstellationRequest> sortByPriority(List<AbstractConstellationRequest> requests)
}