/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyExamplesSatellite",
		  copyrightText="Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
Canadian Space Agency (CSA) - Initial API and implementation
-Pierre Allard (Pierre.Allard@canada.ca),
-Regent L'Archeveque (Regent.Larcheveque@canada.ca),
-Sebastien Gemme (Sebastien.Gemme@canada.ca)",
		  modelName="ApogyExamplesSatellite",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  suppressGenModelAnnotations="false",
		  dynamicTemplates="true", 
		  templateDirectory="platform:/plugin/ca.gc.asc_csa.apogy.common.emf.templates")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.examples.satellite/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.examples.satellite.edit/src-generated")

package ca.gc.asc_csa.apogy.examples.satellite

import ca.gc.asc_csa.apogy.common.emf.Described
import ca.gc.asc_csa.apogy.common.emf.Named
import ca.gc.asc_csa.apogy.common.emf.Timed
import ca.gc.asc_csa.apogy.common.images.EImage
import ca.gc.asc_csa.apogy.core.Exception
import ca.gc.asc_csa.apogy.core.environment.GeographicCoordinates
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.ConstantElevationMask
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.EarthOrbitModel
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.EarthSurfaceLocation
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.GroundStationReferencesList
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.VisibilityPass

type List<T> wraps java.util.List
type SortedSet<T> wraps java.util.SortedSet 
type Comparator<T> wraps java.util.Comparator 
 
/*
 * Class that provides utility methods.
 */
class ApogyExamplesSatelliteFacade{
}
 
/*
 * Abstract Unique Identifier.  This class is meant to be sub-classed.
 */
abstract class AbstractUID{
}

/*
 * Unique Identifier in string format (Default).
 */
class StringUID extends AbstractUID{
	String ^id
}

/*
 * Class that contains list of {@link ConstellationCommandPlan}.
 */
 class ConstellationCommandPlansList{
 	
 	/*
 	 * Refers to the container of this {@link ConstellationCommandPlansList}.
 	 */
 	container ConstellationState constellationState opposite constellationCommandPlansList
 	
 	/*
 	 * Contains the plan.
 	 */
 	contains AbstractConstellationCommandPlan[0..*] plans opposite commandPlansList
 }
 
 /*
  * Class used to store the constellation state. 
  */
 class ConstellationState{
 	/*
	 * List of {@link ConstellationCommandPlan}s.
	 */	 
	contains ConstellationCommandPlansList[0..1] constellationCommandPlansList opposite constellationState
	 
	/*
	 * List of the constellation {@link Satellite}. 
	 */
	contains SatellitesList[0..1] satellitesList	
		
	/*
	 * List of the {@link GroundStation}.
	 */
	contains GroundStationReferencesList[0..1] groundStationsReferencesList
	
	/*
	 * List of {@link ConstellationDownlinkList} used to store {@link ConstellationDownlink}.
	 */
	contains ConstellationDownlinksList[0..1] downlinksLists opposite constellationState
		
	/*
	 * List of {@link ConstellationRequestsLists}.
	 */
	contains ConstellationRequestsListsContainer[0..1] constellationRequestsListsContainer opposite constellationState
	
	/*
	 * Constellation Planners Container.
	 */
	contains ConstellationPlannersContainer[0..1] constellationPlannersContainer opposite constellationState
	
	/*
	 * Imports the {@link AbstractConstellationRequest} contained in the resource specified by the {@link url}.
	 * @param url URL that specifies the resource.
	 * @return List of imported {@link AbstractConstellationRequest}. 
	 */
	op List<AbstractConstellationRequest> importConstellationRequests(String url)
				
	/*
	 * Exports the specified plan into the resource specified by the url.
	 * @param plan Refers the plan to export.
	 * @param url Specifies the location where the plan must be exported.
	 */
	op void export(AbstractConstellationCommandPlan plan, String url)
	
	/*
	 * Imports the {@link AbstractConstellationDownlinkItem} contained in the resource specified by the {@link url}.
	 * @param url URL that specifies the resource.
	 * @return List of imported {@link AbstractConstellationDownlinkItem}. 
	 */
	op List<AbstractConstellationDownlinkItem> importConstellationDownlinkItems(String url)		
}

/*
 * Represents a constellation of Satellites. It provides basic queries used to schedule 
 * image acquisition and upload requests and downloads data from the satellites.
 */
abstract class AbstractConstellation extends Named, Described{
				
	/*
	 * Constellation State.
	 */
	contains ConstellationState[0..1] constellationState
}

/*
 * Default Constellation Implementation Class.
 * 
 * By default {@link AbstractConstellation#newUID} returns {@link DigitUID}.
 */
class DefaultConstellation extends AbstractConstellation{	
}

/*
 * Container of {@link AbstractConstellationPlanner}.
 */
class ConstellationPlannersContainer{
	/*
	 * Refers to the {@link ConstellationState} that contains this container.
	 */
    @GenModel(property="None")	 
	container ConstellationState constellationState opposite constellationPlannersContainer
	
	/*
	 * Constellation Planners.
	 */
	contains AbstractConstellationPlanner[0..*] constellationPlanners opposite constellationPlannersContainer
}

/*
 * Abstract class that defines the concept of Constellation Planner.  A planner is used to process
 * a list of {@link AbstractConstellationRequest} and to generate a {@link ConstellationCommandPlan}.
 */
abstract class AbstractConstellationPlanner extends Named, Described{

	/*
	 * Refers the {@link ConstellationState} that contains the planner.
	 */	 
    @GenModel(property="None")
	container ConstellationPlannersContainer constellationPlannersContainer opposite constellationPlanners
	
	/*
	 * Refers to the {@link ConstellationState} that contains the current planner.
	 */
	@GenModel(children="false", property="None")
	refers local readonly volatile transient derived ConstellationState constellationState get
	{
		if (constellationPlannersContainer == null)
		{
			return null
		}
		else
		{
			return constellationPlannersContainer.constellationState
		}
	}	
	
	/*
	 * Specifies the start date used by the planner.
	 */
	@GenModel(propertyCategory="PLANNER_SETTINGS")
	Date[1] startDate

	/*
	 * Specifies the end date used by the planner.
	 */
    @GenModel(propertyCategory="PLANNER_SETTINGS")	 
	Date[1] endDate
	
	/*
	 * Specifies the list of {@AbstractConstellationRequest} to be processed by the planner.
	 */
    @GenModel(propertyCategory="PLANNER_SETTINGS")	 
	refers ConstellationRequestsList[1] constellationRequestsList
	
	/*
	 * Specifies in which plan the planner will store its results.
	 */
    @GenModel(propertyCategory="PLANNER_SETTINGS")	 	
	refers AbstractConstellationCommandPlan[1] constellationCommandPlan
	
	/*
	 * Specifies the maximum number of threads used by the planner.  0 (default) means the maximum available.
	 */	 
    @GenModel(propertyCategory="PLANNER_SETTINGS")	 	
	int maxNumberThreads = "0"	
	
	/*
	 * Indicates if the duplicates are preserved.  False (default value) indicates only the first command that addresses a
	 * {@link ObservationConstellationRequest} will be preserved.  The commands that occur after in time will be deleted.  True means
	 * all the commands will be preserved. 
	 */
	@GenModel(propertyCategory="VISIBILITY_PASS_VALIDITY")
	boolean commandDuplicatesPreserved  = "false"	
	
	/*
	 * Specifies the elevation mask used 
	 */
	contains ConstantElevationMask[1] elevationMask
	
	/*
	 * Checks if the pass is valid.
	 */
	op boolean isValid(VisibilityPass visibilityPass)
	
	/**
	 * Returns the satellite associated with the specified {@link OrbitModel}.
	 * @param orbitModel The specified {@link OrbitModel}.
	 * @return The Satellite associated with the specified {@link OrbitModel}, null if none is found.
	 */	 
	op Satellite getSatellite(EarthOrbitModel orbitModel)		
		
	/*
	 * Returns the list of {@link AbstractSatelliteCommand} required to process a specific list of {@link AbstractConstellationRequest} 
	 * based on the available constellation satellites.  The plan is added to the list of plans.
	 */
	op void plan() throws Exception	
	
	/*
	 * Validates the planner properties.
	 */
	op void validate() throws Exception
			
	/*
	 * Returns the comparator of {@link AbstractRequestBasedSatelliteCommand} used to sort them.
	 */
	op Comparator<AbstractRequestBasedSatelliteCommand> getRequestBasedSatelliteCommandsComparator()	
	
	/*
	 * Instantiates and returns a command instance to address the specified {@link ObservationConstellationRequest}.
	 * @param request Refers to the request.
	 * @param visibilityPass Visibility pass context.
	 */
	op VisibilityPassBasedSatelliteCommand createVisibilityPassBasedSatelliteCommand(ObservationConstellationRequest request, VisibilityPass visibilityPass)
	
	/*
	 * Populates the content of the command to address the specified {@link ObservationConstellationRequest}.
	 * @param command Command to populate.
	 * @param request Refers to the request.
	 * @param visibilityPass Visibility pass context.
	 */
	op void populateVisibilityPassBasedSatelliteCommand(VisibilityPassBasedSatelliteCommand command, ObservationConstellationRequest request, VisibilityPass visibilityPass)			
}

/*
 * Default Implementation of {@link AbstractConstellationPlanner}.
 */
class DefaultConstellationPlanner extends AbstractConstellationPlanner{
	/*
	 * Indicates if a pass that occurs in umbra must be considered by the planner.
	 */	
	@GenModel(propertyCategory="VISIBILITY_PASS_VALIDITY")
	boolean umbraPassesValid = "false"
	
	/*
	 * Indicates if a pass that requires roll command to ensure coverage must be considered by the planner. 
	 */
	@GenModel(propertyCategory="VISIBILITY_PASS_VALIDITY")
	boolean satelliteRollCommandValid = "false"
	
	/*
	 * Specifies the angle threshold value the planner uses to determine the umbra.
	 */
	@GenModel(propertyCategory="VISIBILITY_PASS_VALIDITY", apogy_units="deg")
	double sunHorizonAngleUmbraThreshold = "5.0"	
}

/*
 * This class contains a list of {@link AbstractSatelliteCommand}.
 * The {@link AbstractConstellation#plan} produces {@link ConstellationCommandPlan}. 
 */
abstract class AbstractConstellationCommandPlan extends Named, Described{
	
	/*
	 * Refers the container of this {@link AbstractConstellationCommandPlan}.
	 */
	@GenModel(property="None")
	container ConstellationCommandPlansList commandPlansList opposite plans
	
	/*
	 * Refers to the {@link ConstellationState} that contains the current plan.
	 */
	@GenModel(children="false", property="None")
	refers local readonly volatile transient derived ConstellationState constellationState get
	{
		if (commandPlansList == null)
		{
			return null
		}
		else
		{
			return commandPlansList.constellationState
		}
	}			
	
	/*
	 * Container of {@link AbstractSatelliteCommand}.
	 */
	contains SatelliteCommandsList[0..1] satelliteCommandsList
}

/*
 * List of {@link AbstractSatelliteCommand}.
 */
class SatelliteCommandsList{
	/*
	 * List of {@link AbstractSatelliteCommand}.
	 */
	contains AbstractSatelliteCommand[0..*] constellationCommands	
}

/*
 * This class contains a list of {@link AbstractSatelliteCommand}.
 * The {@link AbstractConstellation#plan} produces {@link ConstellationCommandPlan}. 
 */
class DefaultConstellationCommandPlan extends AbstractConstellationCommandPlan{
}

/*
 * Container of {@link ConstellationRequestsList}. 
 */
class ConstellationRequestsListsContainer{
	
	/*
	 * Refers to the container {@link ConstellationState}.
	 */
	@GenModel(property="None")
	container ConstellationState constellationState opposite constellationRequestsListsContainer
	
	/*
	 * {@link ConstellationRequestsList} container.
	 */
	contains ConstellationRequestsList[0..*] constellationRequestsLists opposite constellationRequestsListsContainer	
}

/*
 * List that contains {@link AbstractConstellationRequest}.
 */
class ConstellationRequestsList extends Named, Described{	
	
	/* 
	 * Refers the container of this {@link ConstellationRequestsList}.
	 */
    @GenModel(property="None")	 
	container ConstellationRequestsListsContainer constellationRequestsListsContainer opposite constellationRequestsLists
	
	/*
	 * Refers to the {@link ConstellationState} that contains the current list.
	 */
	@GenModel(children="false", property="None")
	refers local readonly volatile transient derived ConstellationState constellationState get
	{
		if (constellationRequestsListsContainer == null)
		{
			return null
		}
		else
		{
			return constellationRequestsListsContainer.constellationState
		}
	}		
	
	/*
	 * {@link AbstractConstellationRequest} container.
	 */
	contains AbstractConstellationRequest[0..*] constellationRequests
}

/*
 * This abstract class is used to model Constellation Request such as {@link ImageConstellationRequest}.
 */
abstract class AbstractConstellationRequest{	
	/*
	 * Request Unique Identifier.
	 */
	contains AbstractUID uid
	
	/*
	 * Request Priority.
	 */
	ConstellationRequestPriority orderPriority = "NORMAL"
	
	/*
	 * Order Status.
	 */
	ConstellationRequestStatus orderStatus = "NEW"		
}

/*
 * Simple Request.
 */
class SimpleRequest extends AbstractConstellationRequest{
}

/*
 * Class that defines a Earth Observation request. 
 */
class ObservationConstellationRequest extends AbstractConstellationRequest{
	/*
	 * Specifies the location of the observation.
	 */
	contains EarthSurfaceLocation location
}

/*
 * Class that documents a request to take an orbital image at a specific location.  
 * It also serves to store the status and the image obtained if any. 
 */
class ImageConstellationRequest extends ObservationConstellationRequest{	
	/*
	 * Contains the {@link OrbitalImage} if the {@link ImageConstellationRequest} was successfully processed and retrieved.
	 */
	contains OrbitalImage[0..1] image	
} 

/*
 * This enumeration is used to indicate the possible {@link AbstractConstellationRequest} order priorities.
 */
enum ConstellationRequestPriority{
	LOW = 0, 
	NORMAL = 1,
	HIGH = 2
}

/*
 * This enumeration is used to indicate the possible {@link AbstractConstellationRequest} statuses.
 */
enum ConstellationRequestStatus{
	NEW = 0,
	COMMITTED = 1,
	COMPLETED = 2,
	FAILED = 3,
	ABORTED = 4
}

/*
 * List that contains {@link Satellite}. 
 */
class SatellitesList{
	contains Satellite[0..*] satellites
}

/*
 * Class that defines the properties of a specific satellite.
 */
class Satellite extends Named{
	/*
	 * Refers to the {@link OrbitModel}.
	 */
	refers EarthOrbitModel[1] orbitModel
	
	/*
	 * Maximum Satellite Roll.
	 */
	 @GenModel(apogy_units="deg")
	 double maximumRoll = "5.0" 
}

/*
 * Satellite Command.
 */
abstract class AbstractSatelliteCommand extends Timed{	
	
	/*
	 * Request Unique Identifier.
	 */
	contains AbstractUID uid
	
	/*
	 * Refers the {@link Satellite} associated with the {@link AbstractSatelliteCommand}. 
	 */
	refers Satellite satellite
}

/*
 * Satellite Command that is linked to a specific {@link AbstractConstellationRequest}.
 */
abstract class AbstractRequestBasedSatelliteCommand extends AbstractSatelliteCommand{
	/*
	 * Refers to the {@link AbstractConstellationRequest} managed by this command.
	 */
	refers AbstractConstellationRequest constellationRequest	
}

class VisibilityPassBasedSatelliteCommand extends AbstractRequestBasedSatelliteCommand{
	/*
	 * Refers the {@link VisibilityPass} associated to the command.
	 */	
	contains VisibilityPass [0..1] visibilityPass
}

/*
 * Satellite Command to Acquire OrbitalImage
 */
class AcquireImageSatelliteCommand extends AbstractRequestBasedSatelliteCommand, GeographicCoordinates
{
	/* 
	 * The satellite is nadir looking, and can roll back and forth (+- X degrees) along its trajectory.
     * An imager is mounted on its nadir axis and can take images of the Earth below. 
     */
	double rollAngle = "0.0"	
}

/*
 * This class represents an orbital image.
 */
class OrbitalImage extends EImage, GeographicCoordinates{
	double rollAngle = "0.0"	
}

/*
 * This class represents a list of {@link ConstellationDownlink}.
 */
class ConstellationDownlinksList extends Named, Described{	
	
	/*
	 * Refers to the container {@link ConstellationState}.
	 */
	@GenModel(property="None")
	container ConstellationState constellationState opposite downlinksLists
	
	/*
	 * Contains the {@link ConstellationDownlink}.
	 */
	contains ConstellationDownlink[0..*] downlinks opposite constellationDownlinksList
}

/* 
 * A {@link ConstellationDownlink} class contains the {@link AbstractConstellationDownlinkItem}.
 */
class ConstellationDownlink{
	/*
	 * Refers he container {@link ConstellationDownlinksList}.
	 */
	container ConstellationDownlinksList constellationDownlinksList opposite downlinks
	
	/*
	 * Contains the {@link AbstractConstellationDownlinkItem}.
	 */
	contains AbstractConstellationDownlinkItem[0..*] downlinkItems
}

/*
 * This class represents an item in a {@link ConstellationDownlink}.
 */
abstract class AbstractConstellationDownlinkItem{
	/*
	 * Unique {@link AbstractConstellationRequest} identifier.
	 */
	contains AbstractUID requestUID
	
	/*
	 * Refers to the request that is the owner of this item.
	 */
	refers AbstractConstellationRequest [0..1] request	
}

/*
 * This class represents a {@link AbstractDownlinkItem} that contains an {@link OrbitalImage}.
 */
class OrbitalImageConstellationDownlinkItem extends AbstractConstellationDownlinkItem{
	contains OrbitalImage[0..1] image	
}