/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyExamplesSatellite",
		  copyrightText="Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html
Contributors:
Canadian Space Agency (CSA) - Initial API and implementation
-Pierre Allard (Pierre.Allard@canada.ca),
-Regent L'Archeveque (Regent.Larcheveque@canada.ca),
-Sebastien Gemme (Sebastien.Gemme@canada.ca)",
		  modelName="ApogyExamplesSatellite",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.examples.satellite/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.examples.satellite.edit/src-generated")

package ca.gc.asc_csa.apogy.examples.satellite

import ca.gc.asc_csa.apogy.common.emf.Described
import ca.gc.asc_csa.apogy.common.emf.Named
import ca.gc.asc_csa.apogy.common.emf.Timed
import ca.gc.asc_csa.apogy.common.images.EImage
import ca.gc.asc_csa.apogy.core.environment.GeographicCoordinates
import ca.gc.asc_csa.apogy.core.environment.orbit.OrbitModel
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.GroundStationReferencesList
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.VisibilityPass
import ca.gc.asc_csa.apogy.core.Exception
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.ElevationMask
import ca.gc.asc_csa.apogy.core.environment.orbit.earth.ConstantElevationMask

type List<T> wraps java.util.List
type SortedSet<T> wraps java.util.SortedSet 
type Comparator<T> wraps java.util.Comparator 
 
 
 // FIXME Add public SortedSet<VisibilityPass> getGroundStationPasses(Satellite satellite, Date startDate, Date endDate, ElevationMask elevationMask) throws Exception
 // FIXME Add Parallel Execution to process passes.
 // FIXME Include Derived Visibility Passes in the Constellation.
  
/*
 * Abstract Unique Identifier.  This class is meant to be sub-classed.
 */
abstract class AbstractUID{
}

/*
 * Unique Identifier in string format (Default).
 */
class StringUID extends AbstractUID{
	String ^id
}

/*
 * Class that contains list of {@link ConstellationCommandPlan}.
 */
 class ConstellationCommandPlansList{
 	contains AbstractConstellationCommandPlan[0..*] plans
 }
 
 /*
  * Class used to store the constellation state. 
  */
 class ConstellationState{
 	/*
	 * List of {@link ConstellationCommandPlan}s.
	 */	 
	contains ConstellationCommandPlansList[0..1] constellationCommandPlansList
	 
	/*
	 * List of the constellation {@link Satellite}. 
	 */
	contains SatellitesList[0..1] satellitesList	
	
	/*
	 * List of the {@link GroundStation}.
	 */
	contains GroundStationReferencesList[0..1] groundStationsReferencesList
	
	/*
	 * List of {@link ConstellationDownlinkList} used to store {@link ConstellationDownlink}.
	 */
	contains ConstellationDownlinksList[0..1] downlinksLists
	
	/*
	 * List of {@link AbstractConstellationRequest}.
	 */
	contains ConstellationRequestsList[0..1] constellationRequestsList
	
	/*
	 * Constellation Planner.
	 */
	contains AbstractConstellationPlanner[0..1] constellationPlanner opposite constellationState	
 }

/*
 * Represents a constellation of Satellites. It provides basic queries used to schedule 
 * image acquisition and upload requests and downloads data from the satellites.
 */
abstract class AbstractConstellation extends Named, Described{
		
	/*
	 * Constellation State.
	 */
	contains ConstellationState[0..1] constellationState
	
	/*
	 * Exports the specified plan into the resource specified by the url.
	 * @param plan Refers the plan to export.
	 * @param url Specifies the location where the plan must be exported.
	 */
	op void export(AbstractConstellationCommandPlan plan, String url) 
	
	/*
	 * Packages and commits the specified plan.  
	 * @param plan Reference to the {@link ConstellationCommandPlan}.
	 */
	op void commit(AbstractConstellationCommandPlan plan)

	/* 
	 * Updates the {@link AbstractConstellationRequest} state based on the {@link ConstallationDownlink}. 
	 * @param downlink Reference to the {@link ConstellationDownlink}.
	 */
	op void apply(ConstellationDownlink downlink)
	
	/*
	 * Imports the {@link ConstellationDownlink} into the current {@link Constellation}.
	 * @param url String that refers the resource that embeds a {@link ConstellationDownlink}. 
	 */
	op void importConstellationDownlink(String url)
	
	/*
	 * Imports the {@link AbstractConstellationRequest} contained in the resource specified by the {@link url}.
	 * @param url URL that specifies the resource.
	 * @return List of imported {@link AbstractConstellationRequest}. 
	 */
	op List<AbstractConstellationRequest> importConstellationRequests(String url)	
}

/*
 * Default Constellation Implementation Class.
 * 
 * By default {@link AbstractConstellation#newUID} returns {@link DigitUID}.
 */
class DefaultConstellation extends AbstractConstellation{	
}

/*
 * Abstract class that defines the concept of Constellation Planner.  A planner is used to process
 * a list of {@link AbstractConstellationRequest} and to generate a {@link ConstellationCommandPlan}.
 */
abstract class AbstractConstellationPlanner{

	/*
	 * Refers the {@link ConstellationState} that contains the planner.
	 */	
	container ConstellationState constellationState opposite constellationPlanner
	
	/*
	 * Specifies the start date used by the planner.
	 */
	Date startDate

	/*
	 * Specifies the end date used by the planner.
	 */
	Date endDate
	
	/*
	 * Specifies the list of {@AbstractConstellationRequest} to be processed by the planner.
	 */
	refers ConstellationRequestsList constellationRequestsList
	
	/*
	 * Specifies in which plan the planner will store its results.
	 */	
	refers AbstractConstellationCommandPlan constellationCommandPlan
	
	/*
	 * Specifies the elevation mask used 
	 */
	contains ConstantElevationMask elevationMask
		
	/*
	 * Returns the visibility passes for a given {@link AbstractConstellationRequest}. 
	 * @param request The {@link AbstractConstellationRequest} that needs commanding.
	 * @param startDate The start date of the period to be queried.
	 * @param endDate The end date of the period to be queried.
	 * @param elevationMask The ElevationMask to be used to determine the visibility of satellites by the surface location.
	 * @return The list of Visibility passes, ordered by start time.
	 */
	op SortedSet<VisibilityPass> getTargetPasses(AbstractConstellationRequest request, Date startDate, Date endDate, ElevationMask elevationMask) throws Exception
	
	/*
	 * Checks if the pass is valid.
	 */
	op boolean valid(VisibilityPass visibilityPass)
	
	/**
	 * Returns the satellite associated with the specified {@link OrbitModel}.
	 * @param orbitModel The specified {@link OrbitModel}.
	 * @return The Satellite associated with the specified {@link OrbitModel}, null if none is found.
	 */
	op Satellite getSatellite(OrbitModel orbitModel)		
		
	/*
	 * Returns the list of {@link AbstractSatelliteCommand} required to process a specific list of {@link AbstractConstellationRequest} 
	 * based on the available constellation satellites.  The plan is added to the list of plans.
	 */
	op void plan() throws Exception	
	
	/*
	 * Validates the planner properties.
	 */
	op void validate() throws Exception
	
	/*
	 * Sorts the following requests.
	 */
	op SortedSet<AbstractConstellationRequest> sortRequests(List<AbstractConstellationRequest> requests)
	
	/*
	 * Returns the comparator of {@link AbstractConstellationRequest} used to sort them.
	 */
	op Comparator<AbstractConstellationRequest> getConstellationRequestComparator()
	
	/*
	 * Creates a list of commands to address the specified {@link AbstractConstellationRequest}.
	 * @param request
	 * @param time Time at which the main command must be performed.
	 * @param satellite Refers to the satellite that will perform the command.
	 * @param rollAngle Roll angle associated to the observation request.
	 */
	op List<AbstractSatelliteCommand> createObservationSatelliteCommands(AbstractConstellationRequest request, Date time, Satellite satellite, double rollAngle)
}

/*
 * Default Implementation of {@link AbstractConstellationPlanner}.
 */
class DefaultConstellationPlanner extends AbstractConstellationPlanner{	
}

/*
 * This class contains a list of {@link AbstractSatelliteCommand}.
 * The {@link AbstractConstellation#plan} produces {@link ConstellationCommandPlan}. 
 */
abstract class AbstractConstellationCommandPlan extends Named, Described{
	/*
	 * List of {@link AbstractSatelliteCommand}.
	 */
	contains AbstractSatelliteCommand[0..*] constellationCommands
}

/*
 * This class contains a list of {@link AbstractSatelliteCommand}.
 * The {@link AbstractConstellation#plan} produces {@link ConstellationCommandPlan}. 
 */
class DefaultConstellationCommandPlan extends AbstractConstellationCommandPlan{
}


/*
 * List that contains {@link AbstractConstellationRequest}.
 */
class ConstellationRequestsList extends Named, Described{	
	/*
	 * {@link AbstractConstellationRequest} container.
	 */
	contains AbstractConstellationRequest[0..*] constellationRequests
}

/*
 * This abstract class is used to model Constellation Request such as {@link ImageConstellationRequest}.
 */
abstract class AbstractConstellationRequest{	
	/*
	 * Request Unique Identifier.
	 */
	contains AbstractUID uid
	
	/*
	 * Request Priority.
	 */
	ConstellationRequestPriority orderPriority = "NORMAL"
	
	/*
	 * Order Status.
	 */
	ConstellationRequestStatus orderStatus = "NEW"		
}

/*
 * Class that documents a request to take an orbital image at a specific location.  
 * It also serves to store the status and the image obtained if any. 
 */
class ImageConstellationRequest extends AbstractConstellationRequest, GeographicCoordinates{	
	/*
	 * Contains the {@link OrbitalImage} if the {@link ImageConstellationRequest} was successfully processed and retrieved.
	 */
	contains OrbitalImage[0..1] image	
} 

/*
 * This enumeration is used to indicate the possible {@link AbstractConstellationRequest} order priorities.
 */
enum ConstellationRequestPriority{
	LOW = 0, 
	NORMAL = 1,
	HIGH = 2
}

/*
 * This enumeration is used to indicate the possible {@link AbstractConstellationRequest} statuses.
 */
enum ConstellationRequestStatus{
	NEW = 0,
	COMMITTED = 1,
	COMPLETED = 2,
	FAILED = 3,
	ABORTED = 4
}

/*
 * List that contains {@link Satellite}. 
 */
class SatellitesList{
	contains Satellite[0..*] satellites
}

/*
 * Class that defines the properties of a specific satellite.
 */
class Satellite extends Named{
	/*
	 * Refers to the {@link OrbitModel}.
	 */
	refers OrbitModel[1] orbitModel
	
	/*
	 * Maximum Satellite Roll.
	 */
	 @GenModel(apogy_units="deg")
	 double maximumRoll = "5.0" 
}

/*
 * Satellite Command.
 */
abstract class AbstractSatelliteCommand extends Timed{	
	
	/*
	 * Request Unique Identifier.
	 */
	contains AbstractUID uid
	
	/*
	 * Refers the {@link Satellite} associated with the {@link AbstractSatelliteCommand}. 
	 */
	refers Satellite satellite
}

/*
 * Satellite Command that is linked to a specific {@link AbstractConstellationRequest}.
 */
abstract class AbstractRequestBasedSatelliteCommand extends AbstractSatelliteCommand{
	/*
	 * Refers to the {@link AbstractConstellationRequest} managed by this command.
	 */
	refers AbstractConstellationRequest constellationRequest	
}

/*
 * Satellite Command to Acquire OrbitalImage
 */
class AcquireImageSatelliteCommand extends AbstractRequestBasedSatelliteCommand, GeographicCoordinates
{
	/* 
	 * The satellite is nadir looking, and can roll back and forth (+- X degrees) along its trajectory.
     * An imager is mounted on its nadir axis and can take images of the Earth below. 
     */
	double rollAngle = "0.0"	
}

/*
 * This class represents an orbital image.
 */
class OrbitalImage extends EImage, GeographicCoordinates{
	double rollAngle = "0.0"	
}

/*
 * This class represents a list of {@link ConstellationDownlink}.
 */
class ConstellationDownlinksList extends Named, Described{	
	contains ConstellationDownlink[0..*] downlinks
}

/* 
 * A {@link ConstellationDownlink} class contains the {@link AbstractConstellationDownlinkItem}.
 */
class ConstellationDownlink{
	contains AbstractConstellationDownlinkItem[0..*] downlinkItems
}

/*
 * This class represents an item in a {@link ConstellationDownlink}.
 */
abstract class AbstractConstellationDownlinkItem{
	/*
	 * Unique {@link AbstractConstellationRequest} identifier.
	 */
	contains AbstractUID requestUID		
}

/*
 * This class represents a {@link AbstractDownlinkItem} that contains an {@link OrbitalImage}.
 */
class OrbitalImageConstellationDownlinkItem extends AbstractConstellationDownlinkItem{
	contains OrbitalImage[0..1] image	
}

/*
 * Utilities class for the satellite example.
 */
class ConstellationUtilities{
	
	/*
	 * Adds all the specified requests into the specified container.
	 * @param container Refers to the destination list.
	 * @param requests List of {@link AbstractConstellationRequest} to be imported.
	 */
	op void addAllRequests(ConstellationRequestsList ^container, List<AbstractConstellationRequest> requests)
	
    /*
	 * Adds the specified {@link AbstractConstellationRequest} to the list of {@link ConstellationRequestsList}.
	 * @param container Refers to the destination list.
	 * @param request Specifies the request to add to the list.
	 */
	op void addRequest(ConstellationRequestsList ^container, AbstractConstellationRequest request)
	
	/*
	 * Removes the specified {@link AbstractConstellationRequest} from the specified {@link ConstellationRequestsList}.
	 * @param container Refers to the {@link ConstellationRequestsList}. 
	 * @param request Specifies the request to remove from the list.
	 */	
	op void removeRequest(ConstellationRequestsList ^container, AbstractConstellationRequest request)
	
	/*
	 * Removes all the {@link AbstractConstellationRequest} specified from the list from the specified {@link ConstellationRequestsList}.
	 * @param container Refers to the {@link ConstellationRequestsList}. 
	 * @param request Specifies the requests to remove from the {@link AbstractConstellation}.
	 */		
	op void removeAllRequests(ConstellationRequestsList ^container, List<AbstractConstellationRequest> requests)		
}