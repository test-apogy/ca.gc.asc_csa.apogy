@GenModel(prefix="EMFEcoreInvocatorDisplay", childCreationExtenders="true", extensibleProviderFactory="true", multipleEditorPages="false", copyrightText="Canadian Space Agency / Agence spatiale canadienne 2012 Copyrights (c)", modelName="EMFEcoreInvocatorDisplay")
@GenModel(modelDirectory="/org.eclipse.symphony.core.display/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.core.display.edit/src-generated")
//@GenModel(editorDirectory="/org.eclipse.symphony.core.display.editor/src")
//@GenModel(testsDirectory="/org.eclipse.symphony.core.invocator.tests/src")

package org.eclipse.symphony.core.display

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature

import org.eclipse.symphony.common.emf.Ranges
import org.eclipse.symphony.core.invocator.AbstractDisplay
import org.eclipse.symphony.common.emf.AbstractFeatureNode


/* ------------------------------------------------------------------------------------------
 * 
 * DataTypes.
 * 
 * ------------------------------------------------------------------------------------------ */ 

type List < T > wraps java.util.List
type SortedSet<T> wraps java.util.SortedSet
type Color wraps org.eclipse.swt.graphics.Color
type Control wraps org.eclipse.swt.widgets.Control
type Point wraps java.awt.Point
type Composite wraps org.eclipse.swt.widgets.Composite
type DataBindingContext wraps org.eclipse.core.databinding.DataBindingContext
type EditingDomain  wraps org.eclipse.emf.edit.domain.EditingDomain
type IObservableValue wraps org.eclipse.core.databinding.observable.value.IObservableValue

type Number wraps java.lang.Number
type Long wraps java.lang.Long
type SortedMap<K,V> wraps java.util.SortedMap

@GenModel(documentation="Base class for all displayed features.")
abstract class AbstractFeatureDisplay extends AbstractDisplay
{
	@GenModel(documentation="The feature being displayed.")
	@GenModel(notify="true")
	refers AbstractFeatureNode[1] abstractFeatureNode
		
	@GenModel(documentation="Creates a Control to display the feature.")
	op Control createControl(Composite parent)
	
	@GenModel(documentation="Returns the minimum size that Control should have to display the feature.")
	op Point getControlMinimumSize(Control control)
	
	@GenModel(documentation="Binds the feature being displayed to the specified Control.")
	op DataBindingContext bindControl(Control control)
	
	@GenModel(documentation="Makes the Control to change its appearance to display the specified current Ranges.")
	op void updateRange(Control control, Ranges range)	
	
	@GenModel(documentation="Makes the Control to change its appearance to display to display whether or not the Control displayed value is resolved.")
	op void updateResolved(Control control, boolean resolved)
	
	@Ecore(defaultValueLiteral="-1")
	int minimumWidth
	
	@Ecore(defaultValueLiteral="-1")
	int minimumHeight
}

@GenModel(documentation="Display that show a value as text.")
class TextDisplay extends AbstractFeatureDisplay
{
	@GenModel(documentation="The decimal format to use if the value is a Number.")
	@Ecore(defaultValueLiteral="0.000")
	String decimalFormat	
}

@GenModel(documentation="Display that show a value as boolean.")
class BooleanDisplay extends AbstractFeatureDisplay
{	
}

@GenModel(documentation="Represents a class that handles history data.")
abstract class HistoryDataHandler
{
	op HistoryData getHistoryData(Control control)
	op void applyHistoryData(Control control, HistoryData historyData)
}

@GenModel(documentation="History data.")
abstract class HistoryData
{	
}

@GenModel(documentation="Specialized case of History data that contains a Map of Time,Number.")
class NumberVersusTimeHistoryData extends HistoryData
{
	SortedMap<Long,Number>[1] historyData
}

@GenModel(documentation="Abstract Display that show a value as a plot.")
abstract class AbstractPlotDisplay extends AbstractFeatureDisplay, HistoryDataHandler
{
	@Ecore(defaultValueLiteral="true")
	boolean repeatLastValue
	
	@Ecore(defaultValueLiteral="true")
	boolean useDataBuffering	
	
	@Ecore(defaultValueLiteral="60.0")
	double historyLength	
}

@GenModel(documentation="Display that show a number value as a plot.")
class NumberVsTimePlotDisplay extends AbstractPlotDisplay
{		
}

/* -------------------------------------------------------------------------
 * Facade.
 * ------------------------------------------------------------------------- */

class DisplayFacade
{		
	@GenModel(documentation="Returns a user readable qualified name for the specified AbstractFeatureDisplay.")
	op String getDisplayedName(AbstractFeatureDisplay abstractFeatureDisplay)
	
	op EObject getSource(AbstractFeatureDisplay abstractFeatureDisplay)


	op EStructuralFeature getEStructuralFeature(AbstractDisplay abstractDisplay)
	
	op IObservableValue getIObservableValue(AbstractFeatureDisplay abstractFeatureDisplay, Control control)	
} 