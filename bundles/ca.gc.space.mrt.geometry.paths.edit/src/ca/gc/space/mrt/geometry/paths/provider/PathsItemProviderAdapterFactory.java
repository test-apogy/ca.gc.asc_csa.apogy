/**
 * Canadian Space Agency 2007.
 *
 * $Id: PathsItemProviderAdapterFactory.java,v 1.3.4.2 2015/05/21 15:51:22 pallard Exp $
 */
package ca.gc.space.mrt.geometry.paths.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import ca.gc.space.mrt.geometry.paths.util.PathsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PathsItemProviderAdapterFactory extends PathsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Canadian Space Agency 2007.";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PathsItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.Path} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathItemProvider pathItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.Path}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathAdapter()
	{
		if (pathItemProvider == null) {
			pathItemProvider = new PathItemProvider(this);
		}

		return pathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.WayPointPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WayPointPathItemProvider wayPointPathItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.WayPointPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWayPointPathAdapter()
	{
		if (wayPointPathItemProvider == null) {
			wayPointPathItemProvider = new WayPointPathItemProvider(this);
		}

		return wayPointPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.WayPointPathInterpolator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WayPointPathInterpolatorItemProvider wayPointPathInterpolatorItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.WayPointPathInterpolator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWayPointPathInterpolatorAdapter()
	{
		if (wayPointPathInterpolatorItemProvider == null) {
			wayPointPathInterpolatorItemProvider = new WayPointPathInterpolatorItemProvider(this);
		}

		return wayPointPathInterpolatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.CatmullRomWayPointPathInterpolator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CatmullRomWayPointPathInterpolatorItemProvider catmullRomWayPointPathInterpolatorItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.CatmullRomWayPointPathInterpolator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCatmullRomWayPointPathInterpolatorAdapter()
	{
		if (catmullRomWayPointPathInterpolatorItemProvider == null) {
			catmullRomWayPointPathInterpolatorItemProvider = new CatmullRomWayPointPathInterpolatorItemProvider(this);
		}

		return catmullRomWayPointPathInterpolatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.MinimumDistanceFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinimumDistanceFilterItemProvider minimumDistanceFilterItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.MinimumDistanceFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinimumDistanceFilterAdapter()
	{
		if (minimumDistanceFilterItemProvider == null) {
			minimumDistanceFilterItemProvider = new MinimumDistanceFilterItemProvider(this);
		}

		return minimumDistanceFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.PathsFacade} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathsFacadeItemProvider pathsFacadeItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.PathsFacade}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathsFacadeAdapter()
	{
		if (pathsFacadeItemProvider == null) {
			pathsFacadeItemProvider = new PathsFacadeItemProvider(this);
		}

		return pathsFacadeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.SegmentWayPointPathInterpolator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SegmentWayPointPathInterpolatorItemProvider segmentWayPointPathInterpolatorItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.SegmentWayPointPathInterpolator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSegmentWayPointPathInterpolatorAdapter()
	{
		if (segmentWayPointPathInterpolatorItemProvider == null) {
			segmentWayPointPathInterpolatorItemProvider = new SegmentWayPointPathInterpolatorItemProvider(this);
		}

		return segmentWayPointPathInterpolatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.UniformDistanceWayPointPathInterpolator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniformDistanceWayPointPathInterpolatorItemProvider uniformDistanceWayPointPathInterpolatorItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.UniformDistanceWayPointPathInterpolator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniformDistanceWayPointPathInterpolatorAdapter()
	{
		if (uniformDistanceWayPointPathInterpolatorItemProvider == null) {
			uniformDistanceWayPointPathInterpolatorItemProvider = new UniformDistanceWayPointPathInterpolatorItemProvider(this);
		}

		return uniformDistanceWayPointPathInterpolatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.gc.space.mrt.geometry.paths.WayPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WayPointItemProvider wayPointItemProvider;

	/**
	 * This creates an adapter for a {@link ca.gc.space.mrt.geometry.paths.WayPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWayPointAdapter()
	{
		if (wayPointItemProvider == null) {
			wayPointItemProvider = new WayPointItemProvider(this);
		}

		return wayPointItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (pathItemProvider != null) pathItemProvider.dispose();
		if (wayPointPathItemProvider != null) wayPointPathItemProvider.dispose();
		if (wayPointPathInterpolatorItemProvider != null) wayPointPathInterpolatorItemProvider.dispose();
		if (catmullRomWayPointPathInterpolatorItemProvider != null) catmullRomWayPointPathInterpolatorItemProvider.dispose();
		if (minimumDistanceFilterItemProvider != null) minimumDistanceFilterItemProvider.dispose();
		if (pathsFacadeItemProvider != null) pathsFacadeItemProvider.dispose();
		if (segmentWayPointPathInterpolatorItemProvider != null) segmentWayPointPathInterpolatorItemProvider.dispose();
		if (uniformDistanceWayPointPathInterpolatorItemProvider != null) uniformDistanceWayPointPathInterpolatorItemProvider.dispose();
		if (wayPointItemProvider != null) wayPointItemProvider.dispose();
	}

}
