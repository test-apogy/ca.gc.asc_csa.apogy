@GenModel(prefix="Symphony__CommonTopologyAddonsPrimitives",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Symphony__CommonTopologyAddonsPrimitives",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.common.topology.addons.primitives/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.common.topology.addons.primitives.edit/src-generated")

package org.eclipse.symphony.common.topology.addons.primitives

import org.eclipse.emf.ecore.EClass
import org.eclipse.symphony.common.topology.Node
import org.eclipse.symphony.common.topology.Leaf
import org.eclipse.symphony.common.topology.AggregateGroupNode
import org.eclipse.symphony.common.math.Tuple3d

type Point3d wraps javax.vecmath.Point3d
type Vector3d wraps javax.vecmath.Vector3d

class Vector extends Node
{
	double xRotation = "0.0"
	
	double yRotation = "0.0"
	
	double zRotation = "0.0"
	
	double length
	
	readonly transient volatile derived Point3d endPoint
}

class PickVector extends Vector
{
	/*
	 * The current shortest intersection distance between
	 * the ray and a node of one of the included type.
	 */
	@GenModel(csa_units="m")
	double intersectionDistance = "-1.0"
	
	refers Node intersectedNode
	
	Point3d relativeIntersectionPosition
	
	Point3d absoluteIntersectionPosition
	
	refers EClass [0..*] nodeTypesInIntersection
	
	refers EClass [0..*] nodeTypesToExcludeFromIntersection
	
	op boolean isNodeIncludedInIntersection(Node node)
}

class Plane extends Node
{
	contains Tuple3d v0
	
	contains Tuple3d v1
	
	double width
	
	double height
}

class WayPoint extends AggregateGroupNode
{
	
}

class Label extends Node
{
	
}

class SpherePrimitive extends AggregateGroupNode
{
	double radius
}

abstract class Light extends Leaf
{
	boolean enabled = "true"
	
	contains Tuple3d color
}

class AmbientLight extends Light
{
	
}

class DirectionalLight extends Light
{
	contains Tuple3d direction
}

/*
 * The PointLight object specifies an attenuated light source at a fixed point in space that radiates light equally in all directions away from the light source. PointLight has the same attributes as a Light node, with the addition of location and attenuation parameters.
 *
 * A point light contributes to diffuse and specular reflections, which in turn depend on the orientation and position of a surface. A point light does not contribute to ambient reflections.
 *
 * A PointLight is attenuated by multiplying the contribution of the light by an attenuation factor. The attenuation factor causes the the PointLight's brightness to decrease as distance from the light source increases. A PointLight's attenuation factor contains three values:
 * <ul>
 * <li>Constant attenuation</li>
 * <li>Linear attenuation</li>
 * <li>Quadratic attenuation</li>
 * </ul>
 * A PointLight is attenuated by the reciprocal of the sum of:
 * <ul>
 * <li>The constant attenuation factor</li>
 * <li>The Linear attenuation factor times the distance between the light and the vertex being illuminated</li>
 * <li>The quadratic attenuation factor times the square of the distance between the light and the vertex </li>
 * </ul>
 * By default, the constant attenuation value is 1 and the other two values are 0, resulting in no attenuation. 
 */
class PointLight extends Light
{
	contains Tuple3d position
	
	contains Tuple3d attenuation
}

/*
 * The SpotLight object specifies an attenuated light source at a fixed point in space that radiates light in a specified direction from the light source. A SpotLight has the same attributes as a PointLight node, with the addition of the following:
 * <ul>
 * <li>Direction - The axis of the cone of light. The default direction is (0.0, 0.0, -1.0). The spot light direction is significant only when the spread angle is not PI radians (which it is by default).</li>
 * <li>Spread angle - The angle in radians between the direction axis and a ray along the edge of the cone. Note that the angle of the cone at the apex is then twice this value. The range of values is [0.0,PI/2] radians, with a special value of PI radians. Values lower than 0 are clamped to 0 and values over PI/2 are clamped to PI. The default spread angle is PI radians.</li>
 * <li>Concentration - Specifies how quickly the light intensity attenuates as a function of the angle of radiation as measured from the direction of radiation. The light's intensity is highest at the center of the cone and is attenuated toward the edges of the cone by the cosine of the angle between the direction of the light and the direction from the light to the object being lit, raised to the power of the spot concentration exponent. The higher the concentration value, the more focused the light source. The range of values is [0.0,128.0]. The default concentration is 0.0, which provides uniform light distribution.</li>
 * </ul>
 * A spot light contributes to diffuse and specular reflections, which depend on the orientation and position of an object's surface. A spot light does not contribute to ambient reflections. 
 */
class SpotLight extends PointLight
{
	float concentration
	
	float spreadAngle
	
	contains Tuple3d direction
}

class Symphony__CommonTopologyAddonsPrimitivesFacade
{
	op Vector createVector(Vector vector)
	
	op Vector createVector(Point3d p0, Point3d p1)
	
	op Vector createVector(double rotationX, double rotationY, double rotationZ, double length)
	
	op Plane createPlane(Vector3d v0, Vector3d v1, double width, double height)
	
	op AmbientLight createAmbientLight(Tuple3d color)
	
	op AmbientLight createAmbientLight(boolean lightOn, Tuple3d color)
	
	op DirectionalLight createDirectionalLight(Tuple3d color, Tuple3d direction)
	
	op DirectionalLight createDirectionalLight(boolean lightOn, Tuple3d color, Tuple3d direction)
	
	op PointLight createPointLight(Tuple3d position)
	
	op PointLight createPointLight(Tuple3d color, Tuple3d position)
	
	op PointLight createPointLight(Tuple3d color, Tuple3d position, Tuple3d attenuation)
	
	op PointLight createPointLight(boolean lightOn, Tuple3d color, Tuple3d position, Tuple3d attenuation)
	
	op SpotLight createSpotLight(Tuple3d color, Tuple3d position, Tuple3d attenuation, Tuple3d direction, float spreadAngle, float concentration)
	
	op SpotLight createSpotLight(boolean lightOn, Tuple3d color, Tuple3d position, Tuple3d attenuation, Tuple3d direction, float speadAngle, float concentration)
}