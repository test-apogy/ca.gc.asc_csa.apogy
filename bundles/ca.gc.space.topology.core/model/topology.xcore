@GenModel(prefix="Topology",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Topology",
	      operationReflection="true",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/ca.gc.space.topology.core/src-generated")
@GenModel(editDirectory="/ca.gc.space.topology.core.edit/src-generated")

package ca.gc.space.topology.core

import org.eclipse.symphony.common.math.Tuple3d
import org.eclipse.symphony.common.math.Matrix3x3

type Matrix4d wraps javax.vecmath.Matrix4d
type EClass wraps org.eclipse.emf.ecore.EClass
type Class<T> wraps java.lang.Class

interface INodeVisitor
{
	op void visit(Node node)
	
	Class<? extends Node> nodeType
}

abstract class TopologyProvider
{
	refers GroupNode topologyRoot
}

abstract class Node
{
	refers Node parent
	
	String description
	
	String nodeId
	
	op void accept(INodeVisitor visitor)
}

class Link extends Node
{
	refers Node node
}

class Leaf extends Node
{
	
}

class URLNode extends Leaf
{
	String url
	
	int polygonCount
	
	int vertexCount
}
class CADNode extends URLNode
{
	String nodeName
}

class ContentNode<T> extends Leaf
{
	contains T content
}

class ReferencedContentNode<T> extends ContentNode<T>
{
	refers T referencedContent
}

class AggregateContentNode<T> extends ContentNode<T>
{
	contains T aggregateContent
}

class GroupNode extends Node
{
	contains Node [0..*] children
}

class ReferencedGroupNode extends GroupNode
{
	refers Node [0..*] referencedChildren
}

class AggregateGroupNode extends GroupNode
{
	contains Node [0..*] aggregatedChildren
}

class PositionNode extends AggregateGroupNode
{
	contains Tuple3d position
}

class RotationNode extends AggregateGroupNode
{
	contains Matrix3x3 rotationMatrix
}
	 

class TransformNode extends PositionNode, RotationNode
{
	op Matrix4d asMatrix4d()
	
	op void setTransformation(Matrix4d matrix)
}

class PickAndPlaceNode extends TransformNode
{
	
}

class TopologyFacade
{
	op Link createLink(Node node)
	
	op <T> ContentNode<T> createContentNode(T content)
	
	op <T> ReferencedContentNode<T> createReferencedContentNode(T content)
	
	op <T> AggregateContentNode<T> createAggregateContentNode(T content)
	
	op PositionNode createPositionNode(double x, double y, double z)
	
	op RotationNode createRotationNodeXYZ(double x, double y, double z)
	
	op RotationNode createRotationNodeYZX(double x, double y, double z)
	
	op RotationNode createRotationNodeZYX(double x, double y, double z)
	
	op TransformNode createTransformNodeXYZ(double tx, double ty, double tz, double rx, double ry, double rz)
	
	op TransformNode createTransformNodeYZX(double tx, double ty, double tz, double rx, double ry, double rz)
	
	op TransformNode createTransformNodeZYX(double tx, double ty, double tz, double rx, double ry, double rz)
	
	op TransformNode createTransformNode(Matrix4d matrix)
	
	op PickAndPlaceNode createPickAndPlaceNode(Matrix4d matrix)
	
	op Matrix4d expressNodeInRootFrame(Node node)
	
	op Matrix4d expressRootInNodeFrame(Node node)
	 
	op Matrix4d expressInFrame(Node sourceFrame, Node targetFrame)
	
	op Node[] findNodesByDescription(String description, Node topology)
	
	op Node[] findNodesByID(String nodeId, Node topology)
	
	op Node[] findNodesByType(EClass clazz, Node topology)
	
	op Node findRoot(Node node)
	
	op double getEuclideanDistance(Node fromNode, Node toNode)
	
	op double getGeodesicDistance(Node fromNode, Node toNode)
	
	op void printTopology(Node node)
}