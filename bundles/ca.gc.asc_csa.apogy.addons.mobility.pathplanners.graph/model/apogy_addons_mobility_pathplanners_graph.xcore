/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyAddonsMobilityPathplannersGraph",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  copyrightText="Agence spatiale canadienne / Canadian Space Agency 2015 Copyrights (c)",
		  modelName="ApogyAddonsMobilityPathplannersGraph")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.addons.mobility.pathplanners.graph/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.addons.mobility.pathplanners.graph.edit/src-generated")

package ca.gc.asc_csa.apogy.addons.mobility.pathplanners.graph

import ca.gc.asc_csa.apogy.common.geometry.data3d.CartesianPolygon
import ca.gc.asc_csa.apogy.addons.mobility.pathplanners.MeshWayPointPathPlanner
import ca.gc.asc_csa.apogy.common.processors.VerboseProvider
import org.jgrapht.EdgeFactory
import org.jgrapht.DirectedGraph
import org.jgrapht.graph.SimpleDirectedWeightedGraph
import ca.gc.asc_csa.apogy.common.geometry.data3d.CartesianAxis
import ca.gc.asc_csa.apogy.addons.mobility.pathplanners.ExclusionZone

type DirectedGraph wraps DirectedGraph<?,?>
type SimpleDirectedWeightedGraph wraps SimpleDirectedWeightedGraph<?,?>

class CostBasedMeshWayPointPathPlanner<PolygonType extends CartesianPolygon> extends MeshWayPointPathPlanner<PolygonType>
{
	contains DisplacementCostFunction[0..*] costFunctions
} 

abstract class DisplacementCostFunction
{
	op double getCost(CartesianPolygon from, CartesianPolygon to)
}

class MeshDisplacementCostFunction extends DisplacementCostFunction
{
	refers CostBasedMeshWayPointPathPlanner<? extends CartesianPolygon> planner
}

class DistanceOnlyCostFunction extends MeshDisplacementCostFunction
{
	
}

class SimpleDirectedWeightedGraphBasedMeshWayPointPathPlanner<PolygonType extends CartesianPolygon> extends CostBasedMeshWayPointPathPlanner<PolygonType>, VerboseProvider
{
	SimpleDirectedWeightedGraph simpleDirectedWeightedGraph 
	
	boolean enablePathSimplification = "true"
	double robotWidthForPathSimplication = "0.5"
}

class DirectedGraphBasedMeshWayPointPathPlanner<PolygonType extends CartesianPolygon> extends CostBasedMeshWayPointPathPlanner<PolygonType>
{
	transient unsettable DirectedGraph directedGraph
}

abstract class EdgeFactory <V, E> wraps EdgeFactory
{
		
}

class MobilityEdge
{
	refers DisplacementCostFunction[0..*] costFunctions
	
	refers CartesianPolygon from
	refers CartesianPolygon to
	derived double weight
}

class MobilityEdgeFactory extends EdgeFactory<CartesianPolygon, MobilityEdge>
{
	refers DisplacementCostFunction[0..*] costFunctions
}

class DistanceAndSlopesCostFunction extends MeshDisplacementCostFunction
{
	double upSlopeCostFactor = "1"
	double downSlopeCostFactor = "1"
	
	CartesianAxis gravityAxis = "Z"
	
	double maximumUpSlope = "0.33"
	double maximumDownSlope = "0.33"
}

class ExclusionZonesCostFunction extends DisplacementCostFunction
{
	refers ExclusionZone[0..*] exclusionZones
}

class DistanceAndRoverFootprintCostFunction extends DistanceAndSlopesCostFunction
{
	double roverFootPrintRadius = "0.5"
	double maximumRoughness = "0.1"
	double maximumCrossSlope = "0.488"
}