/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCoreEnvironment",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  multipleEditorPages="false",
          copyrightText="Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    Pierre Allard (Pierre.Allard@canada.ca), 
    Regent L'Archeveque (Regent.Larcheveque@canada.ca),
    Sebastien Gemme (Sebastien.Gemme@canada.ca),
    Canadian Space Agency (CSA) - Initial API and implementation",
		  modelName="ApogyCoreEnvironment",
		  complianceLevel="6.0",
		  suppressGenModelAnnotations="false",
		  dynamicTemplates="true", 
		  templateDirectory="platform:/plugin/ca.gc.asc_csa.apogy.common.emf.templates")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.core.environment/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.core.environment.edit/src-generated")
//@GenModel(testsDirectory="/ca.gc.asc_csa.apogy.core.environment.tests/src-generated")

package ca.gc.asc_csa.apogy.core.environment

import ca.gc.asc_csa.apogy.common.emf.Described
import ca.gc.asc_csa.apogy.common.emf.Exception
import ca.gc.asc_csa.apogy.common.emf.Named
import ca.gc.asc_csa.apogy.common.emf.TimeSource
import ca.gc.asc_csa.apogy.common.emf.Timed
import ca.gc.asc_csa.apogy.common.math.Tuple3d
import ca.gc.asc_csa.apogy.common.topology.AggregateGroupNode
import ca.gc.asc_csa.apogy.common.topology.GroupNode
import ca.gc.asc_csa.apogy.common.topology.Node
import ca.gc.asc_csa.apogy.core.ApogySystem
import ca.gc.asc_csa.apogy.core.ConnectionPoint
import ca.gc.asc_csa.apogy.core.invocator.Environment
import org.eclipse.core.runtime.IProgressMonitor
import ca.gc.asc_csa.apogy.core.invocator.InvocatorSession

// Types

type List<T> wraps java.util.List
type SortedSet<T> wraps java.util.SortedSet
type Date wraps java.util.Date
type Point3d wraps javax.vecmath.Point3d
type Color3f wraps javax.vecmath.Color3f
type IProgressMonitor wraps IProgressMonitor


/* -------------------------------------------------------------------------
 * 
 * Apogy Environment.
 * 
 * ------------------------------------------------------------------------- */ 
class ApogyEnvironment extends Environment, Timed
{
	/*
	 * The list of available worksites.
	 */
	contains WorksitesList[0..1] worksitesList
	
	/*
	 * The worksite currently active.
	 */
	refers AbstractWorksite activeWorksite
			
	/*
	 * The list of available time sources.
	 */
	contains TimeSourcesList[0..1] timeSourcesList opposite environment 
	
	/*
	 * The time source currently providing time used to drive the environment.
	 */
	refers TimeSource activeTimeSource	
	
	/*
	 * A list of environment items.
	 */
	contains AbstractApogyEnvironmentItem[0..*] environmentItems opposite environment
}

/**
 * Abstract class representing an item that can be stored under an ApogyEnvironment.
 */
abstract class AbstractApogyEnvironmentItem extends Named, Described
{	
	container ApogyEnvironment environment opposite environmentItems
}

/**
 * List of Time Sources.
 */
class TimeSourcesList
{	
    @GenModel(property="None")
	container ApogyEnvironment environment opposite timeSourcesList
	contains TimeSource[0..*] timeSources 
}

/* -------------------------------------------------------------------------
 * 
 * Worksites
 * 
 * ------------------------------------------------------------------------- */

/**
 * The abstract base class of all Worksites.
 */
abstract class Worksite extends AbstractWorksite 
{	
	/**
	 * The Topology Node associated with the Worksite.
	 */
    @GenModel(property="None", children="true", notify="true")
	refers derived transient readonly WorksiteNode[0..1] worksiteNode

	/**
	 * The Sky associated with the Worksite.
	 */
	@GenModel(children="true", notify="true", property="None")
	contains Sky[1] sky opposite worksite 	
}

class WorksitesList extends Named, Described
{
	contains AbstractWorksite[0..*] worksites opposite worksitesList		
}

abstract class AbstractWorksite extends Named, Described, Timed
{		
    @GenModel(property="None")
	container WorksitesList worksitesList opposite worksites
}

/* -------------------------------------------------------------------------
 * 
 * Surface Location
 * 
 * ------------------------------------------------------------------------- */
abstract class AbstractSurfaceLocation extends Named, Described
{	
}

/**
 * A list of AbstractSurfaceLocation.
 */
class SurfaceLocationsList extends AbstractApogyEnvironmentItem
{
	contains AbstractSurfaceLocation [0..*] surfaceLocations	
}

/* -------------------------------------------------------------------------
 * 
 * Sky
 * 
 * ------------------------------------------------------------------------- */

/*
 * The base class defining a  Sky associated to a  Worksite. This basic sky includes the sun and
 * stars. The Sky is Timed, which in this context means that the position of both the Sun and the
 * stars should be updated when the time is changed.
 */
class Sky extends Timed
{
	/*
	 * The worksite to which the sky is associated.
	 */	
    @GenModel(property="None")
	refers Worksite worksite opposite sky
	
	
	@GenModel(children="true", notify="true", property="None")
	refers derived transient readonly SkyNode skyNode
	
	/*
	 * Returns the Sun angular diameter, in radians.
	 */
	@GenModel(propertyCategory="SUN", apogy_units="rad")
	op double getSunAngularDiameter()
	
	/*
	 * The Sun in the sky.
	 */
	@GenModel(propertyCategory="SUN")
	refers derived transient readonly Sun sun
	
	/*
	 * The stars in the sky.
	 */
	@GenModel(propertyCategory="STARS")
	refers derived transient readonly StarField starField
}

/* -------------------------------------------------------------------------
 * 
 * Celestial Bodies
 * 
 * ------------------------------------------------------------------------- */

/**
 * A class refering to a single, tightly bound contiguous entity
 */
abstract class CelestialBody extends GroupNode, Named
{
	/**
	 * The mean radius of the body. Sub-classes should overload the getter to return the appropriate value.
	 */
	@GenModel(apogy_units="m")
	readonly double meanRadius
}

/**
 * The Sun. Its mean radius is 6.955E8 meters.
 */
class Sun extends CelestialBody
{
	/*
	 * Returns the sun intensity at the specified radius.
	 * @param radius The distance from the sun center, in meters.
	 */
	op double getIrradiance(@GenModel(apogy_units="m") double radius)
	
	/*
	 * Sun radius, in meters.
	 */
	@GenModel(apogy_units="m")
	double radius = "6.955E8"
}

/**
 * The Earth. Its mean radius is 6371000 meters.
 */
class Earth extends CelestialBody
{
	/*
	 * Earth mean radius, in meters.
	 */
	@GenModel(apogy_units="m")
	double radius = "6371000"
}

/**
 * The Moon. Its mean radius is 1737100 meters.
 */
class Moon extends CelestialBody
{
	/*
	 * Moon radius, in meters.
	 */
	@GenModel(apogy_units="m")
	double radius = "1737100"
}

/*
 * Utilities class providing conversion methods.
 */
class EnvironmentUtilities
{
	/*
	 * Convert from Date (UTC) to Julian.
	 * Uses formula found at http://en.wikipedia.org/wiki/Julian_date#cite_note-12
	 */
	op double convertToJulianDate(Date date)
	
	/*
	 * Method that parses Right Ascension angle expressed in
	 * HH:mm:ss format and return an angle in radians.
	 */
	@GenModel(apogy_units="rad") op float parseRightAscension(String rightAscensionString) throws Exception
	
	/*
	 * Method that parses an angle expressed in deg:mm:ss format
	 * and return an angle in radians.
	 */
	@GenModel(apogy_units="rad") op float parseDegMinSec(String degMinSecAngleString)
	
	/*
	 * Method that sorts a list of stars by magnitude.
	 */
	op SortedSet<Star> sortByMagnitude(List<Star> stars)
}

/*
 * A class providing utilities methods to create fully initialze object.
 */
class ApogyCoreEnvironmentFacade
{	
	/*
	 * Create an Apogy session.
	 * @return Reference to the newly created session.
	 */
	op InvocatorSession createApogySession()
	
	op InvocatorSession createApogySession(boolean createEnvironment, boolean createPrograms, boolean createDataProducts, boolean createTools)
	
	
	/**
	 * Creates and initialize a star.
	 * @param magnitude Star's magnitude.
	 * @param rightAscension Right Ascension position of the star.
	 * @param declination The declination of the star.
	 */
	op Star createStar(float magnitude, double rightAscension, double declination)
		
	/*
	 * Creates and initialize a StarField.
	 */
	op StarField createAndInitializeStars()
	
	/*
	 * Method that sorts a list of stars by magnitude.
	 */
	op SortedSet<Star> sortByMagnitude(List<Star> stars)
	
	/**
	 * Creates and initialize a Sky. This includes creating and initializing the associated SkyNode.
	 * @return An initialized Sky.
	 */
	op Sky createSky()
	
	/**
	 * Creates and initialize a SkyNode.
	 * @return An initialized SkyNode.
	 */
	op SkyNode createSkyNode()
		
	/**
	 * Initialize an existing SkyNode.
	 */
	op void initializeSkyNode(SkyNode skyNode)		
				
	op Tuple3d getSunVector(ApogySystem apogySystem, String nodeID, ca.gc.asc_csa.apogy.core.invocator.Environment environment)
	op Tuple3d getSunVector(Node node, ca.gc.asc_csa.apogy.core.invocator.Environment environment)
	
	
	op Tuple3d getVector(Node node, ApogySystem targetApogySystem, ConnectionPoint connectionPoint,  ca.gc.asc_csa.apogy.core.invocator.Environment environment)
	op Tuple3d getVector(ApogySystem sourceApogySystem, String nodeID, ApogySystem targetApogySystem, ConnectionPoint connectionPoint,  ca.gc.asc_csa.apogy.core.invocator.Environment environment)
	op Tuple3d getVector(ApogySystem sourceApogySystem, String nodeID, ApogySystem targetApogySystem, String connectionPointName,  ca.gc.asc_csa.apogy.core.invocator.Environment environment)
	op Tuple3d getVector(ApogySystem sourceApogySystem, String nodeID, String targetSystemfullyQualifiedName, String connectionPointName,  ca.gc.asc_csa.apogy.core.invocator.Environment environment)			
}

/*
 * A star.
 */
class Star
{
	float magnitude
	refers transient EquatorialCoordinates equatorialCoordinates
}

/*
 * Represents the brightest stars in the sky.
 */
class StarField extends Node
{
	@GenModel(children="true", notify="true", property="None")
	refers transient Star[0..*] stars
	
	String starFieldFileName = "bright_star_catalog_5.txt"
}

/*
 * The equatorial coordinate system is a widely-used method of mapping celestial objects.
 * It functions by projecting the Earth's geographic poles and equator onto the celestial
 * sphere. The projection of the Earth's equator onto the celestial sphere is called the
 * celestial equator. Similarly, the projections of the Earth's north and south geographic
 * poles become the north and south celestial poles, respectively.
 */
class EquatorialCoordinates
{
	double rightAscension
	double declination
	double radius
}

/* -------------------------------------------------------------------------
 * 
 * Specific Topology Nodes.
 * 
 * ------------------------------------------------------------------------- */ 

class WorksiteNode extends AggregateGroupNode
{	
	refers transient Worksite worksite	
}

class SkyNode extends AggregateGroupNode
{	
 	@GenModel(property="None")
	refers transient Sky sky
} 


 