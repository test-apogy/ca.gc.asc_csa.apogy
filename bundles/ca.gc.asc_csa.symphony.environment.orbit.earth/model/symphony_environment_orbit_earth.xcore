@GenModel(prefix="SymphonyEarthOrbitEnvironment", childCreationExtenders="true", extensibleProviderFactory="true", multipleEditorPages="false", copyrightText="Agence spatiale canadienne / Canadian Space Agency 2015 Copyrights (c)", modelName="SymphonyEarthOrbitEnvironment", complianceLevel="8.0", suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/ca.gc.asc_csa.symphony.environment.orbit.earth/src-generated")
@GenModel(editDirectory= "/ca.gc.asc_csa.symphony.environment.orbit.earth.edit/src-generated")
//@GenModel(testsDirectory="/ca.gc.asc_csa.symphony.environment.orbit.earth.tests/src-generated")

package ca.gc.asc_csa.symphony.environment.orbit.earth

import ca.gc.asc_csa.eclipse.emf.ecore.Described
import ca.gc.asc_csa.eclipse.emf.ecore.Named
import ca.gc.asc_csa.eclipse.emf.ecore.Timed

import org.eclipse.symphony.core.Updatable

import ca.gc.asc_csa.symphony.environment.Earth
import ca.gc.asc_csa.symphony.environment.GeographicCoordinates
import ca.gc.asc_csa.symphony.environment.Moon
import ca.gc.asc_csa.symphony.environment.Sky
import ca.gc.asc_csa.symphony.environment.orbit.AbstractFrame
import ca.gc.asc_csa.symphony.environment.orbit.AbstractOrbitPropagator
import ca.gc.asc_csa.symphony.environment.orbit.AttitudeProvider
import ca.gc.asc_csa.symphony.environment.orbit.Orbit
import ca.gc.asc_csa.symphony.environment.orbit.OrbitModel
import ca.gc.asc_csa.symphony.environment.orbit.OrbitWorksite
import ca.gc.asc_csa.symphony.environment.orbit.SpacecraftState
import ca.gc.asc_csa.symphony.environment.orbit.TimedStampedAngularCoordinates
import ca.gc.asc_csa.symphony.environment.orbit.TimedStampedPVACoordinates


import org.eclipse.symphony.common.math.Matrix3x3
import org.eclipse.emf.ecore.EDate


// Basics Types
type List < T > wraps java.util.List
type Map<K,V> wraps java.util.Map
type Exception wraps java.lang.Exception
type SortedSet<T> wraps java.util.SortedSet

// Appache Types
type Rotation wraps org.apache.commons.math3.geometry.euclidean.threed.Rotation

// OreKit Types
type OreKitFrame wraps org.orekit.frames.Frame
type OreKitTimeStampedAngularCoordinates wraps org.orekit.utils.TimeStampedAngularCoordinates
type OreKitTimeStampedPVCoordinates wraps org.orekit.utils.TimeStampedPVCoordinates


type OreKitSpacecraftState wraps org.orekit.propagation.SpacecraftState
type AbsoluteDate wraps org.orekit.time.AbsoluteDate
type OreKitOrbit wraps org.orekit.orbits.Orbit
type OreKitKeplerianOrbit wraps org.orekit.orbits.KeplerianOrbit
type OreKitCartesianOrbit wraps org.orekit.orbits.CartesianOrbit
type OreKitElevationMask wraps org.orekit.utils.ElevationMask

type OreKitAttitudeProvider wraps org.orekit.attitudes.AttitudeProvider
type OreKitPropagator wraps org.orekit.propagation.Propagator
type OreKitDSSTPropagator wraps org.orekit.propagation.semianalytical.dsst.DSSTPropagator
type OreKitEcksteinHechlerPropagator wraps org.orekit.propagation.analytical.EcksteinHechlerPropagator
type OreKitEphemerisProgator wraps org.orekit.propagation.analytical.Ephemeris
type OreKitKeplerianPropagator wraps org.orekit.propagation.analytical.KeplerianPropagator
type OreKitNumericalPropagator wraps org.orekit.propagation.numerical.NumericalPropagator
type OreKitTLEPropagator wraps org.orekit.propagation.analytical.tle.TLEPropagator
type OreKitTLE wraps org.orekit.propagation.analytical.tle.TLE

// Enums

/* Ephemeris types defined for Two-Lines Elements */
enum EphemerisType
{
	DEFAULT as "DEFAULT" = 0,
	SGP as "SGP" = 1,
	SGP4 as "SGP4" = 2,
	SDP4 as "SDP4" = 3,
	SGP8 as "SGP8" = 4,
	SDP8 as "SDP8" = 5
}



// Classes

/**
 * A SpacecraftState that is backed by an OreKit SpacecraftState.
 */
class OreKitBackedSpacecraftState extends SpacecraftState
{
	transient OreKitSpacecraftState oreKitSpacecraftState
}

class OreKitBackedFrame extends AbstractFrame
{
	op OreKitFrame getOreKitFrame()
}

/**
 * A specialization of AttitudeProvider that uses an OreKit org.orekit.attitudes.AttitudeProvider.
 */
abstract class OreKitBackedAttitudeProvider extends AttitudeProvider
{
	op OreKitAttitudeProvider getOreKitAttitudeProvider()
}

/**
 * This class represents the attitude provider where the satellite z axis is pointing to the vertical of the ground point under satellite.
 * It is backed by a org.orekit.attitudes.NadirPointing AttitudeProvider.
 */
class NadirPointingAttitudeProvider extends OreKitBackedAttitudeProvider
{		
}

/**
 * Defines a worksite in orbit. The reference frame used is inertial (J2000), with its origin at the current orbital position.
 */
class EarthOrbitWorksite extends OrbitWorksite
{		
	contains EarthOrbitSky[1] sky opposite earthOrbitWorksite
		
	@GenModel(documentation="The list of surface location associated with the site.", children="true")
	contains EarthSurfaceLocationList earthLocations	
}

/**
 * Defines the Sky as seen from an EarthOrbitWorksite.
 */
class EarthOrbitSky extends Sky
{
	@GenModel(documentation="The worksite to which the sky is associated.")
	refers EarthOrbitWorksite earthOrbitWorksite opposite sky	
	
	@GenModel(documentation="The Moon in the sky.", propertyCategory="MOON")
	refers derived transient readonly Moon moon
	
	@GenModel(documentation="Returns the Moon angular diameter, in radians.", propertyCategory="MOON", csa_units="rad")
	op double getMoonAngularDiameter()
		
	@GenModel(documentation="The Earth in the sky.", propertyCategory="EARTH")
	refers derived transient readonly Earth earth
	
	@GenModel(documentation="Returns the Earth angular diameter, in radians.", propertyCategory="EARTH", csa_units="rad")
	op double getEarthAngularDiameter()		
}

/**
 * Defines an Orbit around the Earth.
 */
abstract class EarthOrbit extends Orbit
{		
	@GenModel(documentation="Returns the underlying OreKit Orbit.")
	op OreKitOrbit getOreKitOrbit()
}

/**
 * An Earth orbit represented by Keplerian Elements.
 * @see http://en.wikipedia.org/wiki/Orbital_elements
 */
class KeplerianEarthOrbit extends EarthOrbit
{
	@GenModel(documentation="Semi-major axis, in meters", csa_units="m")
	double semiMajorAxis
	
	@GenModel(documentation="Eccentricity")
	double eccentricity
	
	@GenModel(documentation="Inclination, in radians.", csa_units="rad")
	double inclination
	
	@GenModel(documentation="Argument of perigee, in radians.", csa_units="rad")
	double perigeeArgument
	
	@GenModel(documentation="Right ascension of ascending node, in radians.", csa_units="rad")
	double rightAscentionOfAscendingNode
	
	@GenModel(documentation="Mean anomaly.")
	double meanAnomaly
	
	@GenModel(documentation="True anomaly.")
	double trueAnomaly
	
	@GenModel(documentation="Returns the underlying OreKit KeplerianOrbit.")
	op OreKitKeplerianOrbit getOreKitKeplerianOrbit()
}

class CartesianEarthOrbit extends EarthOrbit
{
	contains TimedStampedPVACoordinates[1] pvaCoordinates
		
	op OreKitCartesianOrbit getOreKitCartesianOrbit()
}

abstract class ElevationMask
{	
	op double getElevation(double azimuth)
	
	op OreKitElevationMask getOreKitElevationMask()
} 

class ConstantElevationMask extends ElevationMask
{	
	@GenModel(documentation="The elevation, in radians.", property="Editable", csa_units="rad")
	double constantElevation = "0"
}


/**
 * Defines an Orbit propagator for Earth orbits.
 */
abstract class EarthOrbitPropagator extends AbstractOrbitPropagator
{	
	op OreKitPropagator getOreKitPropagator()
		
	/**
	 * Returns the list of passes for a given target.
	 */		
	op List<VisibilityPass> getTargetPasses(EarthSurfaceLocation earthSurfaceLocation, EDate startDate, EDate endDate, ElevationMask elevationMask) throws Exception
	
	/**
	 * Returns the list of passes for a given Ground Station (and its Field Of View) during a specified interval.
	 */	
	op List<VisibilityPass> getGroundStationPasses(GroundStation groundStation, EDate startDate, EDate endDate) throws Exception	
}

/**
 * Simple keplerian orbit propagator for Earth orbits.
 */
class KeplerianEarthOrbitPropagator extends EarthOrbitPropagator
{
	@GenModel(documentation="Gets the underlying OreKit KeplerianPropagator used to do computations.", notify="true", property="Readonly")
	op OreKitKeplerianPropagator getOreKitKeplerianPropagator()		
} 




class TLEEarthOrbitPropagator extends EarthOrbitPropagator
{
	op OreKitTLEPropagator getOreKitTLEPropagator()
	
	/**
	 * The Two-Line Elements used by this propagator.
	 */
	contains TLE[1] tle
}

class URLBasedTLEEarthOrbitPropagator extends TLEEarthOrbitPropagator
{
	@GenModel(documentation ="The URl pointing to the source of the TLE.",property="Editable", propertyCategory="TLE_RAW_DATA", notify="true")
	String tleURL
}

/* Defines a Two-Line Elements definition.
 * @see http://en.wikipedia.org/wiki/Two-line_element_set
 */
class TLE 
{	
	@GenModel(documentation ="The first line of the TLE in text form.",property="Editable", propertyCategory="TLE_RAW_DATA", notify="true")
	String line1
	
	@GenModel(documentation ="The second line of the TLE in text form.",property="Editable", propertyCategory="TLE_RAW_DATA", notify="true")
	String line2
			
	@GenModel(documentation ="The ballistic coefficient.",property="Readonly", notify="true", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double bStar
	
	@GenModel(documentation ="The epoch.",property="Readonly", notify="true")
	EDate epoch
	
	@GenModel(documentation ="The eccentricity.", property="Readonly", notify="true", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double eccentricity
	
	@GenModel(documentation ="The element number.", property="Readonly", notify="true")
	int elementNumber
	
	@GenModel(documentation ="The Ephemeris type.", property="Readonly", notify="true")
	EphemerisType ephemerisType
	
	@GenModel(documentation ="The inclination.", property="Readonly", notify="true", csa_units="rad", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double inclination
	
	@GenModel(documentation ="The mean anomaly.", property="Readonly", notify="true", csa_units="rad", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double meanAnomaly
	
	@GenModel(documentation ="The mean motion.", property="Readonly", notify="true", csa_units="rad/s", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double meanMotion
	
	@GenModel(documentation ="The mean motion, expressed as revolution per day.", property="Readonly", notify="true", csa_units="rev/day", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double revolutionPerDay
	
	@GenModel(documentation ="The mean motion first derivative.", property="Readonly", notify="true", csa_units="rad/s²", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double meanMotionFirstDerivative
	
	@GenModel(documentation ="The mean motion second derivative.", property="Readonly", notify="true", csa_units="rad/s³", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double meanMotionSecondDerivative

	@GenModel(documentation ="The argument of perigee.", property="Readonly", notify="true", csa_units="rad", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double argumentOfPerigee
	
	@GenModel(documentation="Right ascension of ascending node, in radians.",  property="Readonly", csa_units="rad", propertyCategory="TLE_ORBITAL_PARAMETERS")
	double rightAscentionOfAscendingNode
	
	@GenModel(documentation="The revolution number at epoch.",  property="Readonly", propertyCategory="TLE_ORBITAL_PARAMETERS")
	int revolutionNumberAtEpoch
	
	@GenModel(documentation="The satellite id number.",  property="Readonly")
	int satelliteNumber
		
	/**
	 * Return the OreKit implementation backing this TLE.
	 */
	op OreKitTLE getOreKitTLE()	throws Exception
}

/**
 * Defines a location on the surface of the Earth.
 */
class EarthSurfaceLocation extends Named, Described
{
	contains GeographicCoordinates geographicalCoordinates
}

class EarthSurfaceLocationList extends Named, Described
{	
	contains EarthSurfaceLocation[0..*] earthSurfaceLocations 
}

/**
 * Defines a ground station and its associated Field Of View.
 */
class GroundStation extends EarthSurfaceLocation
{
	@GenModel(documentation="The orientation of the field of view relative to the Ground Station frame.", notify="true")
	contains Matrix3x3 fieldOfViewOrientation
	
	@GenModel(documentation="The elevation mask of the Ground Station.", notify="true")
	contains ElevationMask elevationMask 
}

class GroundStationList extends Named, Described
{	
	contains GroundStation[0..*] groundStations 
}

/**
 * Class that defines a visibility pass.
 */
class VisibilityPass
{
	@GenModel(documentation="The Orbit Model that was used to compute the visibility.", notify="true", property="Readonly")
	refers OrbitModel orbitModel
	
	@GenModel(documentation="The surface locations.", notify="true", property="Readonly")
	refers EarthSurfaceLocation surfaceLocation
	
	@GenModel(documentation="The start time of the pass.", notify="true", property="Readonly")
	EDate startTime
	
	@GenModel(documentation="The end time of the pass.", notify="true", property="Readonly")
	EDate endTime
	
	@GenModel(documentation="The end time of the pass.", notify="true", property="Readonly", children= "true")
	contains VisibilityPassSpacecraftPositionHistory positionHistory opposite visibilityPass
	
	@GenModel(documentation="Pass duration, in seconds.", csa_unit = "s")
	transient double duration
}

class VisibilityPassSpacecraftPositionHistory
{
	@GenModel(documentation="The time interval separating positions.",notify="true", property="Editable", csa_unit = "s")
	double timeInterval = "30.0"
		
	@GenModel(documentation="The visibility pass containing the position history.", notify="true", property="None", children= "false")
	container VisibilityPass visibilityPass opposite positionHistory
	
	@GenModel(documentation="The position history.", notify="true", property="Readonly", children= "true")
	contains VisibilityPassSpacecraftPosition[0..*] positions
	
	/**
	 * Returns the VisibilityPassSpacecraftPosition with the highest elevation in the position history.	 
	 * @return The VisibilityPassSpacecraftPosition with the highest elevation, null if the history position is empty.
	 */
	op VisibilityPassSpacecraftPosition getHighestElevationPosition()
	
	/**
	 * Returns the VisibilityPassSpacecraftPosition with the smallest spacecraft cross-track angle in the position history.	 
	 * @return The VisibilityPassSpacecraftPosition with the smallest spacecraft cross-track angle, null if the history position is empty.
	 */
	op VisibilityPassSpacecraftPosition getSmallestSpacecraftCrossTrackAnglePosition()
	
	/**
	 * Force the update of VisibilityPassSpacecraftPositionHistory.
	 */
	op void updateHistory()
}


class VisibilityPassSpacecraftPosition extends Timed
{
	@GenModel(documentation="The azimuth of the spacecraft relative to the North.", notify="true", property="Readonly",csa_units="rad")
	double azimuth = "0"
	
	@GenModel(documentation="The elevation of the spacecraft relative to the local horizontal plane.", notify="true", property="Readonly",csa_units="rad")	
	double elevation = "0"
	
	@GenModel(documentation="The range to the spacecraft.", notify="true", property="Readonly",csa_units="m")
	double range = "0"
	
	@GenModel(documentation="The relative speed of the spacecraft.", notify="true", property="Readonly",csa_units="m/s")
	double rangeRate = "0"	
	
	@GenModel(documentation="The angle of the surface location relative to the spacecraft nadir.", notify="true", property="Readonly",csa_units="rad")
	double spacecraftCrossTrackAngle="0"
}

class SpacecraftsVisibilitySet extends Named, Described, Updatable
{
	@GenModel(documentation="The start time of prediction period.", notify="true", property="Editable", propertyCategory="TIME_PERIOD")
	EDate startTime
	
	@GenModel(documentation="The end time of the prediction period.", notify="true", property="Editable", propertyCategory="TIME_PERIOD")
	EDate endTime
		
	/**
	 * The OrbitModel of the Spacecraft(s) to use for visibility calculation. 
	 */
	@GenModel(children= "true", notify="true", property="Editable")
	refers OrbitModel[0..*] orbitModels
	
	/**
	 * The ground station (s) for which to display Spacecraft visibility status.
	 */
	@GenModel(children= "true", notify="true", property="Editable")
	refers GroundStation[0..*] groundStations
	
	@GenModel(children= "true", notify="true", property="Readonly")
	contains VisibilityPass[0..*] passes
		
	/**
	 * A map that contains the GroundStation to VisibilityPass relationships.
	 */
	@GenModel(children= "false", notify="true", property="None")
	transient Map<GroundStation, List<VisibilityPass>> groundStationToVisibilityMap				
}

class CorridorPoint extends Timed
{
	contains GeographicCoordinates left
	contains GeographicCoordinates center
	contains GeographicCoordinates right	
}

class Corridor extends Named, Described
{
	@GenModel(children= "true", notify="true", property="Readonly")
	contains CorridorPoint[0..*] points	
}

class SpacecraftSwathCorridor extends Named, Described, Updatable
{
	@GenModel(documentation="The start time of prediction period.", notify="true", property="Editable", propertyCategory="TIME_PERIOD")
	EDate startTime
	
	@GenModel(documentation="The end time of the prediction period.", notify="true", property="Editable", propertyCategory="TIME_PERIOD")
	EDate endTime
	
	@GenModel(notify="true", property="Editable",  propertyCategory="TIME_PERIOD", csa_unit = "s")
	double timeInterval = "1.0"
		
	@GenModel(documentation="The OrbitModel to use to predict the corridor.", propertyCategory="ORBIT_MODEL")
	refers OrbitModel orbitModel
	
	@GenModel(notify="true", property="Editable", propertyCategory="SWATH", csa_units="rad")
	double leftSwathAngle = "0"
	
	@GenModel(notify="true", property="Editable", propertyCategory="SWATH", csa_units="rad")
	double rightSwathAngle = "0"
	
	/**
	 * The corridor.
	 */
	contains Corridor corridor		
}

class EarthOrbitFacade
{
	/**
	 * Returns the Earth gravitational constant from GRIM5C1 model: 3.986004415e14 m³/s².
	 */
	@GenModel(csa_unit = "m³/s²")
	op double getMu()
	
	/**
	 * Creates an AbsoluteDate from a Date.
	 * @param date A date.
	 * @return The AbsoluteDate (OreKit type) for the specified date.
	 */
	op AbsoluteDate createAbsoluteDate(EDate date)	
	
	@GenModel(documentation="Creates an Date from a AbsoluteDate.")
	op EDate createDate(AbsoluteDate absoluteDate)	
	
	/**
	 * Creates an EarthSurfaceLocation from parameters.
	 * @param name The name of the location. 
	 * @param description The description of the location.
	 * @param longitude The longitude of the location, in radians.
	 * @param latitude The latitude of the location, in radians.
	 * @param elevation The elevation of the location, in meters.
	 * @return The EarthSurfaceLocation.
	 */
	op EarthSurfaceLocation createEarthSurfaceLocation(String name, String description, @GenModel(csa_unit = "rad") double longitude, @GenModel(csa_unit = "rad") double latitude, @GenModel(csa_unit = "m") double elevation)
	
	
	/**
	 * Create an OreKitBackedFrame based on an OreKit frame.
	 */
	op OreKitBackedFrame createOreKitBackedFrame(OreKitFrame oreKitFrame)
	
	@GenModel(documentation="Returns the geographic sub-point for a given spacecraft state.")
	op GeographicCoordinates getSpacecraftEarthSubPoint(OreKitBackedSpacecraftState oreKitBackedSpacecraftState) throws Exception
	
	@GenModel(documentation="Returns the elevation angle of a spacecraft relative to a Earth surface location.", csa_unit = "rad")
	op double getSpacecraftElevationAngle(SpacecraftState spacecraftState, EarthSurfaceLocation earthSurfaceLocation) throws Exception 

	@GenModel(documentation="Returns the azimuth angle (relative to North) of a spacecraft at a Earth surface location.", csa_unit = "rad")
	op double getSpacecraftAzimuthAngle(SpacecraftState spacecraftState, EarthSurfaceLocation earthSurfaceLocation) throws Exception 
	
	@GenModel(documentation="Returns the distance between spacecraft and a specified target.", csa_unit = "m")
	op double getRange(SpacecraftState spacecraftState, EarthSurfaceLocation earthSurfaceLocation)	throws Exception 
	
	op SpacecraftState createSpacecraftState(Orbit orbit, OreKitSpacecraftState oreKitSpacecraftState)
	
	op OreKitBackedSpacecraftState createOreKitBackedSpacecraftState(Orbit orbit, OreKitSpacecraftState oreKitSpacecraftState)
	
	op TimedStampedPVACoordinates createTimedStampedPVACoordinates(OreKitTimeStampedPVCoordinates oreKitTimeStampedPVCoordinates)
	
	op TimedStampedAngularCoordinates createTimedStampedAngularCoordinates(OreKitTimeStampedAngularCoordinates oreKitTimeStampedAngularCoordinates)	
	
	op Matrix3x3 createMatrix3x3(Rotation rotation)
	
	op Rotation createRotation(Matrix3x3 matrix3x3)	
	
	/**
	 * Creates a Keplerian Orbit based on a EarthOrbitPropagator.
	 * @param earthOrbitPropagator The EarthOrbitPropagator.
	 * @return A KeplerianEarthOrbit representing the initial orbit of the propagator.
	 */
	op KeplerianEarthOrbit createKeplerianOrbit(EarthOrbitPropagator earthOrbitPropagator) throws Exception 
	
	/**
	 * Creates a CartesianEarthOrbit Orbit based on a EarthOrbitPropagator.
	 * @param earthOrbitPropagator The EarthOrbitPropagator.
	 * @return A CartesianEarthOrbit representing the initial orbit of the propagator.
	 */
	op CartesianEarthOrbit createCartesianEarthOrbit(EarthOrbitPropagator earthOrbitPropagator) throws Exception 
				
	/**
	 * Creates a KeplerianEarthOrbit from an OreKit KeplerianOrbit.
	 * @param oreKitKeplerianOrbit The OreKit Keplerian Orbit.
	 * @return the associated KeplerianEarthOrbit.
	 */				
	op KeplerianEarthOrbit createKeplerianOrbit(OreKitKeplerianOrbit oreKitKeplerianOrbit) throws Exception 
	
	/**
	 * Creates a CartesianEarthOrbit from an OreKit CartesianOrbit.
	 * @param oreKitKeplerianOrbit The OreKit Cartesian Orbit.
	 * @return the associated CartesianEarthOrbit.
	 */		
	op CartesianEarthOrbit createCartesianEarthOrbit(OreKitCartesianOrbit oreKitCartesianOrbit) throws Exception 
	
	/**
	 * Converts an OreKit SpacecraftState to GeographicCoordinates. The conversion uses the IERS_2010 frame with a WGS84 equatorial radius and earth flatenning.
	 * @param oreKitBackedSpacecraftState The OreKit SpacecraftState.
	 * @return the associated GeographicCoordinates.
	 */
	op GeographicCoordinates convertToGeographicCoordinates(OreKitBackedSpacecraftState oreKitBackedSpacecraftState) throws Exception
	
	/**
	 * Sorts a list of VisibilityPass by increasing date order (form earlier to later). If two or more VisibilityPass 
	 * have the same start date, they are ordered by duration.
	 * @param passes The list of VisibilityPass.
	 * @return the SortedSet of VisibilityPass.
	 */
	op SortedSet<VisibilityPass> getVisibilityPassSortedByStartDate(List<VisibilityPass> passes)
	
	/**
	 * Sorts a list of VisibilityPass by increasing duration. If two or more VisibilityPass 
	 * have the same duration, they are ordered by start date.
	 * @param passes The list of VisibilityPass.
	 * @return the SortedSet of VisibilityPass.
	 */
	op SortedSet<VisibilityPass> getVisibilityPassSortedByDuration(List<VisibilityPass> passes)
	
	/**
	 * Sorts a list of VisibilityPassSpacecraftPosition by increasing elevation.
	 * @param passes The list of VisibilityPassSpacecraftPosition.
	 * @return the SortedSet of VisibilityPassSpacecraftPosition.
	 */
	op SortedSet<VisibilityPassSpacecraftPosition> getVisibilityPassSpacecraftPositionSortedByElevation(List<VisibilityPassSpacecraftPosition> positions)
	
	/**
	 * Sorts a list of VisibilityPassSpacecraftPosition by increasing spacecraft cross-track angle.
	 * @param passes The list of VisibilityPassSpacecraftPosition.
	 * @return the SortedSet of VisibilityPassSpacecraftPosition.
	 */
	op SortedSet<VisibilityPassSpacecraftPosition> getVisibilityPassSpacecraftPositionSortedBySpacecraftCrossTrackAngle(List<VisibilityPassSpacecraftPosition> positions)
	
	/**
	 * Loads a TLE from a URL.
	 * @param url The URL as a String.
	 * @return The loaded TLE
	 */
	op TLE loadTLE(String url) throws Exception
	
	/**
	 * Create a TLEEarthOrbitPropagator using a TLE.
	 * @param tle The Two-Line Element defining the propagator.
	 * @return The TLEEarthOrbitPropagator.
	 */
	op TLEEarthOrbitPropagator createTLEEarthOrbitPropagator(TLE tle) throws Exception
}
