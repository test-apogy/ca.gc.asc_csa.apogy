@GenModel(prefix="Symphony__CommonTopologyDynamics",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Symphony__CommonTopologyDynamics",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.common.topology.addons.dynamics/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.common.topology.addons.dynamics.edit/src-generated")

package org.eclipse.symphony.common.topology.addons.dynamics

import org.eclipse.symphony.common.topology.Node
import org.eclipse.symphony.common.topology.AggregateGroupNode
import org.eclipse.symphony.common.math.Tuple3d
import org.eclipse.symphony.common.math.Matrix3x3
import org.eclipse.symphony.common.math.Matrix4x4

type Set<T> wraps java.util.Set

/*
 * Base class for Dynamics System that is used as a container for many Dynamic System attributes.
 */
class DynamicSystemProperties extends AggregateGroupNode
{
	/*
	 * The list of AbstractConstraint used with a Dynamic System.
	 */
	contains AbstractConstraint [0..*] constraints
	
	/*
	 * The list of AbstractMaterial used in the world.
	 */
	contains AbstractMaterial [0..*] materials
}

/*
 * Defines a generic Dynamics Engine.
 */
abstract class AbstractDynamicsEngine
{
	/*
	 * Method that starts the simulation. 
	 */
	op void startSimulation()
	
	/*
	 * Method that stops the simulation.
	 */
	op void stopSimulation()
}

/*
 * Defines a physical body.
 */
class PhysicalBody extends AggregateGroupNode
{
	/*
	 * The physical properties of the body.
	 */
	contains PhysicalProperties [1] physicalProperties
	
	/*
	 * The list of constraints associated with this body.
	 */
	refers ConstraintAttachmentPoint [0..*] constraintAttachmentPoints opposite physicalBody
	
	/*
	 * The list of simulation properties associated with this body.
	 * 
	 * Note that this list can contain items for different implementation of Dynamic Engine.
	 */
	contains AbstractPhysicalBodySimulationProperties [0..*] simulationProperties
	
	/*
	 * The kinematic state of the center of mass of the Physical body.
	 */
	contains KinematicState centerOfMassKinematicState
	
	/*
	 * The list of PointOfInterest currently defined for the PhysicalBody.
	 */
	contains PointOfInterest [0..*] pointsOfInterest
	
	/*
	 * The list of collision geometries used to defined the collision volume of the PhysicalBody.
	 */
	contains CollisionGeometry [0..*] collisionGeometry
}

/*
 * Base class defining the physical properties of a body.
 */
class PhysicalProperties
{
	/*
	 * Defines the mass of the physical body, in kilograms.
	 */
	@GenModel(csa_units="kg")
	double mass
	
	/*
	 * The matrix of inertia of the body defined for the specified location of the center of mass.
	 */
	contains Matrix3x3 [1] inertiaMatrix 
	
	/*
	 * The location of the center of mass of the body expressed in the body frame of reference.
	 */
	contains Tuple3d [1] centerOfMassLocation
}

/*
 * Base class defining simulation specific properties of a body.
 */
abstract class AbstractPhysicalBodySimulationProperties
{
	
}

/*
 * Abstract base class used to represent constraint properties that are
 * specific to a particular simulation engine.
 */
abstract class AbstractConstraintSimulationProperties
{
	
}

/*
 * Base class defining simulation specific properties of an AbstractCollisionGeometry.
 */
abstract class AbstractCollisionGeometrySimulationProperties
{
	
}

/*
 * Class defining a location in space relative to a Physical Body.
 */
class PointOfInterest
{
	contains Tuple3d offset
	
	contains KinematicState kinematicState
}

/*
 * Base class defining a kinematic state. Such state defines position, velocity and acceleration.
 */
class KinematicState
{
	contains Tuple3d position
	
	contains Tuple3d orientation
	
	contains Tuple3d linearVelocity
	
	contains Tuple3d angularVelocity
	
	contains Tuple3d linearAcceleration
	
	contains Tuple3d angularAcceleration
}

/*
 * Defines the constraint's state which are position, velocity and force.
 * 
 * Each values are represented on the constraint axis (e.g. if the constraint is prismatic,
 * position will be the distance from the origin of the constraint, for angular constraints,
 * the position will be the angle from the origin of the constraint.
 */
class ConstraintState
{
	double position
	
	double velocity
	
	double force
}

/*
 * Base class defining a constraint between two physical bodies.
 */
abstract class AbstractConstraint
{
	contains ConstraintAttachmentPoint [0..*] attachmentPoints opposite constraint
	
	/*
	 * The list of simulation properties associated with this constraint.
	 * 
	 * Note that this list can contain items for different implementation of Dynamic Engine.
	 */
	 refers AbstractConstraintSimulationProperties [0..*] simulationProperties
	 
	 /*
	  * A textual description of this contraint.
	  */
	 String description
	 
	 /*
	  * An identifier for the constraint.
	  */
	 String constaintId
	 
	 boolean enabled = "false"
}

/*
 * The cylindrical constraint is a 2 DOF constraint (one prismatic and one angular).
 */
class CylindricalConstraint extends AbstractConstraint
{
	contains ConstraintState [1] angularCurrentState
	
	contains ConstraintState [1] linearCurrentState
}

/*
 * This constraint is a velocity-based constraint that constrains the velocity of a body
 * relative to its primary attachment axis to the velocity of another body relative to its
 * primary attachment axis.
 */
class GearRatioConstraint extends AbstractConstraint
{
	double force
}

/*
 * This constraint is used to rotate a pair of bodies about a single axis (no translation).
 */
class HingeConstraint extends AbstractConstraint
{
	contains ConstraintState [1] angularCurrentState
}

/*
 * This constraint is used to move a body to move along an axis (no rotation).
 */
class PrismaticConstraint extends AbstractConstraint
{
	contains ConstraintState [1] linearCurrentState
}

/* 
 * Relative Position Relative Orientation (RPRO) is a constraint used to fix two parts with a
 * given distance and orientation. Both linear and angular strengths describes the forces needed
 * to respect this constraint.
 */
class RPROConstraint extends AbstractConstraint
{
	refers Tuple3d linearStrength
	
	refers Tuple3d angularStrength
}

/*
 * This constraint is two-axis rotation constraint.
 */
class UniversalConstraint extends AbstractConstraint
{
	contains ConstraintState [1] angular0CurrentState
	
	contains ConstraintState [1] angular1CurrentState
}

/*
 * Base class defining a location on a PhysicalBody where a Constraint is applied.
 */
class ConstraintAttachmentPoint
{
	/*
	 * The PhysicalBody to which the AttachmentPoint is attached.
	 */
	refers PhysicalBody physicalBody opposite constraintAttachmentPoints
	
	/*
	 * The Constraint attached to this attachment point.
	 */
	container AbstractConstraint constraint opposite attachmentPoints
	
	/*
	 * The transform expressing the position of the ConstraintAttachmentPoint
	 * expressed in the PhysicalBody reference frame.
	 */
	contains Matrix4x4 transform
	
	/*
	 * A textual description of this ContraintAttachmentPoint.
	 */
	String description
	
	/*
	 * An identifier for this ConstraintAttachmentPoint.
	 */
	String pointId
}

/*
 * Base class defining the bounding volume used in collision detection and handling.
 */
class CollisionGeometry
{
	/*
	 * Simulation specific collision geometry properties.
	 */
	refers AbstractCollisionGeometrySimulationProperties [0..*] simulationProperties
	
	/*
	 * The collision geometry.
	 */
	contains Geometry geometry
	
	/*
	 * The transform matrix locating the geometry relative to the AbstractCollisionGeometry owner.
	 */
	contains Matrix4x4 transform
	
	/*
	 * A reference to the material associated with this collision geometry.
	 */
	refers AbstractMaterial material
	
	/*
	 * A textual description of this collision geometry.
	 */
	String description
	
	/*
	 * An identifier for the collision geometry.
	 */
	String geometryId
}

/*
 * Class defining the material properties of a body.
 */
abstract class AbstractMaterial
{
	String materialId
}

/*
 * Base class defining a geometry element used in defining collision volume.
 */
abstract class Geometry
{
	
}

/*
 * This geometry is a box defined by its dimension parameter (x, y and z size).
 */
class BoxGeometry extends Geometry
{
	contains Tuple3d dimension
}

/*
 * The capsule is like a cylinder with rounded extremities. The shape is defined
 * by the radius of the capsule (width) and its length (from one rounded extremity to the other).
 */
class CapsuleGeometry extends Geometry
{
	double radius
	
	double length
}

/*
 * The cylinder is defined by its radius (width) and its length (from one side to the other).
 */
class CylinderGeometry extends Geometry
{
	double radius
	
	double length
}

/*
 * The sphere geometry is defined by its radius.
 */
class SphereGeometry extends Geometry
{
	double radius
}

/*
 * Helper class containing a variety of dynamic topology utilities methods.
 */
class DynamicsFacade
{
	/*
	 * Given a node in a topology, traverse the tree and computes the location of the center of mass of the tree.
	 * @param root The root of the topology for which the position of the center of mass is to be computed.
	 */
	op Tuple3d findCenterOfMass(Node root)
	
	/*
	 * Given a node in a topology, traverse the tree and compute the mass of the tree.
	 * @param root The root of the topology for which the total mass is to be computed.
	 */
	op double findTotalMass(Node root)
	
	/*
	 * Given a node in a topology, traverse the tree and extracts the Set of PhysicalBody defined in the topology.
	 */
	op Set<PhysicalBody> getPhysicalBodies(Node root)
	
	op <T extends AbstractPhysicalBodySimulationProperties> T getPhysicalNodeSimulationProperty(PhysicalBody physicalBody, Class<T> propertyType)
	
	op <T extends AbstractConstraintSimulationProperties> T getConstraintSimulationProperty(AbstractConstraint constraint, Class<T> propertyType)
}