@GenModel(prefix="EMFEcore", childCreationExtenders="true", extensibleProviderFactory="true",modelName="EMFEcore")
@GenModel(modelDirectory="/org.eclipse.symphony.common.emf/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.common.emf.edit/src-generated")

package org.eclipse.symphony.common.emf

import org.eclipse.emf.ecore.EOperation
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EDate
import org.eclipse.emf.ecore.ETypedElement
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.EObject
import org.eclipse.core.resources.IFile
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.common.util.URI

/* ------------------------------------------------------------------------------------------
 * 
 * DataTypes.
 * 
 * ------------------------------------------------------------------------------------------ */ 
type Exception wraps java.lang.Exception
type List < T > wraps java.util.List
type SortedSet < T > wraps java.util.SortedSet 
type EClassFilter wraps EClassFilter
type Number wraps java.lang.Number
type IFile wraps IFile 
type Resource wraps Resource
type Unit wraps javax.measure.unit.Unit
type Collection<T> wraps java.util.Collection
type EList<EObject> wraps EList
type URI wraps URI

/* ------------------------------------------------------------------------------------------
 * 
 * Facade & Utilities.
 * 
 * ------------------------------------------------------------------------------------------ */ 

class EMFEcoreFacade
{	
	op List<EClass> getAllAvailableEClasses()
	
	/** 
	 * Returns all the sub classes of the specified super class.  The result list contains
	 * only implementation classes (not abstract). 
	 * @param superClass Super type of the classes to be found.
	 * @return List of sub classes.
	 */
	op List<EClass> getAllSubEClasses(EClass superClass)	
	op List<EClass> filterEClasses(List<EClass> eClasses, EClassFilter filter)	
	op List<EClass> filterEClasses(List<EClass> eClasses, List<EClassFilter> filters)
	
	/**
	 * Returns the {@link EClass} that fits the specified fully qualified name.
	 * @param str Fully qualified name.
	 * @return Reference to the class or null there is no match. 
	 */
	op EClass getEClass(String str)
	
	op SortedSet<EClass> sortAlphabetically(List<EClass> eClasses)
	op List<EOperation> getAllAvailableEOperations(EClass eClass)
	op SortedSet<EOperation> sortEOperationsAlphabetically(List<EOperation> eOperations)
	
	
	/**
	 * Documentation tags utility methods.
	 */
	op String getDocumentation(ETypedElement eTypedElement)
	op String getEngineeringUnitsAsString(ETypedElement eTypedElement)
	
	/*
	 * Returns the Unit defined for a specified eTypedElement.
	 * @param eTypedElement The specified ETypedElement.
	 * @return the Unit, or null if none found.
	 */
	op Unit getEngineeringUnits(ETypedElement eTypedElement)
	
	op Double getValueUpdateRate(ETypedElement eTypedElement)
	op String getWarningOCLExpression(ETypedElement eTypedElement)
	op String getAlarmOCLExpression(ETypedElement eTypedElement)
	op String getOutOfRangeOCLExpression(ETypedElement eTypedElement)
	op Number getWarningMinValue(ETypedElement eTypedElement)
	op Number getWarningMaxValue(ETypedElement eTypedElement)
	op Number getAlarmMinValue(ETypedElement eTypedElement)
	op Number getAlarmMaxValue(ETypedElement eTypedElement)
	op Number getOutOfRangeMinValue(ETypedElement eTypedElement)
	op Number getOutOfRangeMaxValue(ETypedElement eTypedElement)	
	op Ranges getRange(ETypedElement eTypedElement, Object value)		
	op String getFullDescription(ETypedElement eTypedElement)
	
	
	/**
	 * Feature Tree Methods.
	 */
	 
	@GenModel(documentation="Method that return a string representing the ancestors of the specified AbstractFeatureNode.")
	op String getAncestriesString(AbstractFeatureNode abstractFeatureNode)
	 
	@GenModel(documentation="Method that return the root of the tree for a specified AbstractFeatureNode.")
	op AbstractRootNode getFeatureRoot(AbstractFeatureNode abstractFeatureNode)
	 
	@GenModel(documentation="Method that return the list of ancestor of a specified AbstractFeatureNode, from FeatureRoot to and including the specified AbstractFeatureNode.")
	op List<AbstractFeatureNode> getAncestries(AbstractFeatureNode abstractFeatureNode)
	 
	@GenModel(documentation="Method that return the list of descendants of a specified AbstractFeatureNode, excluding the specified AbstractFeatureNode.")
	op List<AbstractFeatureNode> getDescendants(AbstractFeatureNode abstractFeatureNode)
	 
	@GenModel(documentation="Method that return the list of available child EStructuralFeature type for a given Node.")
	op List<EStructuralFeature> getChildEStructuralFeatures(AbstractFeatureNode abstractFeatureNode)
	 
	@GenModel(documentation="Method that resolve the value of a FeatureNode for a specified source EObjet.")
 	op Object resolve(EObject sourceObject, AbstractFeatureNode abstractFeatureNode) 
 	
 	op void setValue(EObject sourceObject, AbstractFeatureNode abstractFeatureNode, Object value)
 	
 	@GenModel(documentation="Method that tells whether or not the a FeatureNode is currently accessible for specified source EObject.")
 	op boolean isResolved(EObject sourceObject, AbstractFeatureNode abstractFeatureNode)	
 	
 	op AbstractFeatureListNode getLeaf(ListRootNode listRootNode) 
 	
 	/** 
 	 * Resource Support.
 	 */
 	 op IFile getFile(Resource resource)
 	 
 	 /** 
 	  * Returns the content contained in the resource.
 	  * @param uri Resource uri.
 	  * @return Reference to the content.
 	  */
 	 op EList<EObject> getContent(URI uri)
 	 
 	 /**
 	  * Timed Support
 	  */
 	  
 	 @GenModel(documentation="Returns sorted set of Timed elements.")
 	 op SortedSet<Timed> sortTimed(Collection<Timed> timedCollection)
 	 
 	 @GenModel(documentation="Returns the time span of a collection of Timed elements.", csa_units="s")
 	 op double getTimeSpan(Collection<Timed> timedCollection) 	 
 	 
 	 /**
 	  * Return an EObject unique ID.
 	  * @param eObject The EObject.
 	  * @return the unique ID, null if none is found.
 	  */
 	 op String getID(EObject eObject) 	 
}

/**
 * Named Element.
 */
interface Named{
	String name
}

/**
 * Described Element.
 */
interface Described{
	String description
}


 /* -------------------------------------------------------------------------
 * Timed.
 * ------------------------------------------------------------------------- */ 

/**
 * Timed Element.
 */
interface Timed
{
	EDate time
}

/* -------------------------------------------------------------------------
 * 
 * Time Sources.
 * 
 * ------------------------------------------------------------------------- */ 

class TimeSourcesList
{
	contains TimeSource[0..*] timeSources
}

/**
 * Defines a Timed element that provides time.
 */
abstract class TimeSource extends Timed, Disposable
{
}

/**
 * Time source that provides a fixed time.
 */
class FixedTimeSource extends TimeSource
{	
}

/**
 * Time source that provides the current time.
 */
class CurrentTimeSource extends TimeSource
{
	@GenModel(documentation="The update period of the time.", csa_units="ms", notify="true", property="Editable")
	int updatePeriod = "1000"
	
	@GenModel(documentation="Whether or not the time source has been paused.", notify="true", property="Readonly")
	boolean paused = "false"
	
	@GenModel(documentation="Pause time.")	
	op void pause()
	
	@GenModel(documentation="Resume time update.")	
	op void resume()
}

/**
 * Time source that provides an accelerated time.
 */
class BrowseableTimeSource extends TimeSource
{
	@GenModel(documentation="The start time. Default to current time upon creation.", notify="true", property="Editable")
	Date startTime
	
	@GenModel(documentation="The update period of the time.", csa_units="ms", notify="true", property="Editable")
	int updatePeriod = "1000"	
	
	@GenModel(documentation="The time acceleration.", notify="true", property="Editable")
	float timeAcceration = "10.0"
	
	@GenModel(documentation="The time direction.", notify="true", property="Editable")
	TimeDirection timeDirection
			
	@GenModel(documentation="Plays time forward.")		
	op void playForward()
	
	@GenModel(documentation="Plays time in reverse.")	
	op void playReverse()	
			
	@GenModel(documentation="Pause time.")	
	op void pause()
			
	@GenModel(documentation="Reset the time to the start time")
	op void reset()
}

/**
 * Time source that provides time based on a selection.
 */
class SelectionBasedTimeSource extends TimeSource
{
	op void setSelection(Timed timedElement)
}

/**
 * Time source that is based on a list of Timed elements.
 */
class CollectionTimedTimeSource extends BrowseableTimeSource
{
	@GenModel(documentation="Enables time looping when end of list of time is reached.")
	boolean loopEnable = "false"
		
	@GenModel(documentation="The collection of Timed elements.", property="None")
	refers transient Timed[0..*] timedsList
		
	@GenModel(documentation="The current Timed element.", property="Readonly")
	refers transient Timed currentTimedElement
	
	@GenModel(documentation="The earliest date found in the collection of Timed.", property="Readonly")
	Date earliestDate
	
	@GenModel(documentation="The latest date found in the collection of Timed.", property="Readonly")
	Date latestDate
	
	/**
	 * Jumps to the next Timed element.
	 */
	op void jumpToNext()
	
	/**
	 *  Jumps to the previous Timed element.
	 */
	op void jumpToPrevious()
}

enum TimeDirection
{
	FORWARD as "Forward" = 0,
	REVERSE as "Reverse" = 1	
}
 

 /* -------------------------------------------------------------------------
 * Disposable.
 * ------------------------------------------------------------------------- */ 


/**
 * Disposable.
 */
interface Disposable{
	op void dispose()
}

/**
 * Ranges Definition
 */
 enum Ranges
 {
 	UNKNOWN as "UNKNOWN" = 0,
	NOMINAL as "NOMINAL" = 1,
	WARNING as "WARNING" = 2,
	ALARM as "ALARM" = 3,
	OUT_OF_RANGE as "OUT_OF_RANGE" = 4	
 }
 
 /* -------------------------------------------------------------------------
 * Feature Tree
 * ------------------------------------------------------------------------- */ 

 class FeatureNodeAdapter
 {
 	@GenModel(documentation="The object onto which to apply the FeatureNode.")
 	refers EObject sourceObject
 	
 	@GenModel(documentation="The FeatureNode defining which feature to monitor.")
 	refers AbstractFeatureNode featureNode
 	Object currentValue 
 	
 	@Ecore(defaultValueLiteral="false")
 	@GenModel(documentation="Tells whether or not the featureNode is currently resolved.")
 	boolean resolved
 }
 
 //////////////////////////////////
 
 @GenModel(documentation="Base class of all Feature Nodes.")
 abstract class AbstractFeatureNode
 {
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is part of a List.")
 abstract class AbstractFeatureListNode extends AbstractFeatureNode
 {
 	@GenModel(property="Readonly")
  	@GenModel(documentation="The parent node of this ListNode.")
 	container AbstractFeatureListNode[0..1] parent opposite child
 	
 	@GenModel(property="None")
 	@GenModel(documentation="The child node of this ListNode.")
 	contains AbstractFeatureListNode[0..1] child opposite parent
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is part of a Tree.")
 abstract class AbstractFeatureTreeNode extends AbstractFeatureNode
 {
 	@GenModel(property="Readonly")
  	@GenModel(documentation="The parent node of this TreeNode.")
 	container AbstractFeatureTreeNode[0..1] parent opposite children
 	
 	@GenModel(property="None")
 	@GenModel(documentation="The children node(s) of this TreeNode.")
 	contains AbstractFeatureTreeNode[0..*] children opposite parent
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is a root.")
 abstract class AbstractRootNode
 {
 	@GenModel(documentation="The source class.", notify="true")
 	refers EClass[1] sourceClass
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is the root of a Tree.")
 class TreeRootNode extends AbstractFeatureTreeNode, AbstractRootNode
 { 		
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is a node in a Tree.")
 class TreeFeatureNode extends AbstractFeatureTreeNode, AbstractFeatureSpecifier
 { 	
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is the root of a List.")
 class ListRootNode extends AbstractFeatureListNode, AbstractRootNode
 { 	
 }
 
 @GenModel(documentation="Defines an AbstractFeatureNode that is a node in a List.")
 class ListFeatureNode extends AbstractFeatureListNode, AbstractFeatureSpecifier
 { 	 	
 	
 }

@GenModel(documentation="Class that describes a StructuralFeature of interest.")
 abstract class AbstractFeatureSpecifier
 {
 	@GenModel(notify="true")
 	@GenModel(documentation="The EStructuralFeature that is referred by this FeatureSpecifier.")
 	refers EStructuralFeature[1] structuralFeature
 		  	
 	@GenModel(notify="true", documentation="Whether or not this FeatureSpecifier refers to a multi-valued feature.")
 	@Ecore(defaultValueLiteral="false")
 	derived transient volatile readonly boolean multiValued
 		  	
 	@GenModel(notify="true", documentation="Index of the value if the EStructuralFeature referred to by this FeatureSpecifier if multi-valued.")
 	@Ecore(defaultValueLiteral="0")
 	int index 	
 }