@GenModel(prefix="TopologyBindings", childCreationExtenders="true", extensibleProviderFactory="true", multipleEditorPages="false", copyrightText="Agence spatiale canadienne / Canadian Space Agency 2013 Copyrights (c)", modelName="TopologyBindings", complianceLevel="6.0")
@GenModel(modelDirectory="/org.eclipse.symphony.common.topology.bindings/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.common.topology.bindings.edit/src-generated")

package org.eclipse.symphony.common.topology.bindings

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EEnumLiteral

import org.eclipse.symphony.common.topology.Node
import org.eclipse.symphony.common.topology.GroupNode
import org.eclipse.symphony.common.topology.RotationNode
import org.eclipse.symphony.common.topology.PositionNode

import org.eclipse.symphony.common.emf.AbstractFeatureNode
import org.eclipse.symphony.common.emf.TreeRootNode
import org.eclipse.symphony.common.emf.FeatureNodeAdapter
import org.eclipse.symphony.common.topology.TransformNode

type Map<K,V> wraps java.util.Map

/**
 * Cartesian Axis enumeration.
 */
enum AXIS
{	
	X_AXIS as "X_AXIS" = 0,
	Y_AXIS as "Y_AXIS" = 1,
	Z_AXIS as "Z_AXIS" = 2
	MINUS_X_AXIS as "MINUS_X_AXIS" = 3,
	MINUS_Y_AXIS as "MINUS_Y_AXIS" = 4,
	MINUS_Z_AXIS as "MINUS_Z_AXIS" = 5	
}

/**
 * Angle Units Enumeration.
 */
enum ANGLE_UNITS
{	
	RADIANS as "RADIANS" = 0,
	DEGREES as "DEGREES" = 1	
}

/**
 * Abstract base class representing a binding relationship between a topology and a feature. 
 */
abstract class AbstractTopologyBinding
{
	@GenModel(documentation="Whether or not the binding is binded.", property="Readonly", propertyCategory="INFORMATION")
	boolean binded
	
	@GenModel(documentation="The description of the binding.", propertyCategory="INFORMATION")
	String description
	
 	@GenModel(documentation="The name of the binding.",propertyCategory="INFORMATION")
	String name
	
	@GenModel(documentation="The source object onto which the feature must be resolved.", property="None", propertyCategory="SOURCE")	
	refers transient EObject source
	
	@GenModel(documentation="The feature the binding is associated with.", propertyCategory="SOURCE")	
	refers AbstractFeatureNode featureNode	

	@GenModel(documentation ="The adapter used to listens for changes of the feature value.",property="None")
	refers transient readonly FeatureNodeAdapter featureNodeAdapter

	/**
	 * Binds the binding to its feature. If successful, binded will change to true.
	 */
	op void bind()
	
	/**
	 * Un-binds the binding from its feature. If successful, binded will change to false.
	 */
	op void unbind()
	
	/**
	 * Clones the current Binding. This method must copy this Binding parameters and set the Binding copy associated Node(s) 
	 * to the Node(s) copy(ies) associated with this Binding.
	 * @param originalToCopyNodeMap Maps original Nodes to copied ones.
	 * @return A copy of this Binding.
	 */
	op AbstractTopologyBinding clone(Map<Node, Node> originalToCopyNodeMap)
}

/**
 * Binding that binds a RotationNode rotation around one axis to the feature value.
 */
class RotationBinding extends AbstractTopologyBinding
{
	@GenModel(documentation="The RotationNode that will be updated.", propertyCategory="DESTINATION")
	refers RotationNode rotationNode
	
	@GenModel(documentation="The axis around which to revolve.",propertyCategory="DESTINATION")
	AXIS rotationAxis = "X_AXIS"
	
	@GenModel(documentation="The angle unit associated with the feature.",propertyCategory="DESTINATION")
	ANGLE_UNITS rotationUnits = "DEGREES"
}

/**
 * Binding that binds a PositionNode translation along one axis to the feature value.
 */
class TranslationBinding extends AbstractTopologyBinding
{	
	@GenModel(documentation="The PositionNode that will be updated.",propertyCategory="DESTINATION")
	refers PositionNode positionNode
	
	@GenModel(documentation="The axis along which the translation occurs.", propertyCategory="DESTINATION")
	AXIS translationAxis = "X_AXIS"	
}

/**
 * Binding that binds a TransformNode transform to a feature value. The feature value must be of type Matrix4x4.
 */
class TransformMatrixBinding extends AbstractTopologyBinding
{
	@GenModel(documentation="The TransformNode that will be updated.", propertyCategory="DESTINATION")
	refers TransformNode transformNode
}

/**
 * Binding that attached different sub-topology to a GroupNode based on the feature value. The feature must be an EENum.
 */
class EnumerationSwitchBinding extends AbstractTopologyBinding
{	
	@GenModel(documentation ="The parent node under which the switch should attached sub-topology.",propertyCategory="DESTINATION")
	refers GroupNode[1] parentNode
	
	@GenModel(documentation ="The list of cases defined for the switch.", propertyCategory="ENUMERATION")	
	contains EnumerationCase[1..*] cases 	
		
	@GenModel(documentation ="The case currently active.", property="Readonly", propertyCategory="ENUMERATION")	
	refers transient EnumerationCase[0..1] activeCase
}

/**
 * Class that defines Enumeration Case used by the EnumerationSwitchBinding. Its associates a sub-topology to an enumeration literal value(s).
 */
class EnumerationCase
{
	/* The enumeration value(s) for this case. */
	refers EEnumLiteral[1..*] enumerationLiterals
		
	@GenModel(documentation=" The root of the topology to add to the parent Node when this case is activated.", children="true")
	contains Node[0..1] topologyRoot		
}

/**
 * Defines a list of Bindings.
 */
class BindingsList
{
	contains AbstractTopologyBinding[0..*] bindings
}

/**
 * Defines Feature Roots Lists used to define all the feature used by the Bindings in a BindingSet.
 */
class FeatureRootsList
{
	contains TreeRootNode[0..*] featureRoots
}

/**
 * Defines a set of bindings. The Biinding set can be binded and un-binded as a group.
 */
class BindingsSet
{	
	/**
	 * The list of features used in the Bindings definitions.
	 */
	contains FeatureRootsList[1] featureRootsList
	
	/**
	 * The list of Bindings.
	 */
	contains BindingsList[1] bindingsList
		
	/**
	 * Binds all the Bindings contained in the bindingsList.
	 */
	op void bind()
	
	/**
	 * Un-binds all the Bindings contained in the bindingsList.
	 */
	op void unbind()	
}

/**
 * Utility Binding facade.
 */
class TopologyBindingsFacade
{	
	/**
	 * Convenience method that copies a Binding.
	 * @param originalBinding The original binding to copy.
	 * @param originalToCopyNodeMap Maps original Nodes to copied ones.
	 * @return The copy of the original Binding.
	 */
	op AbstractTopologyBinding copy(AbstractTopologyBinding originalBinding, Map<Node, Node> originalToCopyNodeMap)
}