/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCommonEMF",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  modelName="ApogyCommonEMF")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.common.emf/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.common.emf.edit/src-generated")

package ca.gc.asc_csa.apogy.common.emf

import org.eclipse.emf.ecore.EOperation
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EDate
import org.eclipse.emf.ecore.ETypedElement
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecore.EObject
import org.eclipse.core.resources.IFile
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.common.util.URI

class EObjectReference{	
    @GenModel(children="true")    
	refers EObject eObject
}

/*
 * Named Element.
 */
interface Named
{
	String name
}

/*
 * Described Element.
 */
interface Described
{
	String description
}


 /* -------------------------------------------------------------------------
 * Timed.
 * ------------------------------------------------------------------------- */ 

/*
 * Timed Element.
 */
interface Timed
{	
	EDate time
}

class Server extends Startable
{
	readonly transient Job serverJob
}

class Startable
{
	transient boolean started = "false"
}

/* -------------------------------------------------------------------------
 * 
 * Time Sources.
 * 
 * ------------------------------------------------------------------------- */ 

/*
 * Defines a Timed element that provides time.
 */
abstract class TimeSource extends Named, Described, Timed, Disposable
{
	/**
	 * Offset in milliseconds 
	 */
	@GenModel(apogy_units="ms", notify="true", property="Editable")
	int offset = "0"
}

/*
 * Time source that provides a fixed time.
 */
class FixedTimeSource extends TimeSource
{	
}

/*
 * Time source that provides the current time.
 */
class CurrentTimeSource extends TimeSource
{
	/*
	 * The update period of the time, in milliseconds
	 */
	@GenModel(apogy_units="ms", notify="true", property="Editable")
	int updatePeriod = "1000"
	
	
	/*
	 * Whether or not the time source has been paused.
	 */
	@GenModel(notify="true", property="Readonly")
	boolean paused = "false"
	
	/*
	 * Pause the time.
	 */
	op void pause()
	
	/*
	 * Resume time update.
	 */	
	op void resume()
}

/**
 * Time source that provides an accelerated time.
 */
class BrowseableTimeSource extends TimeSource
{
	/*
	 * The start time. Default to current
	 * time upon creation.
	 */
	@GenModel(notify="true", property="Editable")
	Date startTime
	
	/*
	 * The update period of the time.
	 */
	@GenModel(apogy_units="ms", notify="true", property="Editable")
	int updatePeriod = "1000"	
	
	/*
	 * The time acceleration.
	 */
	@GenModel(notify="true", property="Editable")
	float timeAcceration = "10.0"
	
	/*
	 * The time direction.
	 */
	@GenModel(notify="true", property="Editable")
	TimeDirection timeDirection
	
	/*
	 * Play time forward.
	 */		
	op void playForward()
	
	/*
	 * Play time in reverse.
	 */	
	op void playReverse()	
	
	/*
	 * Pause time.
	 */	
	op void pause()
	
	/*
	 * Reset the time to the start time
	 */
	op void reset()
}

/*
 * Time source that provides time based on a selection.
 */
class SelectionBasedTimeSource extends TimeSource
{
	op void setSelection(Timed timedElement)
}

/*
 * Time source that is based on a list of Timed elements.
 */
class CollectionTimedTimeSource extends BrowseableTimeSource
{
	/*
	 * Whether or not to enable time looping when end of list of time is reached.
	 */
	boolean loopEnable = "false"
	
	/*
	 * The collection of Timed elements.
	 */
	@GenModel(property="None")
	refers transient Timed[0..*] timedsList
	
	/*
	 * The current Timed element.
	 */
	@GenModel(property="Readonly")
	refers transient Timed currentTimedElement
	
	/*
	 * The earliest date found in the collection of Timed.
	 */
	@GenModel(property="Readonly")
	Date earliestDate
	
	/*
	 * The latest date found in the collection of Timed.
	 */
	@GenModel(property="Readonly")
	Date latestDate
	
	/**
	 * Jumps to the next Timed element.
	 */
	op void jumpToNext()
	
	/**
	 *  Jumps to the previous Timed element.
	 */
	op void jumpToPrevious()
}

enum TimeDirection
{
	FORWARD as "Forward" = 0,
	REVERSE as "Reverse" = 1	
}
 

/* -------------------------------------------------------------------------
 * Disposable.
 * ------------------------------------------------------------------------- */ 


/**
 * Disposable.
 */
interface Disposable
{
	op void dispose()
}

/**
 * Ranges Definition
 */
enum Ranges
{
	UNKNOWN as "UNKNOWN" = 0,
	NOMINAL as "NOMINAL" = 1,
	WARNING as "WARNING" = 2,
	ALARM as "ALARM" = 3,
	OUT_OF_RANGE as "OUT_OF_RANGE" = 4	
}
 
/* -------------------------------------------------------------------------
 * Feature Tree
 * ------------------------------------------------------------------------- */ 

class FeatureNodeAdapter
{
	/*
	 * The object onto which to apply the FeatureNode.
	 */
	refers EObject sourceObject
 	
 	/*
 	 * The FeatureNode defining which feature to monitor.
 	 */
 	refers AbstractFeatureNode featureNode
 	
 	Object currentValue 
 	
 	/*
 	 * Tells whether or not the featureNode is currently resolved.
 	 */
 	boolean resolved = "false"
}
 
//////////////////////////////////
 
/*
 * Base class of all Feature Nodes.
 */
abstract class AbstractFeatureNode
{
 	
}
 
/*
 * Defines an AbstractFeatureNode that is part of a List.
 */
abstract class AbstractFeatureListNode extends AbstractFeatureNode
{
 	/*
 	 * The parent node of this ListNode.
 	 */
	@GenModel(property="Readonly")
 	container AbstractFeatureListNode[0..1] parent opposite child
 	
 	/*
 	 * The child node of this ListNode.
 	 */
 	@GenModel(property="None")
 	contains AbstractFeatureListNode[0..1] child opposite parent
}
 
/*
 * Defines an AbstractFeatureNode that is part of a Tree.
 */
abstract class AbstractFeatureTreeNode extends AbstractFeatureNode
{
	/*
	 * The parent node of this TreeNode.
	 */
	@GenModel(property="Readonly")
 	container AbstractFeatureTreeNode[0..1] parent opposite children
 	
 	/*
 	 * The children node(s) of this TreeNode.
 	 */
 	@GenModel(property="None")
	contains AbstractFeatureTreeNode[0..*] children opposite parent
}

/*
 * Defines an AbstractFeatureNode that is a root.
 */
abstract class AbstractRootNode
{
	/*
	 * The source class.
	 */
	@GenModel(notify="true")
 	refers EClass[1] sourceClass
}

/*
 * Defines an AbstractFeatureNode that is the root of a Tree.
 */
class TreeRootNode extends AbstractFeatureTreeNode, AbstractRootNode
{
	 		
}

/*
 * Defines an AbstractFeatureNode that is a node in a Tree.
 */
class TreeFeatureNode extends AbstractFeatureTreeNode, AbstractFeatureSpecifier
{
	 	
}

/*
 * Defines an AbstractFeatureNode that is the root of a List.
 */ 
class ListRootNode extends AbstractFeatureListNode, AbstractRootNode
{
	 	
}

/*
 * Defines an AbstractFeatureNode that is a node in a List.
 */
class ListFeatureNode extends AbstractFeatureListNode, AbstractFeatureSpecifier
{ 	 	
	
}

/*
 * Class that describes a StructuralFeature of interest.
 */
abstract class AbstractFeatureSpecifier
{
	/*
	 * The EStructuralFeature that is referred by this FeatureSpecifier.
	 */
	@GenModel(notify="true")
 	refers EStructuralFeature[1] structuralFeature
 	
 	/*
 	 * Whether or not this FeatureSpecifier refers to a multi-valued feature.
 	 */
 	@GenModel(notify="true")
 	derived transient volatile readonly boolean multiValued = "false"
 	
 	/*
 	 * Index of the value if the EStructuralFeature referred
 	 * to by this FeatureSpecifier if multi-valued.
 	 */
 	@GenModel(notify="true")
 	int index = "0"
 }