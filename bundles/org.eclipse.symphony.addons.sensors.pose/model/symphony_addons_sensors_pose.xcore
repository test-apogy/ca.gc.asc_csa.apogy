@GenModel(prefix="Symphony__AddonsSensorsPose",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Symphony__AddonsSensorsPose",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.addons.sensors.pose/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.addons.sensors.pose.edit/src-generated")

package org.eclipse.symphony.addons.sensors.pose

import org.eclipse.symphony.addons.sensors.Sensor
import org.eclipse.symphony.common.topology.PositionNode
import org.eclipse.symphony.common.topology.RotationNode
import org.eclipse.symphony.common.topology.TransformNode
import org.eclipse.symphony.common.geometry.data3d.CartesianPositionCoordinates
import org.eclipse.symphony.common.geometry.data3d.CartesianOrientationCoordinates
import org.eclipse.symphony.common.geometry.data3d.Pose
import org.eclipse.symphony.common.math.Matrix3x3
import org.eclipse.symphony.common.math.Tuple3d

type Exception wraps java.lang.Exception
type IOException wraps java.io.IOException

class SelfPlaceSensor extends Sensor
{
	
}

class PositionSensor extends PositionNode, SelfPlaceSensor
{
	refers readonly derived transient CartesianPositionCoordinates positionCoordinates
	
	op void resetPosition(CartesianPositionCoordinates newPosition) throws Exception
}

class SimulatedPositionSensor extends PositionSensor
{
	double xVelocity
	
	double yVelocity
	
	double zVelocity
	
	double updatePeriod = "1.0"
}

class OrientationSensor extends RotationNode, SelfPlaceSensor
{
	refers readonly derived transient CartesianOrientationCoordinates orientationCoordinates
	
	op void resetOrientation(CartesianOrientationCoordinates newOrientation) throws Exception
	
	op CartesianOrientationCoordinates extractOrientationFromMatrix(Matrix3x3 matrix)
}

class InertialMeasurementUnit extends OrientationSensor
{
	contains Tuple3d angularVelocity
	
	contains Tuple3d linearAcceleration
}

class SimulatedOrientationSensor extends OrientationSensor
{
	double xAngularVelocity
	
	double yAngularVelocity
	
	double zAngularVelocity
	
	double updatePeriod = "1.0"
}

class PoseSensor extends TransformNode, PositionSensor, OrientationSensor
{
	refers readonly derived transient Pose pose
	
	contains PoseDataLogger dataLogger
	
	op void resetPose(Pose newPose) throws Exception
}

class SimulatedPoseSensor extends PoseSensor
{
	double xVelocity
	
	double yVelocity
	
	double zVelocity
	
	double xAngularVelocity
	
	double yAngularVelocity
	
	double zAngularVelocity
	
	double updatePeriod = "1.0"
}

abstract class PoseDataLogger
{
	String outputFile
	
	op void logPose(Pose pose) throws IOException
}

class CSVDataLogger extends PoseDataLogger
{
	
}

class Symphony__AddonsSensorsPoseFacade
{
	op CSVDataLogger createCSVDataLogger(String fileName)
}