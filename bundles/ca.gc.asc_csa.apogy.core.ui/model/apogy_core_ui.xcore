/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCoreUI",
		  copyrightText="Copyright (c) 2015-2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    Pierre Allard (Pierre.Allard@canada.ca), 
    Regent L'Archeveque (Regent.Larcheveque@canada.ca),
    Sebastien Gemme (Sebastien.Gemme@canada.ca),
    Canadian Space Agency (CSA) - Initial API and implementation",
		  modelName="ApogyCoreUI") 
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.core.ui/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.core.ui.edit/src-generated")

package ca.gc.asc_csa.apogy.core.ui

import ca.gc.asc_csa.apogy.common.emf.Exception
import ca.gc.asc_csa.apogy.common.topology.ui.TransformNodePresentation
import ca.gc.asc_csa.apogy.core.ApogySystem
import ca.gc.asc_csa.apogy.core.invocator.InvocatorSession
import org.eclipse.core.resources.IContainer
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.IFolder
import org.eclipse.core.resources.IProject
import ca.gc.asc_csa.apogy.common.topology.ui.TransformNodePresentation
import org.eclipse.jface.resource.ImageDescriptor

type IProject wraps IProject
type IContainer wraps IContainer
type IFile wraps IFile
type IFolder wraps IFolder
type ImageDescriptor wraps ImageDescriptor

class ApogyCoreUIFacade
{	
	/*
	 * Default Apogy Project Name Prefix.
	 */
	readonly String defaultApogyProjectNamePrefix = "Project"

	/*
	 * Default Apogy Session Filename Prefix.
	 */
	readonly String defaultApogySessionFilename = "session"
	
	/*
	 * Default Apogy Session Filename Extension Prefix.
	 */
	readonly String defaultApogySessionFilenameExtension = "sym"
	
	/*
	 * Default Apogy Sessions Directory.
	 */
	readonly String defaultApogySessionFolderName = "Sessions"
		
	op IProject createApogyProject(NewApogyProjectSettings settings)	
	op IFolder createApogySessionFolder(NewApogyProjectSettings settings)
	op InvocatorSession createApogySession(NewApogySessionSettings sessionSettings)
	op IFile createApogySessionFile(IContainer resourceContainer, String filename, InvocatorSession session) throws Exception
	op IFile getApogySessionFile(IContainer resourceContainer, String filename)
	op ApogySystem createApogySystem(NewApogySystemSettings systemSettings)
}

/*
 * This class is used to support Apogy wizards.
 */
class ApogyResourceSettings
{
	IProject resourceProject
	IFile resourceFile
	IContainer resourceContainer
}

class NewApogyProjectSettings
{	
	/*
	 * Returns an available project name.
	 */
	op String getDefaultProjectName()
	
	/*
	 * Name of the project.
	 */
	String name
	
	/*
	 * Import an existing registered project.
	 */
	boolean importRegisteredProject = "false"
	
	/*
	 * Sets the default values of the instance.
	 */
	op void setDefaultValues()
}


class NewApogySessionSettings
{	
	/*
	 * Returns an available session filename.
	 */
	op String getDefaultFilename(IContainer resourceContainer)	
	
	String folder	
	String filename
	boolean createEnvironment = "true"
	boolean createPrograms = "true"
	boolean createDataProducts = "true"
	boolean createTools = "true"
	
	/*
	 * Sets the default values of the instance.
	 */
	op void setDefaultValues(IContainer resourceContainer)
}

class NewApogySystemSettings
{
	String folder	
	String filename
}


class ResultNodePresentation extends TransformNodePresentation
{
	@GenModel(propertyCategory="Flag Visuals")
	float poleHeight = "1.0f"
	
	@GenModel(propertyCategory="Flag Visuals")
	boolean flagVisible = "true"	
}
