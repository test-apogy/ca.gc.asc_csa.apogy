@GenModel(prefix="Symphony__CommonTopology",
		  childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Symphony__CommonTopology",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.common.topology/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.common.topology.edit/src-generated")

package org.eclipse.symphony.common.topology

import org.eclipse.symphony.common.math.Tuple3d
import org.eclipse.symphony.common.math.Matrix3x3

type Matrix4d wraps javax.vecmath.Matrix4d
type EClass wraps org.eclipse.emf.ecore.EClass
type INodeVisitor wraps org.eclipse.symphony.common.topology.INodeVisitor

interface TopologyProvider
{
	refers readonly GroupNode topologyRoot
}

abstract class Node
{
	refers Node parent
	
	String description
	
	String nodeId
	
	op void accept(INodeVisitor visitor)
}

class Link extends Node
{
	refers Node node
}

class Leaf extends Node
{
	
}

class URLNode extends Leaf
{
	String url
	
	int polygonCount
	
	int vertexCount
}
class CADNode extends URLNode
{
	String nodeName
}

class ContentNode<T> extends Leaf
{
	contains T content
}

class ReferencedContentNode<T> extends ContentNode<T>
{
	refers T referencedContent
}

class AggregateContentNode<T> extends ContentNode<T>
{
	contains T aggregateContent
}

class GroupNode extends Node
{
	@GenModel(children="false", createChild="false")
	contains Node [0..*] children
}

class ReferencedGroupNode extends GroupNode
{
	refers Node [0..*] referencedChildren
}

class AggregateGroupNode extends GroupNode
{
	contains Node [0..*] aggregatedChildren
}

class PositionNode extends AggregateGroupNode
{	
 	@GenModel(children="false", createChild="false")
	contains Tuple3d position
}

class RotationNode extends AggregateGroupNode
{
	@GenModel(children="false", createChild="false")
	contains Matrix3x3 rotationMatrix
}
	 

class TransformNode extends PositionNode, RotationNode
{
	op Matrix4d asMatrix4d()
	
	op void setTransformation(Matrix4d matrix)
}

class PickAndPlaceNode extends TransformNode
{
	
}

class Symphony__CommonTopologyFacade
{
	op Link createLink(Node node)
	
	op <T> ContentNode<T> createContentNode(T content)
	
	op <T> ReferencedContentNode<T> createReferencedContentNode(T content)
	
	op <T> AggregateContentNode<T> createAggregateContentNode(T content)
	
	op PositionNode createPositionNode(double x, double y, double z)
	
	/*
	 * Creates a rotation node with the rotation order
	 * x*y*z
	 * 
	 * @param x
	 *            the rotation around the x axis, in radians.
	 * @param y
	 *            the rotation around the y axis, in radians.
	 * @param z
	 *            the rotation around the z axis, in radians.
	 */
	op RotationNode createRotationNodeXYZ(double x, double y, double z)
	
	/*
	 * Creates a rotation node with the rotation order
	 * y*z*x
	 * 
	 * @param x
	 *            the rotation around the x axis, in radians.
	 * @param y
	 *            the rotation around the y axis, in radians.
	 * @param z
	 *            the rotation around the z axis, in radians.
	 */
	op RotationNode createRotationNodeYZX(double x, double y, double z)
	
	/*
	 * Creates a rotation node with the rotation order
	 * z*y*x
	 * 
	 * @param x
	 *            the rotation around the x axis, in radians.
	 * @param y
	 *            the rotation around the y axis, in radians.
	 * @param z
	 *            the rotation around the z axis, in radians.
	 */
	op RotationNode createRotationNodeZYX(double x, double y, double z)
	
	/*
	 * Creates a transformation node with the rotation
	 * order x*y*z
	 * 
	 * @param tx
	 *            the x translation.
	 * @param ty
	 *            the y translation.
	 * @param tz
	 *            the z translation.
	 * @param rx
	 *            the rotation around the x axis, in radians.
	 * @param ry
	 *            the rotation around the y axis, in radians.
	 * @param rz
	 *            the rotation around the z axis, in radians.
	 */
	op TransformNode createTransformNodeXYZ(double tx, double ty, double tz, double rx, double ry, double rz)
	
	/*
	 * Creates a transformation node with the rotation
	 * order y*z*x
	 * 
	 * @param tx
	 *            the x translation.
	 * @param ty
	 *            the y translation.
	 * @param tz
	 *            the z translation.
	 * @param rx
	 *            the rotation around the x axis, in radians.
	 * @param ry
	 *            the rotation around the y axis, in radians.
	 * @param rz
	 *            the rotation around the z axis, in radians.
	 */
	op TransformNode createTransformNodeYZX(double tx, double ty, double tz, double rx, double ry, double rz)
	
	/*
	 * Creates a transformation node with the rotation
	 * order z*y*x
	 * 
	 * @param tx
	 *            the x translation.
	 * @param ty
	 *            the y translation.
	 * @param tz
	 *            the z translation.
	 * @param rx
	 *            the rotation around the x axis, in radians.
	 * @param ry
	 *            the rotation around the y axis, in radians.
	 * @param rz
	 *            the rotation around the z axis, in radians.
	 */
	op TransformNode createTransformNodeZYX(double tx, double ty, double tz, double rx, double ry, double rz)
	
	op TransformNode createTransformNode(Matrix4d matrix)
	
	op PickAndPlaceNode createPickAndPlaceNode(Matrix4d matrix)
	
	op Matrix4d expressNodeInRootFrame(Node node)
	
	op Matrix4d expressRootInNodeFrame(Node node)
	 
	/*
	 * Compute the transformation to express sourceFrame
	 * into targetFrame.
	 * <p>
	 * For example
	 * <ul>
	 * <li>sourceFrame could be laser scanner</li>
	 * <li>targetFrame could be the sonar sensor</li>
	 * </ul>
	 * This method can be used to express the point cloud coming out of the
	 * laser scanner in the frame of the sonar sensor.
	 * </p>
	 */
	op Matrix4d expressInFrame(Node sourceFrame, Node targetFrame)
	
	op Node[] findNodesByDescription(String description, Node topology)
	
	op Node[] findNodesByID(String nodeId, Node topology)
	
	op Node[] findNodesByType(EClass clazz, Node topology)
	
	op Node findRoot(Node node)
	
	op double getEuclideanDistance(Node fromNode, Node toNode)
	
	op double getGeodesicDistance(Node fromNode, Node toNode)
	
	op void printTopology(Node node)
}