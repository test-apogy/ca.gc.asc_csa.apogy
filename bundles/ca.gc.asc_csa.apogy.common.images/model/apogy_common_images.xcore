/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCommonImages",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="ApogyCommonImages",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.common.images/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.common.images.edit/src-generated")
		  
package ca.gc.asc_csa.apogy.common.images

type List<T> wraps java.util.List

type ImageData wraps org.eclipse.swt.graphics.ImageData

type BufferedImage wraps java.awt.image.BufferedImage

type Exception wraps Exception

type Color wraps java.awt.Color

type Font wraps java.awt.Font

class EImage extends AbstractEImage
{
	BufferedImage imageContent
}

class ImagesAlbum
{
	String name
	contains AbstractEImage[] images
}

interface AbstractEImage
{
	@GenModel(propertyCategory="IMAGE_INFORMATION")
	int width = "-1"

	@GenModel(propertyCategory="IMAGE_INFORMATION")
	int height = "-1"

	op BufferedImage asBufferedImage()
}

class URLEImage extends AbstractEImage
{
	String url
}

class EImagesUtilities
{
	op AbstractEImage copy(AbstractEImage[1] originalImage)

	op AbstractEImage convertToGrayScale(AbstractEImage originalImage)

	op AbstractEImage resize(AbstractEImage originalImage , double scaleFactor)

	op AbstractEImage resize(AbstractEImage[1] originalImage , double[1] widthScaleFactor , double[1] heightScaleFactor)

	op AbstractEImage resize(AbstractEImage[1] originalImage , int[1] newWidth , int[1] newHeight)

	op AbstractEImage createTransparentImage(int[1] width , int[1] height)

	op void saveImageAsJPEG(String[1] destinationFilePath , AbstractEImage image) throws Exception

	op void saveImageAsPNG(String[1] destinationFilePath , AbstractEImage image) throws Exception

	op AbstractEImage applyOverlay(AbstractEImage originalImage , AbstractEImage overlayImage , boolean allowOverlayResize)

	op AbstractEImage flipHorizontal(AbstractEImage originalImage)

	op AbstractEImage flipVertical(AbstractEImage originalImage)

	op AbstractEImage rotate(AbstractEImage originalImage , double angle , boolean enableImageResize)

	op AbstractEImage translate(AbstractEImage originalImage , int widthTranslation , int heightTranslation)

	op ImageSize getAllEncompassingImageSize(List < ? extends AbstractEImage > images)

	op AbstractEImage superPoseImages(List < ? extends AbstractEImage > images , boolean allowImageResize , ImageAlignment alignment)

	op AbstractEImage superPoseImages(AbstractEImage imageA , AbstractEImage imageB , boolean allowImageResize , ImageAlignment alignment)

	op AbstractEImage addBorder(AbstractEImage originalImage , int borderWidth , int red , int green , int blue)

	/*
	 * Gets a sub image from a specified image. Note that the
	 * widthOffset and heightOffset are relative to the upper
	 * left corner of the image.
 	 */
	op AbstractEImage getSubImage(AbstractEImage originalImage , int widthOffset , int heightOffset , int subImageWidth , int subImageHeight) throws Exception

	op BufferedImage convertToBufferedImage(ImageData imageData)

	op ImageData convertToImageData(BufferedImage bufferedImage)

	op AbstractEImage createUniformColorImage(int[1] width , int[1] height , int red , int green , int blue , int alpha)

	op AbstractEImage applyAlpha(AbstractEImage originalImage , float alpha)

	op AbstractEImage applyEdgeFilter(AbstractEImage originalImage)

	op AbstractEImage applyContrastAndBrightnessFilter(AbstractEImage originalImage , double contrast , double brightness)

	op AbstractEImage applyExposureFilter(AbstractEImage originalImage , double exposure)

	op AbstractEImage applyInvertFilter(AbstractEImage originalImage)

	op AbstractEImage applyRescaleFilter(AbstractEImage originalImage , double scale)

	op AbstractEImage applyGainFilter(AbstractEImage originalImage , double gain , double bias)

	op AbstractEImage createTextImage(String text , Font font , Color textColor , Color backgroundColor , int borderWidth)
}

class ImageSize
{
	int width = "-1"
	int height = "-1"
}

interface AbstractEImageProvider
{
	op AbstractEImage getAbstractEImage()
}

enum ImageAlignment
{
	CENTER = 1
	LOWER_LEFT_CORNER = 2
	UPPER_LEFT_CORNER = 3
	LOWER_RIGHT_CORNER = 4
	UPPER_RIGHT_CORNER = 5
}