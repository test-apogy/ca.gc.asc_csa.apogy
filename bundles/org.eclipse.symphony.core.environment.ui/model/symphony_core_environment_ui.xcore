@GenModel(prefix="Symphony__CoreEnvironmentUI",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  multipleEditorPages="false",
		  copyrightText="Agence spatiale canadienne / Canadian Space Agency 2015 Copyrights (c)",
		  modelName="Symphony__CoreEnvironmentUI",
		  complianceLevel="6.0",
		  suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.core.environment.ui/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.core.environment.ui.edit/src-generated")

package org.eclipse.symphony.core.environment.ui

import org.eclipse.symphony.common.emf.Described
import org.eclipse.symphony.common.emf.Named
import org.eclipse.symphony.core.invocator.AbstractToolsListContainer
import org.eclipse.symphony.core.invocator.InvocatorSession
import org.eclipse.symphony.core.invocator.Variable
import org.eclipse.symphony.common.images.AbstractEImage
import org.eclipse.symphony.core.FeatureOfInterestList
import org.eclipse.symphony.core.PoseProvider
import org.eclipse.symphony.core.SymphonySystemApiAdapter
import org.eclipse.symphony.core.environment.FeaturesOfInterestMapLayer
import org.eclipse.symphony.core.environment.ImageMapLayerPresentation
import org.eclipse.symphony.core.environment.RectangularRegion
import org.eclipse.symphony.core.environment.RectangularRegionProvider
import org.eclipse.symphony.core.environment.Star
import org.eclipse.symphony.common.math.Matrix4x4
import org.eclipse.symphony.common.topology.ui.NodePresentation
import org.eclipse.emf.ecore.EObject
 
// Types
type List<T> wraps java.util.List

type Point2d wraps javax.vecmath.Point2d
type Color3f wraps javax.vecmath.Color3f
type Point3f wraps javax.vecmath.Point3f

type XYSeries wraps  org.jfree.data.xy.XYSeries
type XYPlot wraps org.jfree.chart.plot.XYPlot
type XYDataItem wraps org.jfree.data.xy.XYDataItem
type AbstractXYAnnotation wraps org.jfree.chart.annotations.AbstractXYAnnotation
type ChartComposite wraps org.jfree.experimental.chart.swt.ChartComposite
type JFreeChart wraps org.jfree.chart.JFreeChart

// Classes

class StarFieldPresentation extends NodePresentation
{	
	float cutOffMagnitude = "6.0"
}

class SunPresentation extends NodePresentation
{
	
}


class EarthSurfaceWorksitePresentation extends NodePresentation
{
	@GenModel(propertyCategory="AXIS")
	boolean axisVisible = "true"
	
	@GenModel(propertyCategory="AXIS", csa_units="m")
	double axisLength = "10.0"
	
	@GenModel(propertyCategory="SKY")
	boolean azimuthVisible = "true"
	
	@GenModel(propertyCategory="SKY")
	boolean elevationLinesVisible = "true"
		
	@GenModel(propertyCategory="SKY")
	boolean azimuthLinesVisible = "true"
		
	@GenModel(propertyCategory="PLANE")
	boolean planeVisible = "true"
	
	@GenModel(propertyCategory="PLANE", csa_units="m")
	double planeGridSize = "1.0"
	
	@GenModel(propertyCategory="PLANE", csa_units="m")
	double planeSize = "10.0"	
}

class EarthSkyPresentation extends NodePresentation
{
	
}

class MoonPresentation extends NodePresentation
{
	
}

class FeatureOfInterestNodePresentation extends NodePresentation
{
	double poleHeight
	boolean flagVisible = "false"
}

// Utilities

class EnvironmentUIUtilities
{
	op Point3f toPoint3f(Star star)		
	
	op float getPointSizeForMagnitude(float magnitude, float magnitudeRangeMinimum, float magnitudeRangeMaximum, float minimumPointSize, float maximumPointSize)
	
	/*
	 * Return the sun color for a given altitude above the horizon.
	 * @param sunAltitude The altitude above the horizon, in radians.
	 */
	op Color3f getSunLightColor(@GenModel(csa_units="rad") double sunAltitude)
	
	/*
	 * Return the transparency value (between no transparency 0 and full transparency 1.0)
	 * to be used for the blus sky as a function of the sun altitude angle.
	 * @param sunAltitude The altitude above the horizon, in radians.
	 */
	op double getSkyTransparency(@GenModel(csa_units="rad") double sunAltitude)
	
	/*
	 * Return the sky color for a given altitude above the horizon.
	 * @param sunAltitude The altitude above the horizon, in radians.
	 */
	op Color3f getSkyColor(@GenModel(csa_units="rad") double sunAltitude)
}

class Symphony__CoreEnvironmentUIFacade
{
	//op void getImageMapLayerPresentationExtent(ImageMapLayerPresentation imageMapLayerPresentation, Tuple3d lowerLeftCorner, Tuple3d upperRightCorner)
	
	//op void getImageMapLayerPresentationExtent(List<ImageMapLayerPresentation> imageMapLayerPresentations, Tuple3d lowerLeftCorner, Tuple3d upperRightCorner)
	
	/*
	 * Returns an image representing the assembly of the specified list of ImageMapLayerPresentation. 
	 * @param imageMapLayerPresentations The specified list of ImageMapLayerPresentation.
	 * @return The image representing the specified list of ImageMapLayerPresentation.
	 */
	//op AbstractEImage getImageMapLayerPresentationImage(List<ImageMapLayerPresentation> imageMapLayerPresentations)
	
	/*
	 * Returns the ImageMapLayerPresentation with the highest resolution (minimum meters/pixel).
	 * @return The ImageMapLayerPresentation with the highest resolution (minimum meters/pixel)
	 */
	//op ImageMapLayerPresentation getBestResolutionMapLayer(List<ImageMapLayerPresentation> imageMapLayerPresentations)
	
	/*
	 * Returns the list of visible ImageMapLayerPresentation from"" a specified imageMapLayerPresentations.
	 * @param imageMapLayerPresentations The specified list of ImageMapLayerPresentation.
	 * @return The list of visible ImageMapLayerPresentation.
	 */
	//op List<ImageMapLayerPresentation> getVisibleImageMapLayerPresentation(List<ImageMapLayerPresentation> imageMapLayerPresentations)				
				
				
	op List<RectangularRegionProvider> getVisibleRectangularRegionProvider(MapViewConfiguration mapViewConfiguration)
				
	/*
	 * Returns an image representing the specified MapViewExtent using a specified MapViewConfiguration.
	 * If the MapViewExtent is larger than the area covered by the MapViewConfiguration, transparent pixels will be added.
	 * @param mapViewConfiguration The specified MapViewConfiguration.
	 * @param mapViewExtent The specified ground area to be covered.
	 * @param maximumImageSizePixels The maximum size, in pixel, of the generated image.
	 * @return The image representing the specified MapViewExtent.
	 */
	op AbstractEImage getImageMapLayerPresentationImage(MapViewConfiguration mapViewConfiguration, RectangularRegion mapViewExtent, int maximumImageSizePixels)
	
	/*
	 * Computes the length of a 2D trajectory.
	 * @param The XYSeries.
	 * @return The length of the trajectory represented in the XYSerie.
	 */
	op double getTrajectoryLength(XYSeries xySeries)
	
	/*
	 * Return the identifier associated with a given MapViewConfiguration.
	 * @param mapViewConfiguration The given MapViewConfiguration.
	 * @return The identifier, null if none is found.
	 */
	op String getMapViewConfigurationIdentifier(MapViewConfiguration mapViewConfiguration)
	
	/*
	 * Return the MapViewConfiguration (in the Active Session) with the specified identifier.
	 * @param identifier The MapViewConfiguration identifier.
	 * @return The MapViewConfiguration with the specified identifier, null if non is found.
	 */
	op MapViewConfiguration getActiveMapViewConfiguration(String identifier)
	
	/*
	 * Return the MapViewConfigurationList in the Active Session.
	 * @return The MapViewConfigurationList in the Active Session, null if none is found.
	 */
	op MapViewConfigurationList getActiveMapViewConfigurationList() 	
	
	op List<FeatureOfInterestList> getFeatureOfInterestLists(InvocatorSession session)	
}

// MapView Definitions

class MapViewConfigurationList extends AbstractToolsListContainer
{
	contains MapViewConfiguration[0..*] mapViewConfigurations
}


/*
 * Configuration used for the Map View.
 */
class MapViewConfiguration extends Named, Described
{		
	/*
	 * List of Maps being displayed.
	 */
	@GenModel(children="true", notify="true", property="None")
	contains ImageMapLayerPresentation[0..*] mapLayers

	/*
	 * Color of the map background.
	 */
	Color3f backgroundColor = "1.0,1.0,1.0"

	/*
	 * List of Symphony System instances being tracked.
	 */
	@GenModel(children="true", notify="true", property="None")
	contains MapAnnotation[0..*] mapAnnotations		
	
	/*
	 * Default region to use when none is covered by the map Layers
	 */
	refers transient RectangularRegion[1] defaultRectangularRegion
	
	/*
	 * The image representing the active ImageMapLayers.
	 */
	@GenModel(children="false", notify="true", property="None")
	refers derived transient readonly AbstractEImage mapImage			
	
	/* 
	 * The rectangular region covered by the image layers defined in the map.
	 */
	@GenModel(children="false", notify="true", property="Readonly")
	refers derived transient readonly RectangularRegion[1] mapImageRectangularRegion
	
	/* 
	 * The rectangular region covered by the map (typically larger than
	 * mapImageRectangularRegion and contains mapImageRectangularRegion).
	 */
	@GenModel(children="false", notify="true", property="Readonly")
	refers derived transient RectangularRegion[1] extent
	
	/* 
	 * Forces the updates of all derived values.
	 */
	op void forceUpdate()
}

/*
 * Presentation properties for an item displayed 
 * on the MapView.
 */
abstract class MapViewItemPresentation
{
	/*
	 * Visibility
	 */
	boolean visible = "true"
}


/*
 * Presentation properties for an ImageMapLayer displayed on the MapView.
 */
//class ImageMapLayerPresentation extends MapViewItemPresentation, RectangularRegionImage
//{
	/** Image Map Layer being displayed.*/
//	refers ImageMapLayer imageMapLayer
	
	/**
	 * The alpha to use to display this layer, from fully opaque (1.0f) to fully transparent (0.0f).
	 */
//	float alpha = "1.0"	
//}


/*
 * Presentation properties for an object shown on top of the maps.
 */
abstract class MapAnnotation extends MapViewItemPresentation
{
	/*
	 *  TheXYPlot being used by MapView.
	 */
	op List<AbstractXYAnnotation> getXYShapeAnnotation()
}

/*
 * Base class of all map tools.
 */
abstract class MapTool extends MapAnnotation
{
	/*
	 * Whether or not the tool is active.
	 */	
	boolean active = "true"
	
	/*
	 * Method that is called to give access to the underlying ChartComposite and JFreeChart used to display the map.
	 * @param composite The ChartComposite used to display the map.
	 * @param chart The JFreeChart used to display the map.
	 */
	op void initialize(ChartComposite composite, JFreeChart chart)
	
	/*
	 * Method that is called to dispose of the tool.
	 */
	op void dispose()
	
	/*
	 * Method called when the user clicks on the map with the mouse.
	 * @param mouseButton The mouse button clicked
	 * @param x The absolute position x coordinates of the point selected.
	 * @param y The absolute position y coordinates of the point selected.
	 */
	op void positionSelected(int mouseButton, double x, double y)
}

/*
 * Tool that shows the distance between two point on the map. The use needs to 
 * selects two positions on the map by clicking using the left button on the mouse.
 */
class MapRuler extends MapTool
{	
	/*
	 * The color of the ruler.
	 */
	Color3f rulerColor	= "0.0,1.0,0.0"
}

/*
 * Presentation properties for a FeaturesOfInterestMapLayer.
 */
class FeaturesOfInterestMapLayerPresentation extends MapAnnotation, RectangularRegionProvider
{
	@GenModel(notify="true", propertyCategory="FOI_PROPERTIES")
	refers FeaturesOfInterestMapLayer featuresOfInterestMapLayer
		
	@GenModel(notify="true", propertyCategory="FOI_PROPERTIES", csa_units="m")
	double featureOfInterestRadius = "0.25"
	
	/** The color of the vector. */
	@GenModel(propertyCategory="FOI_PROPERTIES")
	Color3f featureOfInterestColor = "0.0,0.0,1.0"		
}

// Trajectory Annotation and Tools.

/*
 * Base class for classes providing a trajectory.
 */
abstract class TrajectoryProvider
{
	/*
	 * Re-initialize the TrajectoryProvider.
	 */
	op void initialize()
	
	/*
	 * Clears the list of points and associated trajectory.
	 */
	op void clear()
	
	/* 
	 * Returns the current trajectory as a list of Point2d.
	 */
	op List<Point2d> asListOfPoint2d()		
	
	/*
	 * The XYSeries containing the trajectory data to be displayed.
	 */
	@GenModel(property="None")
	op XYSeries getXYSeries()
	
	/*
	 * Latest x coordinates.
	 */	
	transient XYDataItem latestPosition
	
	/*
	 * The azimuth of the latest position, in radians, as measured relative to the x axis, positive clockwise.
	 */
	@GenModel(csa_units="rad")
	transient double azimuthAngle = "0.0"		
	
	/*
	 * The current length of the trajectory.
	 */
	@GenModel(csa_units="m")
	transient double trajectoryLength = "0.0"
	
	/*
	 * The color of the ruler.
	 */
	Color3f trajectoryColor	= "0.0,1.0,0.0"
}

/* 
 * Base class for user map tools that display trajectory on a map.
 */
abstract class AbstractTrajectoryTool extends TrajectoryProvider, MapTool
{
	
}

/*
 * Tool that allows a user to define a trajectory by clicking on a map.
 * Clicking on the left mouse button add a point to the trajectory, cliking on 
 * the right mouse button removes the last point of the trajectory.
 */
class TrajectoryPickingTool extends AbstractTrajectoryTool
{
	
}

/*
 * Base class for TrajectoryProvider that are providing trajectory based on a VariableTrajectoryAnnotation.
 */
abstract class VariableTrajectoryProvider extends TrajectoryProvider
{
	@GenModel(property="None")
	container VariableTrajectoryAnnotation variableAnnotation opposite trajectoryProvider
	
	/*
	 *  The Symphony System being displayed. This is automatically updated.
	 */
	refers transient PoseProvider[1] poseProvider
}

/*
 * Default implementation of VariableTrajectoryProvider. This implementation makes use of thresholds 
 * to limits the number of position update of the trajectory to improve performance.
 */
class DefaultVariableTrajectoryProvider extends VariableTrajectoryProvider
{
	/*
	 *  Minimum distance to keep between points added to the XYSeries.
	 */
	@GenModel(propertyCategory="THRESHOLDS", csa_units="m")
	double distanceThreshold = "0.5"
	
	/*
	 *  Minimum azimuth change that will trigger an azimuthAngle change.
	 */
	@GenModel(propertyCategory="THRESHOLDS", csa_units="rad")
	double azimuthThreshold = "0.017"
}

// Variable Annotations.

/*
 * Base class used for MapAnnotation representing a variable on a Map.
 */
abstract class AbstractVariableAnnotation extends MapAnnotation
{		
	/*
	 * The Symphony System being displayed.
	 */
	refers Variable[1] variable
	
	/*
	 * The instance of the object adapted by the Symphony System.
	 */
	refers transient EObject[0..1] variableInstance	
	
	/*
	 * The current instance of  SymphonySystemApiAdapter handling the variable.
	 */
	refers transient SymphonySystemApiAdapter[0..1] symphonySystemApiAdapter
	
	/*
	 * Method called when the pose of the variable changes.
	 * @param newPose The new pose matrix.
	 */
	op void updatePose(Matrix4x4 newPose)
}

/*
 * AbstractVariableAnnotation that shows the position and orientation of a variable on a Map.
 */
class PoseVariableAnnotation extends AbstractVariableAnnotation
{
	/*
	 * The length of the vector.
	 */
	@GenModel(propertyCategory="VECTOR_PROPERTIES", csa_units="m")
	double vectorlength = "10.0"
	
	/*
	 * The color of the vector.
	 */
	@GenModel(propertyCategory="VECTOR_PROPERTIES")
	Color3f vectorColor = "0.0,0.0,1.0"
	
	/*
	 * Whether to show the pose as text.
	 */
	boolean showPose = "true"	
		
	/*
	 * Method called when the position or orientation of the variable changes.
	 * @param x The x coordinates, in meters.
	 * @param y The y coordinates, in meters.
	 * @param zRotation The azimuth, in radians. 
	 */
	op void updatePose(@GenModel(csa_units="m") double x, @GenModel(csa_units="m") double y, @GenModel(csa_units="rad") double zRotation)
}	

/*
 * AbstractVariableAnnotation that draws the trajectory of a variable on a map. 
 */
class VariableTrajectoryAnnotation extends AbstractVariableAnnotation, TrajectoryProvider
{	
	/*
	 * The trajectory provider.
	 */
	contains VariableTrajectoryProvider[1] trajectoryProvider opposite variableAnnotation
}

/*
 * Specialization of PoseVariableAnnotation that also draws the shape of the vehicle on the map. 
 */
class VehicleVariableAnnotation extends PoseVariableAnnotation
{
	/*
	 * The length of the vehicle.
	 */
	@GenModel(propertyCategory="VEHICLE_DIMENSIONS",csa_units="m")
	double vehicleLength = "1.0"
	
	/*
	 * The width of the vehicle.
	 */
	@GenModel(propertyCategory="VEHICLE_DIMENSIONS",csa_units="m")
	double vehicleWidth = "0.5"
}
