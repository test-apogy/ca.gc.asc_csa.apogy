/**
 *
 * $Id$
 */
package ca.gc.asc_csa.apogy.common.topology.ui.validation;

import ca.gc.asc_csa.apogy.common.math.Tuple3d;

import ca.gc.asc_csa.apogy.common.topology.Node;

import ca.gc.asc_csa.apogy.common.topology.ui.SceneObject;
import ca.gc.asc_csa.apogy.common.topology.ui.ShadowMode;
import ca.gc.asc_csa.apogy.common.topology.ui.TopologyPresentationSet;

import org.eclipse.emf.common.util.EList;

import org.eclipse.swt.graphics.RGB;

/**
 * A sample validator interface for {@link ca.gc.asc_csa.apogy.common.topology.ui.NodePresentation}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface NodePresentationValidator {
	boolean validate();

	boolean validateTopologyPresentationSet(EList<TopologyPresentationSet> value);
	boolean validateNode(Node value);
	boolean validateColor(RGB value);
	boolean validateVisible(boolean value);
	boolean validateShadowMode(ShadowMode value);
	boolean validateUseInBoundingCalculation(boolean value);
	boolean validateCentroid(Tuple3d value);
	boolean validateMin(Tuple3d value);
	boolean validateMax(Tuple3d value);
	boolean validateXRange(double value);
	boolean validateYRange(double value);
	boolean validateZRange(double value);
	boolean validateSceneObject(SceneObject value);
}
