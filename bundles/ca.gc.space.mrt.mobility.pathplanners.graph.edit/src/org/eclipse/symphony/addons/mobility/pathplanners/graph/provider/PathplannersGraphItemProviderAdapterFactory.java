/**
 * Canadian Space Agency 2008.
 *
 * $Id: PathplannersGraphItemProviderAdapterFactory.java,v 1.2.4.2 2015/05/21 15:51:33 pallard Exp $
 */
package org.eclipse.symphony.addons.mobility.pathplanners.graph.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.symphony.addons.mobility.pathplanners.graph.util.PathplannersGraphAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PathplannersGraphItemProviderAdapterFactory extends PathplannersGraphAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Canadian Space Agency 2008.";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PathplannersGraphItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.CostBasedMeshWayPointPathPlanner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CostBasedMeshWayPointPathPlannerItemProvider costBasedMeshWayPointPathPlannerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.CostBasedMeshWayPointPathPlanner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCostBasedMeshWayPointPathPlannerAdapter() {
		if (costBasedMeshWayPointPathPlannerItemProvider == null) {
			costBasedMeshWayPointPathPlannerItemProvider = new CostBasedMeshWayPointPathPlannerItemProvider(this);
		}

		return costBasedMeshWayPointPathPlannerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.MeshDisplacementCostFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeshDisplacementCostFunctionItemProvider meshDisplacementCostFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.MeshDisplacementCostFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeshDisplacementCostFunctionAdapter() {
		if (meshDisplacementCostFunctionItemProvider == null) {
			meshDisplacementCostFunctionItemProvider = new MeshDisplacementCostFunctionItemProvider(this);
		}

		return meshDisplacementCostFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DistanceOnlyCostFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistanceOnlyCostFunctionItemProvider distanceOnlyCostFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DistanceOnlyCostFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistanceOnlyCostFunctionAdapter() {
		if (distanceOnlyCostFunctionItemProvider == null) {
			distanceOnlyCostFunctionItemProvider = new DistanceOnlyCostFunctionItemProvider(this);
		}

		return distanceOnlyCostFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.SimpleDirectedWeightedGraphBasedMeshWayPointPathPlanner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider simpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.SimpleDirectedWeightedGraphBasedMeshWayPointPathPlanner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleDirectedWeightedGraphBasedMeshWayPointPathPlannerAdapter() {
		if (simpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider == null) {
			simpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider = new SimpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider(this);
		}

		return simpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.MobilityEdgeFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobilityEdgeFactoryItemProvider mobilityEdgeFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.MobilityEdgeFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobilityEdgeFactoryAdapter() {
		if (mobilityEdgeFactoryItemProvider == null) {
			mobilityEdgeFactoryItemProvider = new MobilityEdgeFactoryItemProvider(this);
		}

		return mobilityEdgeFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DirectedGraphBasedMeshWayPointPathPlanner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectedGraphBasedMeshWayPointPathPlannerItemProvider directedGraphBasedMeshWayPointPathPlannerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DirectedGraphBasedMeshWayPointPathPlanner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectedGraphBasedMeshWayPointPathPlannerAdapter() {
		if (directedGraphBasedMeshWayPointPathPlannerItemProvider == null) {
			directedGraphBasedMeshWayPointPathPlannerItemProvider = new DirectedGraphBasedMeshWayPointPathPlannerItemProvider(this);
		}

		return directedGraphBasedMeshWayPointPathPlannerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.MobilityEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MobilityEdgeItemProvider mobilityEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.MobilityEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMobilityEdgeAdapter() {
		if (mobilityEdgeItemProvider == null) {
			mobilityEdgeItemProvider = new MobilityEdgeItemProvider(this);
		}

		return mobilityEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DistanceAndSlopesCostFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistanceAndSlopesCostFunctionItemProvider distanceAndSlopesCostFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DistanceAndSlopesCostFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistanceAndSlopesCostFunctionAdapter() {
		if (distanceAndSlopesCostFunctionItemProvider == null) {
			distanceAndSlopesCostFunctionItemProvider = new DistanceAndSlopesCostFunctionItemProvider(this);
		}

		return distanceAndSlopesCostFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.ExclusionZonesCostFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusionZonesCostFunctionItemProvider exclusionZonesCostFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.ExclusionZonesCostFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusionZonesCostFunctionAdapter() {
		if (exclusionZonesCostFunctionItemProvider == null) {
			exclusionZonesCostFunctionItemProvider = new ExclusionZonesCostFunctionItemProvider(this);
		}

		return exclusionZonesCostFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DistanceAndRoverFootprintCostFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistanceAndRoverFootprintCostFunctionItemProvider distanceAndRoverFootprintCostFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.addons.mobility.pathplanners.graph.DistanceAndRoverFootprintCostFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistanceAndRoverFootprintCostFunctionAdapter()
	{
		if (distanceAndRoverFootprintCostFunctionItemProvider == null) {
			distanceAndRoverFootprintCostFunctionItemProvider = new DistanceAndRoverFootprintCostFunctionItemProvider(this);
		}

		return distanceAndRoverFootprintCostFunctionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (costBasedMeshWayPointPathPlannerItemProvider != null) costBasedMeshWayPointPathPlannerItemProvider.dispose();
		if (meshDisplacementCostFunctionItemProvider != null) meshDisplacementCostFunctionItemProvider.dispose();
		if (distanceOnlyCostFunctionItemProvider != null) distanceOnlyCostFunctionItemProvider.dispose();
		if (simpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider != null) simpleDirectedWeightedGraphBasedMeshWayPointPathPlannerItemProvider.dispose();
		if (directedGraphBasedMeshWayPointPathPlannerItemProvider != null) directedGraphBasedMeshWayPointPathPlannerItemProvider.dispose();
		if (mobilityEdgeItemProvider != null) mobilityEdgeItemProvider.dispose();
		if (mobilityEdgeFactoryItemProvider != null) mobilityEdgeFactoryItemProvider.dispose();
		if (distanceAndSlopesCostFunctionItemProvider != null) distanceAndSlopesCostFunctionItemProvider.dispose();
		if (exclusionZonesCostFunctionItemProvider != null) exclusionZonesCostFunctionItemProvider.dispose();
		if (distanceAndRoverFootprintCostFunctionItemProvider != null) distanceAndRoverFootprintCostFunctionItemProvider.dispose();
	}

}
