@GenModel(prefix="Recorders",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Recorders",
	      operationReflection="true",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/ca.gc.space.mrt.common.recorders/src-generated")
@GenModel(editDirectory="/ca.gc.space.mrt.common.recorders.edit/src-generated")

package ca.gc.space.mrt.common.recorders

import java.util.Map
import java.util.Date

import org.eclipse.symphony.common.file.csv.CsvColumnsSet
import ca.gc.space.mrt.common.processors.Monitorable

import org.eclipse.emf.ecore.EObject

import org.eclipse.emf.common.util.EList

type DateListMap wraps Map<Date , EList<Object>>

@GenModel(documentation="Represent a object that is used to stored data generated by a Recorder. This includes the source object (source), the names of the source object's features being recorded (tracks), and the actual time tag features values themselves (records).")
class Recordings
{
	refers EObject source
	
	DateListMap records
	
	String [0..*] tracks
}

@GenModel(documentation="Represent a object that can monitor an object and record its changes through time.")
class Recorder extends Monitorable
{
	@GenModel(documentation="Returns whether or not a new value for a specific track should be recorded or not. This method is intended to be overloaded by users that want to add restriction on what is considered a \"new value\". The default implementation always returns true.")
	op boolean isToBeRecorded(Object newValue, String track)
	
	op void terminate()
	
	op void resume()
	
	op void pause()
	
	op void start()
	
	RecorderStatus status
}

enum RecorderStatus
{
	INITIALIZING as "INITIALIZING" = 0
	RECORDING as "RECORDING" = 1
	PAUSED as "PAUSED" = 2
	TERMINATED as "TERMINATED" = 3
}

@GenModel(documentation="Represent a object that is used to save to file the data acquired by a Recorder.")
class RecordingsExporter
{
	op void export(String path)
	
	refers Recordings recordings
}

class CsvExporter
{
	op void exportToCSVFile(String exportPath)
	
	boolean includeColumnDescription
	
	boolean includeColumnName
	
	refers derived CsvColumnsSet columnSet
}