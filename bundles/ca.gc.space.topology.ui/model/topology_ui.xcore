@GenModel(prefix="TopologyUI", childCreationExtenders="true", extensibleProviderFactory="true", multipleEditorPages="false", copyrightText="Agence spatiale canadienne / Canadian Space Agency 2015 Copyrights (c)", modelName="TopologyUI", complianceLevel="6.0")
@GenModel(modelDirectory="/org.eclipse.symphony.common.topology.ui/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.common.topology.ui.edit/src-generated")
@GenModel(testsDirectory="/org.eclipse.symphony.common.topology.ui.tests/src-generated")


package org.eclipse.symphony.common.topology.ui

import org.eclipse.symphony.common.math.Tuple3d
import org.eclipse.symphony.common.topology.Node

type List<T> wraps java.util.List
type RGB wraps org.eclipse.swt.graphics.RGB

type Point3d wraps javax.vecmath.Point3d
type Vector3f wraps javax.vecmath.Vector3f

type SceneObject wraps org.eclipse.symphony.common.topology.ui.SceneObject

type Notification wraps org.eclipse.emf.common.notify.Notification

// Enums

enum ShadowMode
{	
	INHERIT as "INHERIT" = 0,
	OFF as "OFF" = 1,
	CAST as "CAST" = 2,
	RECEIVE as "RECEIVE" = 3,
	CAST_AND_RECEIVE as "CAST_AND_RECEIVE" = 4
}

enum MeshPresentationMode
{
	POINTS as "POINTS" = 0,
	SURFACE as "SURFACE" = 1,
	WIREFRAME as "WIREFRAME" = 2
}

/**
 * The registry of all NodePresentation. This class is intended to be a singleton.
 * It associates at most one NodePresentation to each Node. It registers to 
 */
class TopologyPresentationRegistry
{
	/**
	 * The list of TopologyPresentationSet managed by the TopologyPresentationRegistry.
	 */
	contains TopologyPresentationSet[0..*] topologyPresentationSetList opposite topologyPresentationRegistry
	
	/**
 	 * The list of NodePresentation managed by this PresentationTopology.
 	 */
	contains NodePresentation[0..*] nodePresentationList
	
	/**
	 * Creates a TopologyPresentationSet from a specified topologyRoot.
	 * @param topologyRoot The node at the root of the topology.
	 */
	op TopologyPresentationSet createTopologyPresentationSet(Node topologyRoot)
	
	/**
	 * Release a TopologyPresentationSet no longer needed.
	 * @param topologyPresentationSet The TopologyPresentationSet to release.
	 */
	op void release(TopologyPresentationSet topologyPresentationSet)
	
	/**
	 * Returns the NodePresentation associated with a specified Node.
	 * @param node The specified Node.
	 * @return The NodePresentation associated with specified Node, null if none is found.
	 */
	op NodePresentation getPresentationNode(Node node)
}

/**
 * A class used to keep a the relationship between a given topology and its associated TopologyPresentationSet.
 */
class GraphicsContext
{
	/**
	 * The root of the topology.
	 */
	refers Node topology
	
	/**
	 * The TopologyPresentationSet associated with the root of the topology.
	 */
	refers TopologyPresentationSet topologyPresentationSet opposite graphicsContext
	
	/**
	 * Dispose of this GraphicsContext.
	 */
	op void dispose()
}

/**
 * Class that represent the result of a selection in a topology.
 */
class NodeSelection
{
	refers transient TopologyPresentationSet topologyPresentationSet
	
	refers transient Node selectedNode
	
	refers transient NodePresentation nodePresentation
	
	Point3d relativeIntersectionPoint
	
	Point3d absoluteIntersectionPoint
	
	Vector3f relativeIntersectionNormal
	
	Vector3f absoluteIntersectionNormal
}

// Presentation Topology
class TopologyPresentationSet
{
	/**
	 * The TopologyPresentationRegistry containing this TopologyPresentationSet.
	 */
	refers TopologyPresentationRegistry topologyPresentationRegistry opposite topologyPresentationSetList
		
	/**
	 * The GraphicsContext containing this PresentationTopology.
	 */
	refers GraphicsContext graphicsContext opposite topologyPresentationSet
	
	/**
 	 * The list of NodePresentation managed by this PresentationTopology.
 	 */
	refers NodePresentation[0..*] nodePresentationList opposite topologyPresentationSet
	
	/**
	 * Returns the NodePresentation associated with a specified Node.
	 * @param node The specified Node.
	 * @return The NodePresentation associated with specified Node, null if none is found.
	 */
	op NodePresentation getPresentationNode(Node node)
	
	/**
 	 * Returns the list of Nodes managed by this PresentationTopology.
 	 * @return The list of Nodes. Never null.
 	 */
	op List<Node> getNodes()
}

// Node Presentation

class NodePresentation
{
	/**
	 * The list of TopologyPresentationSet referring to this NodePresentation.
	 */
	refers TopologyPresentationSet[0..*] topologyPresentationSet opposite nodePresentationList
	
	@GenModel(notify="true", property="None", propertyCategory="PRESENTATION_INTERNAL_INFORMATION")
	refers Node node

	@GenModel(notify="true",  property="Editable", propertyCategory="VISUAL_INFORMATION")
	RGB color

	@GenModel(notify="true",  property="Editable", propertyCategory="VISUAL_INFORMATION")
	boolean visible = "true"

	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION", child="false")
	ShadowMode shadowMode

	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION", child="false")
	boolean useInBoundingCalculation = "true"

	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION")
	refers derived volatile transient readonly Tuple3d centroid

	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION")
	refers derived volatile transient readonly Tuple3d min

	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION")
	refers derived volatile transient readonly Tuple3d max
	
	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION")
	derived volatile transient readonly double xRange

	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION")
	derived volatile transient readonly double yRange

	@GenModel(notify="true", property="Readonly", propertyCategory="BOUNDING_VOLUME_INFORMATION")
	derived volatile transient readonly double zRange

	@GenModel(notify="true", property="Readonly", propertyCategory="PRESENTATION_INTERNAL_INFORMATION", child="false")
	transient SceneObject sceneObject
}


class TransformNodePresentation extends NodePresentation
{
	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	boolean axisVisible = "false"

	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	double axisLenght = "1.0"
}

class RotationNodePresentation extends NodePresentation
{
	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	boolean axisVisible = "false"

	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	double axisLenght = "1.0"
}

class PositionNodePresentation extends NodePresentation
{
	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	boolean axisVisible = "false"

	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	double axisLenght = "1.0"
}

class URLNodePresentation extends NodePresentation
{
	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	boolean axisVisible = "false"

	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	double axisLenght = "1.0"

	@GenModel(notify="true", property="Editable", propertyCategory="VISUAL_INFORMATION")
	MeshPresentationMode presentationMode = "SURFACE"
}

class TopologyUIFacade
{
	op GraphicsContext createGraphicsContext(Node topologyRoot)
	
	op void findExtent(Node root, TopologyPresentationSet topologyPresentationSet, Tuple3d min, Tuple3d max)
	
	op NodeSelection createNodeSelection(TopologyPresentationSet topologyPresentationSet, NodePresentation nodePresentation, Point3d relativePosition)
	
	op NodeSelection createNodeSelection(TopologyPresentationSet topologyPresentationSet, Node node, Point3d relativePosition, Vector3f relativeNormal)
}