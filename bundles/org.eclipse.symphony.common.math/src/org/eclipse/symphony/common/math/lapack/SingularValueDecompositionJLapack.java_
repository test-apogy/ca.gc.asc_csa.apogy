package org.eclipse.symphony.common.math.lapack;

import java.io.Serializable;
import java.util.Arrays;

import org.netlib.lapack.Dgesvd;

import Jama.Matrix;

public class SingularValueDecompositionJLapack implements Serializable {

	// The A matrix for which we will find the SVD.
	private Matrix A;

	// The U matrix: m x m
	private Matrix U;

	// The V matrix: n x n
	private Matrix V;

	// The S matrix, a diagonal matrix: mxn
	private Matrix S;

	// The singular values
	private double[] singularValues;

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public SingularValueDecompositionJLapack(Matrix a) {

		if (a == null) {
			throw new NullPointerException();
		}

		this.A = a;
		computeSVD();
	}

	private void computeSVD() {

		int M = A.getRowDimension();
		int N = A.getColumnDimension();

		double[] m = A.getRowPackedCopy();

		double[] s = new double[Math.min(M, N)];
		double[] u = new double[M * M];
		double[] vt = new double[N * N];
		double[] work = new double[Math.max(
				3 * Math.min(M, N) + Math.max(M, N), 5 * Math.min(M, N))];
		org.netlib.util.intW info = new org.netlib.util.intW(2);

		Dgesvd.dgesvd("A", // JOBU
				"A", // JOBVT
				M, // M
				N, // N
				m, // A
				0, // 
				M, // LDA
				s, // S
				0, // 
				u, // U
				0, // 
				M, // LDU
				vt, // VT
				0, // 
				N, // LDVT
				work, // WORK
				0, // 
				work.length, // LWORK
				info // INFO
				);

		if (info.val != 0) {
			throw new RuntimeException("Error while running SVD: " + info.val);
		}

		// We wrap it into an jama Matrix.
		V = new Matrix(vt, N);
		V = V.transpose();

		S = new Matrix(M, N);

		for (int i = 0; i < s.length; i++) {
			S.set(i, i, s[i]);
		}

		U = new Matrix(u, M);

		singularValues = new double[s.length];

		for (int i = 0; i < s.length; i++) {
			singularValues[i] = S.get(i, i);
		}

		// Matrix res = U.times(S).times(V.transpose());
		//		
		// Matrix diff = A.minus(res);

		// System.out.println("SingularValueDecompositionJLapack.computeSVD() diff: ");
		// diff.print(3,3);

	}

	public Matrix getU() {
		return U;
	}

	public Matrix getS() {
		return S;
	}

	public Matrix getV() {
		return V;
	}

	public double[] getSingularValues() {
		return singularValues;
	}

}
