@GenModel(prefix="SymphonyTopology", childCreationExtenders="true", extensibleProviderFactory="true", multipleEditorPages="false", copyrightText="Agence spatiale canadienne / Canadian Space Agency 2012 Copyrights (c)", modelName="SymphonyTopology")
@GenModel(modelDirectory="/ca.gc.asc_csa.symphony.topology/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.symphony.topology.edit/src-generated")

package ca.gc.asc_csa.symphony.topology

import ca.gc.asc_csa.eclipse.emf.ecore.invocator.Variable
import ca.gc.asc_csa.eclipse.emf.ecore.invocator.AbstractTypeImplementation

import ca.gc.space.topology.Node
import ca.gc.space.topology.ReferencedGroupNode
import org.eclipse.symphony.core.SymphonyEnvironment

import org.eclipse.symphony.core.ResultsListNode
import ca.gc.asc_csa.symphony.environment.WorksiteNode

type SortedSet<T> wraps java.util.SortedSet 

class SystemsTopologyAdapter
{
	@GenModel(documentation="The Deployment to monitor.")
	refers transient SymphonyEnvironment deployment	
	
	@GenModel(documentation="The topology representing the Systems found in the Deployment.")
	refers transient ReferencedGroupNode systemsGroup	
}


/* -------------------------------------------------------------------------
 * Specialized Nodes.
 * ------------------------------------------------------------------------- */ 

@GenModel(documentation="A specialized Topology node representing a Deployment.")
class SymphonyEnvironmentNode extends ReferencedGroupNode
{
	refers transient SymphonyEnvironment symphonyEnvironment
		
	refers derived transient WorksiteNode[1] worksiteNode
	
	refers derived transient readonly ResultsListNode[1] resultsListNode
		
	refers derived transient readonly SymphonySystemAPIsNode[1] symphonySystemAPIsNode
	
	op void dispose()
}

class SymphonySystemAPIsNode extends ReferencedGroupNode
{
	refers transient SymphonyEnvironment symphonyEnvironment
}

/* -------------------------------------------------------------------------
 * SymphonyTopologyFacade
 * ------------------------------------------------------------------------- */ 
class SymphonyTopologyFacade
{
	op Node getVariableOriginNode(Variable variable) 
		
	op Node getAbstractTypeImplementationOriginNode(AbstractTypeImplementation abstractTypeImplementation)
	
	op SymphonyEnvironmentNode createSymphonyEnvironmentNode(SymphonyEnvironment symphonyEnvironment) 
}