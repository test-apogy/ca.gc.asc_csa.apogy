/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyAddonsMobilityPathplanners",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  copyrightText="Copyright (c) 2015-2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    Pierre Allard (Pierre.Allard@canada.ca), 
    Regent L'Archeveque (Regent.Larcheveque@canada.ca),
    Sebastien Gemme (Sebastien.Gemme@canada.ca),
    Canadian Space Agency (CSA) - Initial API and implementation",
		  modelName="ApogyAddonsMobilityPathplanners",
		  dynamicTemplates="true", 
		  templateDirectory="platform:/plugin/ca.gc.asc_csa.apogy.common.emf.templates")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.addons.mobility.pathplanners/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.addons.mobility.pathplanners.edit/src-generated")

package ca.gc.asc_csa.apogy.addons.mobility.pathplanners

import ca.gc.asc_csa.apogy.common.processors.Processor
import ca.gc.asc_csa.apogy.common.geometry.data3d.CartesianCoordinatesSet
import ca.gc.asc_csa.apogy.addons.geometry.paths.WayPointPath
import ca.gc.asc_csa.apogy.common.processors.Exception
import ca.gc.asc_csa.apogy.common.geometry.data3d.CartesianPolygon
import ca.gc.asc_csa.apogy.common.geometry.data3d.CartesianPositionCoordinates
import ca.gc.asc_csa.apogy.common.geometry.data.Mesh
import ca.gc.asc_csa.apogy.common.topology.Node
import ca.gc.asc_csa.apogy.common.geometry.data.CoordinatesSamplingShape
import ca.gc.asc_csa.apogy.common.geometry.data.PolygonSamplingShape
import ca.gc.asc_csa.apogy.common.geometry.data3d.CartesianTriangle
import ca.gc.asc_csa.apogy.common.topology.GroupNode

/**
 * A path planner that produces a WayPoinPath.
 */
class WayPointPathPlanner extends Processor<CartesianCoordinatesSet, WayPointPath>
{	
	op WayPointPath plan(CartesianPositionCoordinates currentPosition, CartesianPositionCoordinates destinationPosition) throws Exception
	
	refers transient CartesianPositionCoordinates currentPosition
	refers transient CartesianPositionCoordinates currentDestination
}

/**
 * A path planner that produces a WayPoinPath based on a triangular mesh.
 */
class MeshWayPointPathPlanner <T extends CartesianPolygon> extends WayPointPathPlanner
{
	refers transient Mesh<CartesianPositionCoordinates, CartesianPolygon> mesh
}

/**
 * Represent a zone to be excluded from trajectory generated by path planners that 
 * support exclusion zones.
 */
abstract class ExclusionZone extends Node
{		
	op boolean isInside(CartesianPositionCoordinates point)
	
	op boolean intersects(CartesianPositionCoordinates from, CartesianPositionCoordinates to)
}

/**
 * Represent an exclusion zone defined as a circle. 
 */
class CircularExclusionZone extends ExclusionZone, CoordinatesSamplingShape<CartesianPositionCoordinates>, PolygonSamplingShape<CartesianPositionCoordinates, CartesianTriangle>
{
	double radius
	boolean invertSamplingShape
}

class ApogyAddonsMobilityPathplannersFacade
{
	op CircularExclusionZone createCircularExclusionZone(double radius, GroupNode parent)
}