@GenModel(prefix="Symphony__AddonsSensorsFOV",
	      childCreationExtenders="true",
	      extensibleProviderFactory="true",
	      multipleEditorPages="false",
	      copyrightText="Canadian Space Agency / Agence spatiale canadienne 2015 Copyrights (c)",
	      modelName="Symphony__AddonsSensorsFOV",
	      suppressGenModelAnnotations="false")
@GenModel(modelDirectory="/org.eclipse.symphony.addons.sensors.fov/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.addons.sensors.fov.edit/src-generated")

package org.eclipse.symphony.addons.sensors.fov

import org.eclipse.symphony.common.math.Matrix4x4
import org.eclipse.symphony.common.topology.Node
import org.eclipse.symphony.common.geometry.data3d.CartesianPolygon
import org.eclipse.symphony.common.geometry.data3d.CartesianPositionCoordinates
import org.eclipse.symphony.common.geometry.data.PolygonSamplingShape
import org.eclipse.symphony.common.geometry.data.CoordinatesSamplingShape

class FieldOfView extends Node
{
	
}

/*
 * Defines an distance range by specifying a minimum and maximum distance.
 */
class DistanceRange
{
	double minimumDistance = "0.0"
	
	double maximumDistance = "1.0"
	
	readonly transient volatile derived double distance
	
	/*
	 * Returns whether or not the specified distance falls within the range.
	 */
	op boolean isWithinRange(double distance)
}

/*
 * Defines an angular span by specifying a maximum and a minimum angle (in radians).
 */
class AngularSpan
{
	@GenModel(csa_units="rad")
	double minimumAngle = "0.0"
 	
	@GenModel(csa_units="rad")
	double maximumAngle = "0.0"
 	
	/*
	 * The total angular span, in radians.
	 */
	@GenModel(csa_units="rad")
	readonly transient volatile derived double spanningAngle
 	
	/*
	 * The center of the angular span, in radians.
	 */
	@GenModel(csa_units="rad")
	readonly transient volatile derived double centerAngle
 	
	/*
	 * Returns whether or not the specified angle (in radians) falls within the angular range.
	 */
	op boolean isWithinRange(double angle)
}
 
/*
 * A field of view that has a frustrum shape. This frustrum has a
 * rectangular base and is right (its axis is perpendicular to both bases).
 * See http://en.wikipedia.org/wiki/Frustrum.
 */
class RectangularFrustrumFieldOfView extends FieldOfView
{
	contains DistanceRange range
 	
	/*
	 * Total horizontal field of view, in radians.
	 */
	@GenModel(csa_units="rad")
	double horizontalFieldOfViewAngle
 	
	/*
	 * Total vertical field of view, in radians.
	 */
	@GenModel(csa_units="rad")
	double verticalFieldOfViewAngle
 	
	/*
	 * The volume of the contained within the field of view.
	 */
	readonly volatile transient derived double volume
}
 
 /*
  * A conical field of view defined by its apex angle.
  */
class ConicalFieldOfView extends FieldOfView
{
	contains DistanceRange range
	
	/*
	 * The apex angle, in radians, of the conical field of view.
	 */
	@GenModel(csa_units="rad")
	double fieldOfViewAngle
	
	/*
	 * The volume of the contained within the field of view.
	 */
	readonly volatile transient derived double volume
}

/*
 * A field of view shaped like a circular sector;
 * for more info, see http://en.wikipedia.org/wiki/Circular_sector.
 */
class CircularSectorFieldOfView extends FieldOfView
{
	contains DistanceRange range
	
	contains AngularSpan [1] angularSpan
	
	/*
	 * The area of the circular sector.
	 */
	readonly volatile transient derived double area
}

class RectangularFrustrumFieldOfViewSamplingShape<PolygonType extends CartesianPolygon> extends CoordinatesSamplingShape<CartesianPositionCoordinates>,
																								PolygonSamplingShape<CartesianPositionCoordinates, PolygonType>
{
	refers Matrix4x4 transform
	
	refers RectangularFrustrumFieldOfView rectangularFrustrumFieldOfView
}

class Symphony__AddonsSensorsFOVFacade
{
	op DistanceRange createDistanceRange(double minimumDistance, double maximumDistance)
	
	op DistanceRange createDistanceRange(DistanceRange distanceRange)
	
	op AngularSpan createAngularSpan(double minimumAngle, double maximumAngle)
	
	op AngularSpan createAngularSpan(AngularSpan angularSpan)
	
	op RectangularFrustrumFieldOfView createRectangularFrustrumFieldOfView(double minimumDistance, double maximumDistance, double horizontalFieldOfViewAngle, double verticalFieldOfViewAngle)
	
	op RectangularFrustrumFieldOfView createRectangularFrustrumFieldOfView(RectangularFrustrumFieldOfView rectangularFrustrumFieldOfView)
	
	op ConicalFieldOfView createConicalFieldOfView(double minimumDistance, double maximumDistance, double fieldOfViewAngle)
	
	op ConicalFieldOfView createConicalFieldOfView(ConicalFieldOfView conicalFieldOfView)
	
	op CircularSectorFieldOfView createCircularSectorFieldOfView(double minimumAngle, double maximumAngle, double minimumDistance, double maximumDistance)
	
	op CircularSectorFieldOfView createCircularSectorFieldOfView(CircularSectorFieldOfView circularSectorFieldOfView)
}