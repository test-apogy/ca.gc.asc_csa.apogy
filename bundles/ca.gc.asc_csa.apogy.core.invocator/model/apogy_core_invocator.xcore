/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCoreInvocator",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  multipleEditorPages="false",
		  copyrightText="Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 
 Contributors:
     Pierre Allard (Pierre.Allard@canada.ca), 
     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
     Sebastien Gemme (Sebastien.Gemme@canada.ca),
     Canadian Space Agency (CSA) - Initial API and implementation",
		  modelName="ApogyCoreInvocator",
		  fileExtensions="sym",
		  resource="XMI")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.core.invocator/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.core.invocator.edit/src-generated")
@GenModel(editorDirectory="/ca.gc.asc_csa.apogy.core.invocator.editor/src-generated")

package ca.gc.asc_csa.apogy.core.invocator

import ca.gc.asc_csa.apogy.common.emf.AbstractFeatureNode
import ca.gc.asc_csa.apogy.common.emf.CollectionTimedTimeSource
import ca.gc.asc_csa.apogy.common.emf.Described
import ca.gc.asc_csa.apogy.common.emf.Exception
import ca.gc.asc_csa.apogy.common.emf.List
import ca.gc.asc_csa.apogy.common.emf.ListRootNode
import ca.gc.asc_csa.apogy.common.emf.Named
import ca.gc.asc_csa.apogy.common.emf.Timed
import ca.gc.asc_csa.apogy.common.emf.TreeRootNode
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EEnum
import org.eclipse.emf.ecore.EEnumLiteral
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EOperation
import org.eclipse.emf.ecore.EParameter

/* -------------------------------------------------------------------------
 * 
 * DataTypes.
 * 
 * ------------------------------------------------------------------------- */ 
type Throwable wraps java.lang.Throwable
type Notification wraps org.eclipse.emf.common.notify.Notification
type TypeMemberImplementationsEList wraps EList<TypeMemberImplementation>
type TypeMembersArray wraps TypeMember[]
type IVariableListener wraps IVariableListener


/* -------------------------------------------------------------------------
 * 
 * Utilities
 * 
 * ------------------------------------------------------------------------- */

class ApogyCoreInvocatorFacade
{
	/*
	 * Executes the specified {@link OperationCall} and returns the {@link OperationCallResult}.
	 * This method invokes {@link ApogyCoreInvocatorFacade#exec(OperationCall operationCall, true).
	 * @param operationCall Reference to the {@link OperationCall}.
	 * @return Reference to the result.
	 */
	op OperationCallResult exec(OperationCall operationCall)

	/*
	 * Executes the specified {@link OperationCall} and returns the {@link OperationCallResult}.
	 * @param operationCall Reference to the {@link OperationCall}.
	 * @param saveResult If true the result is stored in the {@link OperationCallResultsList} specified
	 * in the active {@link Context}.
	 * @return Reference to the result.
	 */
	op OperationCallResult exec(OperationCall operationCall, boolean saveResult)
	
	/*
	 * Executes the list of {@link OperationCall} sequentially.
	 * @param operationCallsList Reference to the list of {@link OperationCall}.
	 */	
	op void exec(OperationCallsList operationCallsList) 
	
	/*
	 * Returns the value contained in the {@link OperationCallResult}.
	 * @param operationCallResult {@link OperationCallResult} that contains the result. 
	 * @return Reference to the value (Java Object). 
	 */
	op Object getValue(OperationCallResult operationCallResult)
	
	op AbstractResultValue createAbstractResultValue(Object value)
	
	op EObject getInstance(Variable variable)
	op EClass getInstanceClass(Variable variable)

	/*
	 * Returns the most specific TypeApiAdapter for the given VariableFeatureReference.
	 */
	op TypeApiAdapter getTypeApiAdapter(VariableFeatureReference variableFeatureReference)

	/*
	 * Returns the instance referred by the {@link VariableFeatureReference}
	 * @param variableFeatureReference Reference to the variable feature.
	 * @return Reference to the instance or null if not found.
	 */
	op EObject getInstance(VariableFeatureReference variableFeatureReference)
	
	/*
	 * Returns the instance referred by the variableFeatureReference.TypeMemberReferenceListElement.
	 * @param variableFeatureReference Reference to the variable feature.
	 * @return Reference to the type member instance, null if no TypeMemberReferenceListElement are defined or instance of type member are null.
	 */
	op EObject getTypeMemberInstance(VariableFeatureReference variableFeatureReference)
	
	/*
	 * Returns the value referred by the variableFeatureReference.ListRootNode.
	 * @param variableFeatureReference Reference to the variable feature.
	 * @return Reference to feature value, null if non is defined.
	 */
	op Object getEMFFeatureValue(VariableFeatureReference variableFeatureReference)
	
	/** 
	 * Returns the instance class referred by the {@link VariableFeatureReference}.
	 * @param variableFeatureReference Reference to the feature.
	 * @return Instance Class.
	 */
	op EClass getInstanceClass(VariableFeatureReference variableFeatureReference)
		
	op AbstractTypeImplementation getTypeImplementation(OperationCall operationCall)
	op AbstractTypeImplementation getTypeImplementation(Variable variable, AbstractType elementType)
	op AbstractTypeImplementation getTypeImplementation(Variable variable)
	
	/*
	 * Returns the variables with the specified name within the specified session.
	 * @param session Session in which the variable name will be searched.
	 * @param name Name.
	 * @return Reference to the {@link Variable} or null if there is no match. 
	 */
	op List<Variable> getVariableByName(InvocatorSession session, String name)
	
	/**
	 * Create a structure of {@link TypeMemberReferenceListElement} based on the specified sequence of {@link TypeMember}.
	 * @param Sequence from the first to the last of type members.
	 * @return Reference to the newly created structure of {@link TypeMemberReferenceListElement}.
	 */
	op TypeMemberReferenceListElement createTypeMemberReferences(TypeMembersArray typeMembers)
	
	/**
	 * Create a {@link ListRootNode} based on the specified sequence of {@link EStructuralFeature}.
	 * @param Sequence from the first to the last of features.
	 * @return Reference to the newly created structure of {@link ListRootNode}.
	 */
//	op ListRootNode createListRootNode(EStructuralFeaturesArray features)
		
	/*
	 * Searches the {@link AbstractTypeImplementation} based on the fullyQualifiedName.
	 * @param environment Reference to the environment
	 * @param fullyQualifiedName Search criteria (e.g. "<variable_instance_name>.<type_member_instance_name>.<type_member_instance_name>").
	 * @return Reference to the {@link AbstractTypeImplementation} or null if not found.
	 */
	op AbstractTypeImplementation getTypeImplementation(Environment environment, String fullyQualifiedName)
	
	op String getFullyQualifiedName(TypeMemberReferenceTreeElement typeMemberReferenceTreeElement)
	op String getFullyQualifiedName(AbstractFeatureNode abstractFeatureNode)
	
	
	/*
	 * Creates a list of TypeMemberImplementation according to the definition of the specified variable type.
	 * @param variableType Reference to the type.
	 * @return List of TypeMemberImplementation.
	 */
	op List<TypeMemberImplementation> createTypeMemberImplementations(Type variableType)		
		
	/*
	 * Resets the variable instances.
	 */
	op void initVariableInstances(Environment environment)
	
	/*
	 * Refers to the date at which the instances were initialized. 
	 */
	Date initVariableInstancesDate
	
	/*
	 * Clear the variable instances.
	 */
	op void disposeVariableInstances(Environment environment)
	
	/*
	 * Returns the direct owner of the {@link TypeMemberReferenceListElement}.  Null is returned if the reference 
	 * is a direct child of the {@link OperationCall}.
	 * @param typeMemberReference Reference to the {@link TypeMemberReferenceListElement}
	 * @return {@link OperationCall} that contains the {@link TypeMemberReferenceListElement}.  
	 * Null is returned if the reference is a direct child of the {@link OperationCall}.
	 */
	op OperationCall getOperationCallContainer(TypeMemberReferenceListElement typeMemberReferenceListElement)

	/*
	 * Apply the initialization data to the specified environment.
	 * @param environment Environment to initialize.
	 */
	op void applyInitializationData(Environment environment)
	
	/*
	 * Collects the initialization data for the specified environment.
	 * @param environment Environment to collect data from.
	 */
	op void collectInitializationData(Environment environment)

	
	/*
	 * Apply the initialization data to the specified Variable.
	 * @param variable Variable to initialize.
	 */
	op void applyInitializationData(Variable variable)
	
	/*
	 * Collects the initialization data from the specified Variable.
	 * @param variable Variable to collect data from.
	 */
	op void collectInitializationData(Variable variable)
	
	/*
	 * Refers to the active invocator session.
	 */
	refers InvocatorSession activeInvocatorSession
	
	/*
	 * Loads the registered types.
	 * @param session Reference to the session.
	 */
	 op void loadRegisteredTypes(InvocatorSession session)
	 
	 /*
	  * Returns the list of all the {@link Type} contained in the specified {@link Environment}.
	  * @environment Reference to the environment.
	  */
	 op List<Type> getAllTypes(Environment environment) 
	 
	 /*
	  * Adds the specified {@link IVariableListener}.
	  * @param listener Reference to the {@link IVariableListener}.
	  */
	 op void addVariableListener(IVariableListener listener)
	 
	 /*
	  * Removes the specified {@link IVariableListener}.
	  * @param listener Reference to the {@link IVariableListener}.
	  */
	 op void removeVariableListener(IVariableListener listener)
	 
	 /*
	  * Notifies all {@link IVariableListener} the specified variable instance event.
	  * @param variable Refers to the variable.
	  * @param event Refers to the {@link VariableListenerEventType}.
	  */
	 op void notifyVariableListeners(Variable variable, VariableListenerEventType event)	 
	 
	 /*
	  * Loads the content of the {@link InvocatorSession}.
	  * @param uri Reference to the session file (e.g. "platform:/plugin/ca.gc.asc_csa.apogy.examples.rover.apogy/sessions/RoverExampleSession.sym").
	  * @return Reference to the session if successfully loaded.
	  * @throw Exception Reference to the exception if problems occurred during the load.
	  */
	 op InvocatorSession loadInvocatorSession(String uri) throws Exception
	 
	 /*
	  * Search and return the list that matches the specified name.
	  * @param invocatorSession Reference to the session.
	  * @param name Search criteria.
	  * @return Reference to the list or null if not found.
	  */
	 op DataProductsList getDataProductsByName(InvocatorSession invocatorSession, String name)
	 
	 /*
	  * Search and return the program that matches the specified name.
	  * @param invocatorSession Reference to the session.
	  * @param name Search criteria.
	  * @return Reference to the program or null if not found.
	  */
	 op Program getProgramByName(InvocatorSession invocatorSession, String name)
	 
	 /*
	  * Search and return the context that matches the specified name.
	  * @param invocatorSession Reference to the session.
	  * @param name Search criteria.
	  * @return Reference to the context or null if not found.
	  */
	 op Context getContextByName(InvocatorSession invocatorSession, String name)
	 
	 /*
	  * Returns all the {@link ScriptBasedProgram} programs contained in the list.
	  * @param programsList Refers to the list that contains all the programs.
	  * @param filter Determine if the program should be considered as a valid program. 
	  * @return List of programs.
	  */
	 op List<Program> getAllScriptBasedPrograms(ProgramsList programsList)	 	 
} 

enum VariableListenerEventType{
	NEW,
	CLEAR
}


//interface ProgramFilter{
//	op boolean isValid(Program program)
//}

/* -------------------------------------------------------------------------
 * 
 * Run Environment.
 * 
 * ------------------------------------------------------------------------- */

class InvocatorSession extends Named, Described
{
	contains Environment[0..1] environment opposite invocatorSession
	contains ProgramsList[0..1] programsList opposite invocatorSession
	contains ProgramRuntimesList[0..1] programRuntimesList opposite session
	contains DataProductsListsContainer[0..1] dataProductsListContainer opposite invocatorSession
	contains ToolsList[0..1] toolsList opposite invocatorSession
}

/* -------------------------------------------------------------------------
 * Environment.
 * ------------------------------------------------------------------------- */
 class Environment extends Named, Described
 {	
   @GenModel(property="None")
 	container InvocatorSession invocatorSession opposite environment
 	
  	contains TypesList[0..1] typesList
	contains VariablesList[0..1] variablesList opposite environment
	contains ContextsList[0..1] contextsList opposite environment
		
  	@GenModel(notify="true")
	refers Context[1] activeContext		
 }

/* -------------------------------------------------------------------------
 * DataProducts.
 * ------------------------------------------------------------------------- */
 class DataProductsListsContainer extends Named, Described
 { 	 	
    @GenModel(property="None")
 	container InvocatorSession invocatorSession opposite dataProductsListContainer
 	contains DataProductsList[0..*] dataProductsList opposite dataProductsListsContainer 	
 }
 
 class DataProductsList extends Named, Described
 { 	
 	@GenModel(property="None")
 	container DataProductsListsContainer dataProductsListsContainer opposite dataProductsList
 
 	contains OperationCallResultsList [1] operationCallResultsList opposite dataProductsList
  	
    @GenModel(children="false", createChild="false", notify="false")
 	contains RecordingResultsList [0..1] recordingResultsList opposite dataProductsList
 
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (dataProductsListsContainer == null)
		{
			return null
		}
		else
		{
			return dataProductsListsContainer.invocatorSession
		}
	} 	 	
 }
 

/* -------------------------------------------------------------------------
 * ToolsList.
 * ------------------------------------------------------------------------- */
 class ToolsList extends Named, Described
 {
     @GenModel(property="None")
 	 container InvocatorSession invocatorSession opposite toolsList
 	 contains AbstractToolsListContainer[0..*] toolsListContainers opposite toolsList
 }
 
 abstract class AbstractToolsListContainer
 { 	
 	@GenModel(property="None")
 	container ToolsList toolsList opposite toolsListContainers
 }

/* -------------------------------------------------------------------------
 * Types.
 * ------------------------------------------------------------------------- */
 
 class TypesList
 {
	contains LocalTypesList[0..1] localTypes
	contains RegisteredTypesList[0..1] registeredTypes
 }
 
 class LocalTypesList
 {
 	@GenModel(children="true", createChild="true", property="None") 		
 	contains Type[0..*] types
 }
 
 class RegisteredTypesList
 { 	
 	@GenModel(children="true", createChild="false", property="None")
	refers derived transient readonly Type[0..*] types	 	 	
 }
 
 interface AbstractType
 {
 	 	
 }
 
 class Type extends Named, AbstractType
 {
 	@GenModel(notify="true")
 	contains TypeMember[0..*] members
 	
 	@GenModel(notify="true")
 	refers EClass[0..1] interfaceClass
 	
 	@GenModel(notify="true")
 	refers EClass[0..1] typeApiAdapterClass 	
 }
  
 /*
  * This class implements an adapter pattern that allows injection of specific behaviors
  * when actions are realized on {@link Type} instance. Developers may specialized certain
  * methods to provide custom implementation to address specific {@link Type} needs.
  */
 class TypeApiAdapter
 {
 	refers transient Environment[0..1] environment 	 	
 	refers transient EObject[0..1] instance
 	refers transient Type[0..1] elementType
 	
 	/*
 	 * Initializes and sets the adapter attributes.
 	 * @param environment Reference to the environment.
 	 * @param elementType Reference to the {@link Type}.
 	 * @param instance Reference to the object instance.
 	 */
	op void init(Environment environment, Type elementType, EObject instance)
	
	/*
	 * Applies the {@link Type} instance state data required to initialize the model.  
	 * {@link AbstractInitialization} must be specialized to address {@link TypeApiAdapter} needs.
	 * @param initializationData Reference to the data to apply.
	 */	
	op void apply(AbstractInitializationData initializationData)

	/*
	 * Create a new instance of initializationData.  {@link AbstractInitializationData} must be specialized 
	 * to address {@link TypeApiAdapter} needs.
	 * @return Reference to the data container instance.
	 */	
	op AbstractInitializationData createInitializationData()	
	
	/*
	 * Collects the {@link Type} instance state.  {@link AbstractInitializationData} must be specialized 
	 * to address {@link TypeApiAdapter} needs.
	 * @param data Reference to the data container.
	 */	
	op void collect(AbstractInitializationData data)	
		
	/*
	 * Creates and returns a result container. Normally this method only creates the container.  
	 * This method must be overwritten and synchronized with 
	 * {@link #createResult(OperationCall, long, Object, Exception)}.  
	 * @param operationCall Reference to the operation call.
	 * @return Reference to the new result.
	 */
	op OperationCallResult createResult(OperationCall operationCall)
	
	/*
	 * Creates, populates and returns a result container. This method invokes {@link #createResult(OperationCall)}.  
	 * Ensure super().{@link #createResult(OperationCall operationCall, long invocationTime, Object resultValue, Exception exception)} is called
	 * if this method is overwritten.  
	 * @param operationCall Reference to the operation call.
	 * @param invocationTime Time when the call was submitted.
	 * @param resultValue Value returned by the operation call.
	 * @exception Reference to the exception if one exception was raised during the invocation.
	 * @return Reference to the new result.
	 */
	op OperationCallResult createResult(OperationCall operationCall, long invocationTime, Object resultValue, Exception exception)
	
	/*
	 * Invokes the operation call and stores the result if required.
	 * @param instance Object onto which the operation is to be called.
	 * @param operationCall Reference to the operation call.
	 * @param saveResult If true then results will be saved in the {@link DataProductsList}.
	 * @return Reference to the result.
	 */		
	op OperationCallResult invoke(EObject instance, OperationCall operationCall, boolean saveResult)
	
	/*
	 * This method is called when the adapter is disposed. 
	 */		
	op void dispose()
 }

 
class TypeMember extends Named, AbstractType
{
	refers Type memberType
	contains TreeRootNode [0..1] typeFeatureRootNode
}

class TypeMemberReference
{		
 	@GenModel(notify="true")
	refers TypeMember [1] typeMember	
}

class TypeMemberReferenceListElement extends TypeMemberReference
{
	@GenModel(property="None")
	contains TypeMemberReferenceListElement [0..1] child opposite parent

	@GenModel(property="None")
	container TypeMemberReferenceListElement [0..1] parent opposite child
	
	@GenModel(property="None")
	derived boolean root get
	{
		return parent == null   	
	}
	
	@GenModel(property="None")
	refers derived TypeMemberReferenceListElement rootElement get
	{
		if (root) return this else parent.rootElement
	}
	
	@GenModel(property="None")
	refers derived TypeMemberReferenceListElement leafElement get
	{
		if (leaf) return this else child.leafElement
	}	
	
	@GenModel(property="None")
	derived boolean leaf get
	{
		return child == null
	}
	
	/*
	 * Returns the number of sub-segments.
	 * @return Number of segment under this element.
	 */
	derived volatile transient readonly int subSegmentsCount
}

class TypeMemberReferenceTreeElement extends TypeMemberReference
{
	@GenModel(property="None")
	contains TypeMemberReferenceTreeElement [0..*] child opposite parent

	@GenModel(property="None")
	container TypeMemberReferenceTreeElement [0..1] parent opposite child
	
	contains TreeRootNode [0..1] featureRootNode
	
	@GenModel(property="None")
	derived boolean root get
	{
		return parent == null   	
	}
	
	@GenModel(property="None")
	refers derived TypeMemberReferenceTreeElement rootElement get
	{
		if (root) return this else parent.rootElement
	}
		
	@GenModel(property="None")
	derived boolean leaf get
	{
		return child == null
	}
}

/* -------------------------------------------------------------------------
 * Variables.
 * ------------------------------------------------------------------------- */
 
/*
 * List of Variables
 */
class VariablesList
{	
    @GenModel(property="None")
	container Environment environment opposite variablesList
	contains Variable[0..*] variables opposite variablesList 
}

/*
 * Variable Definition
 */
class Variable extends Named
{
    @GenModel(property="None")
	container VariablesList variablesList opposite variables   
		
	refers Type[1] variableType
    
    @GenModel(children="false", notify="true", property="None")
	refers local readonly volatile transient derived Environment environment get
	{
		if (variablesList == null) return null else return variablesList.environment
	}
}

/* ------------------------------------------------------------------------- 
 * Contexts.
 * ------------------------------------------------------------------------- */
 
class ContextsList
{
	@GenModel(property="None")
 	container Environment environment opposite contextsList
 	
 	contains Context[0..*] contexts opposite contextsList
}

abstract class Context extends Named
{
	@GenModel(property="None")
	container ContextsList contextsList opposite contexts	
	contains VariableImplementationsList[0..1] variableImplementationsList

    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived Environment environment get
	{
		if (contextsList == null) return null else return contextsList.environment
	} 
		
	@GenModel(children="true")
	refers DataProductsList[1] dataProductsList
		
  	@GenModel(property="Readonly")
	Date instancesCreationDate
		
  	@GenModel(property="Readonly")		
	Date instancesDisposalDate 
	
	/*
	 * Indicates if the variables are instantiated (initialized)
	 */	 	 
	transient boolean variablesInstantiated = "false"
}

class BasicContext extends Context
{
	
}

/* ------------------------------------------------------------------------- 
 * Variables & Type Implementations.
 * ------------------------------------------------------------------------- */
 
class VariableImplementationsList
{	
	contains VariableImplementation [0..*] variableImplementations opposite variableImplementationsList

	op VariableImplementation getVariableImplementation(Variable variable)
	
	/*
	 * Searches a {@link VariableImplementation} based on the variable name.
	 * @param name Search criteria.
	 * @return Reference to the {@link VariableImplementation} or null if not found.
	 */		
	op VariableImplementation getVariableImplementation(String name)
}

abstract class AbstractInitializationData
{	

}

class InitializationData extends AbstractInitializationData
{

}

abstract class AbstractTypeImplementation
{
	contains TypeMemberImplementation[0..*] typeMemberImplementations
	
	/*
	 * Searches a {@link TypeMemberImplementation} based on the type member name.
	 * @param name Search criteria.
	 * @return Reference to the {@link TypeMemberImplementation} or null if not found.
	 */		
	op TypeMemberImplementation getTypeMemberImplementation(String name)
		
	/*
	 * Search the {@link TypeMemberImplementation} that refers to the specified {@link TypeMember}.
	 * @param typeMember {@link TypeMember} Search Key. 
	 * @return Reference to the {@link TypeMemberImplementation} or null if the specified {@link TypeMember} was not found.
	 */
	op TypeMemberImplementation getTypeMemberImplementation(TypeMember typeMember)

    @GenModel(notify="true")
	refers EClass [0..1] implementationClass
		
	@GenModel(children="true", notify="true")
	contains AbstractInitializationData [0..1] abstractInitializationData
	
	@GenModel(children="true", notify="true")
	refers transient EObject [0..1] instance
		
	@GenModel(children="true", notify="true")
	refers transient TypeApiAdapter [0..1] adapterInstance
	
	refers transient readonly derived volatile Type handlingType
}

class VariableImplementation extends AbstractTypeImplementation
{
	@GenModel(property="None")
	container VariableImplementationsList variableImplementationsList opposite variableImplementations
	
	refers Variable [1] variable	
 }

class TypeMemberImplementation extends AbstractTypeImplementation
{
	refers TypeMember[1] typeMember	
}
 
/* -------------------------------------------------------------------------  
 * EValues
 * ------------------------------------------------------------------------- */

class ValuesList
{
	contains Value[0..*] values
}

class Value extends Named
{
	contains EObject[1] value 
}

/* ------------------------------------------------------------------------- 
 * 
 * Programs.
 * 
 * ------------------------------------------------------------------------- */         
class ProgramsList
{	
	@GenModel(property="None")
	container InvocatorSession invocatorSession opposite programsList	
	contains ProgramsGroup[0..*] programsGroups opposite programsList
}

class ProgramsGroup extends Named, Described{
	@GenModel(property="None")
	container ProgramsList programsList opposite programsGroups 

    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (programsList == null) return null else return programsList.invocatorSession
	}	
	contains Program[0..*] programs opposite programsGroup
}


/* -------------------------------------------------------------------------
 * Program.
 * ------------------------------------------------------------------------- */
abstract class Program extends Named, Described
{
 	@GenModel(property="None")
	container ProgramsGroup programsGroup opposite programs
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (programsGroup == null) return null else return programsGroup.invocatorSession
	}
}

abstract class ScriptBasedProgram extends Program{	
} 

abstract class TriggeredBasedProgram extends Program{	
}

interface OperationCallContainer
{
	contains OperationCall[0..*] operationCalls opposite operationCallContainer
	
	op InvocatorSession getInvocatorSession()
}

class OperationCallsList extends ScriptBasedProgram, OperationCallContainer
{
	
}

/*
 * Reference to the EMF feature of a specific variable and chain of {@link TypeMember} 
 */
class VariableFeatureReference extends Named
{
	/*
	 * Reference to the variable.
	 */
	@GenModel(notify="true")
	refers Variable[1] variable 	

	/* 
	 * Reference to the {@link TypeMember}
	 */
	@GenModel(property="None")
	contains TypeMemberReferenceListElement[0..1] typeMemberReferenceListElement
	
	/* 
	 * Reference to the EMF feature.
	 */
	contains ListRootNode[0..1] featureRoot
}
 
/* -------------------------------------------------------------------------
 * Operation Call.
 * ------------------------------------------------------------------------- */ 
class OperationCall extends VariableFeatureReference, Named, Described
{
    @GenModel(notify="true")
	refers EOperation[1] eOperation
	
    @GenModel(createChild="false")
	contains ArgumentsList[0..1] argumentsList opposite operationCall

    @GenModel(property="None")
	container OperationCallContainer operationCallContainer opposite operationCalls 
	
		
	@GenModel(property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (operationCallContainer == null)
		{
			return null
		}  
		else 
		{
			return operationCallContainer.invocatorSession
		}			
	}
		
	@GenModel(property="None")
	refers local readonly volatile transient derived Environment environment get
	{ 
		if (invocatorSession == null)
		{
			return null 
		}
		else
		{
			return invocatorSession.environment
		}
	}
}

class ArgumentsList
{
    @GenModel(property="None")
	container OperationCall operationCall opposite argumentsList
	
	contains Argument [0..*] arguments opposite argumentsList
	
	op List<?> getArgumentValues()
}

abstract class Argument
{	
	@GenModel(property="None")
	container ArgumentsList argumentsList opposite arguments
	
	op EParameter getEParameter()
	
	op Object getParameterValue()
	
	@GenModel(property="None")
	refers local readonly volatile transient derived OperationCall operationCall get
	{
		if (argumentsList == null)
		{
			return null
		} 
		else
		{
			return argumentsList.operationCall
		}
	} 		 	
}

abstract class EDataTypeArgument extends Argument
{
	@GenModel(notify="true")
	String value	
}

class BooleanEDataTypeArgument extends EDataTypeArgument{	
}

class NumericEDataTypeArgument extends EDataTypeArgument{	
}

class StringEDataTypeArgument extends EDataTypeArgument{	
}


class EEnumArgument extends Argument
{
	@GenModel(property="Editable")
	refers EEnumLiteral eEnumLiteral
	
	@GenModel(property="None", notify="true")
	refers EEnum eEnum 	
}

class EClassArgument extends Argument
{
    @GenModel(property="Editable")
	contains EObject value
}

/* ------------------------------------------------------------------------
 * 
 * Program Runtime
 * 
 * ------------------------------------------------------------------------ */
 
/* 
 * Program Runtime State Definitions. 
 */
enum ProgramRuntimeState{	
	NOT_INITIALIZED as "Not Initialized" = 0, 
	INITIALIZED as "Initialized" = 1,
	RUNNING as "Running" = 2,
	SUSPENDED as "Suspended" = 3,
	TERMINATED as "Terminated" = 4
	FAILED as "Failed" = 5
}

/*
 * This class is a container of {@link AbstractProgramRuntime}.
 */
class ProgramRuntimesList{
	
	/*
	 * Refers the session that contains the list.
	 */
	@GenModel(property="None", notify="true")
	container InvocatorSession session opposite programRuntimesList
	
	/*
	 * List that contains runtimes.
	 */
	contains AbstractProgramRuntime[0..*] programRuntimes
}

/*
 * This class provides the runtime context used while running a {@link Program}.
 */
abstract class AbstractProgramRuntime extends Named, Described
{
	/* Actual state of the runtime. */
	ProgramRuntimeState state = "Not Initialized"
	
	/* Refers the program to execute and monitor. */
	refers Program program
	
	/* 
	 * Initializes the runtime.
	 */
	op void init()
	
	/* 
	 * Clears and terminates the runtime.
	 */	
	op void terminate()
	
	/*
	 * Resumes the execution.
	 */
	op void resume()
	
	/*
	 * Suspends the execution.
	 */
	op void suspend()
		
	/*
	 * Steps into the next function/operation/program call at the currently executing piece of code. 
	 */
	op void stepInto()
	
	/*
	 * Steps over the next function/operation/program call at the currently executing piece of code. 
	 */	
	op void stepOver()
		
	/*
	 * Returns from a method/operation/program which has been stepped into. Even though we return from the method, 
	 * the remainder of the code inside the method will be executed normally.
	 */	
	op void stepReturn()
}


/*
 * This class provides the {@link AbstractProgramRuntime} for the {@link OperationCallResultsList}.
 */
class OperationCallsListProgramRuntime extends AbstractProgramRuntime{	
} 


/* ------------------------------------------------------------------------- 
 * Operation Call Results 
 * ------------------------------------------------------------------------- */
 
interface ResultsList extends Named, Described
{
    @GenModel(notify="true", createChild="false")
	contains AbstractResult[0..*] results opposite resultsList
				
	op InvocatorSession getInvocatorSession()	
}

class OperationCallResultsList extends ResultsList
{	
	@GenModel(property="None")
	container DataProductsList dataProductsList opposite operationCallResultsList
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (dataProductsList == null)
		{
			return null
		}
		else
		{
			return dataProductsList.invocatorSession
		}
	}
}

class RecordingResultsList extends ResultsList
{
	@GenModel(property="None")
	container DataProductsList dataProductsList opposite recordingResultsList
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get		
	{
		if (dataProductsList == null)
		{
			return null
		}
		else
		{
			return dataProductsList.invocatorSession
		}
	}
}

/*
 * A result that contains a values and its about the time and context
 */
abstract class AbstractResult extends Timed, Described
{
	@GenModel(property="None")
	container ResultsList resultsList opposite results
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (resultsList == null)
		{
			return null
		}
		else
		{
			return resultsList.invocatorSession
		}
	}	
	
	/*
	 * The context in which the result was produced.
	 */
	refers Context[1] context
	
	/*
	 * The value itself.
	 */
	contains AbstractResultValue[0..1] resultValue opposite result
}

/*
 * A value stored in an AbstractResult.
 */
abstract class AbstractResultValue
{
	container AbstractResult result opposite resultValue
}

/*
 * The result associated with the invocation of an OperationCall.
 */
class OperationCallResult extends AbstractResult, OperationCallContainer
{
	/*
	 * In this case, operationCall refers to the OperationCall stored in the OperationCallContainer. 
	 */
	@GenModel(property="None", children="false", notify="true")
	refers local readonly volatile transient derived OperationCall operationCall get
	{
		if (operationCalls.size == 0)
		{
			return null
		}
		else
		{
			return operationCalls.get(0)
		}
	}		
		
	@GenModel(children="false", createChild="false", property="Readonly")
	contains ExceptionContainer[0..1] exceptionContainer
}
 
class ExceptionContainer
{
 	@GenModel(property="Readonly")
	Throwable exception
}

/*
 * A value of a basic type (i.e. not an EObject).
 */
class AttributeResultValue extends AbstractResultValue
{    
    /**
     * Reference to a container to the value.  This is required to permit
     * the value to be seen as a property and to allow override getText().
     * This permits as well to keep default implementation of 
     * serialization/deserialization of the data type EJavaObject defined
     * in EMF. 
     */
     @GenModel(property="Readonly", children="true", createChild="false")
	 contains AttributeValue value
}

class AttributeValue
{
	@GenModel(property="Readonly")
	Object object
}

/*
 * A value of a EMF type (i.e. an EObject).
 */
class ReferenceResultValue extends AbstractResultValue
{
 	@GenModel(createChild="true", property="Readonly")
	contains EObject value
}

/* -------------------------------------------------------------------------
 * RecordersListContainer
 * ------------------------------------------------------------------------- */ 
class RecordingToolsContainer extends AbstractToolsListContainer
{
	contains AbstractRecorder[1] recorder opposite recordingToolsContainer
 	contains AbstractPlayer[1] player opposite recordingToolsContainer 	
 	contains ChannelsList[0..*] channelsLists opposite recordingToolsContainer
} 

class ChannelsList extends Named, Described
{
	contains AbstractChannel[0..*] channels opposite channelsList 
	container RecordingToolsContainer recordingToolsContainer opposite channelsLists
}

abstract class AbstractChannel extends Named, Described
{
	container ChannelsList channelsList opposite channels
}

/* -------------------------------------------------------------------------
 * Recorder
 * ------------------------------------------------------------------------- */ 
 
abstract class AbstractRecorder extends Named, Described
{
 	@GenModel(property="None")
	container RecordingToolsContainer recordingToolsContainer opposite recorder
}

/* -------------------------------------------------------------------------
 * Player
 * ------------------------------------------------------------------------- */ 
abstract class AbstractPlayer extends Named, Described
{	
	container RecordingToolsContainer recordingToolsContainer opposite player
}

/* -------------------------------------------------------------------------
 * Specialized Time Sources
 * ------------------------------------------------------------------------- */

class OperationCallResultsListTimeSource extends CollectionTimedTimeSource
{
	refers OperationCallResultsList opsCallList
}
 