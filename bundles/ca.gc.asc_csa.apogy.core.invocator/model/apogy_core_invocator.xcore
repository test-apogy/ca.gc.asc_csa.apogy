/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCoreInvocator",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  multipleEditorPages="false",
		  copyrightText="Canadian Space Agency / Agence spatiale canadienne 2012-2015 Copyrights (c)",
		  modelName="ApogyCoreInvocator",
		  fileExtensions="sym",
		  resource="XMI")
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.core.invocator/src-generated")
@GenModel(editDirectory="/ca.gc.asc_csa.apogy.core.invocator.edit/src-generated")
@GenModel(editorDirectory="/ca.gc.asc_csa.apogy.core.invocator.editor/src-generated")

package ca.gc.asc_csa.apogy.core.invocator

import ca.gc.asc_csa.apogy.common.emf.AbstractFeatureNode
import ca.gc.asc_csa.apogy.common.emf.CollectionTimedTimeSource
import ca.gc.asc_csa.apogy.common.emf.Described
import ca.gc.asc_csa.apogy.common.emf.Exception
import ca.gc.asc_csa.apogy.common.emf.List
import ca.gc.asc_csa.apogy.common.emf.ListRootNode
import ca.gc.asc_csa.apogy.common.emf.Named
import ca.gc.asc_csa.apogy.common.emf.Timed
import ca.gc.asc_csa.apogy.common.emf.TreeRootNode
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EEnum
import org.eclipse.emf.ecore.EEnumLiteral
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EOperation
import org.eclipse.emf.ecore.EParameter

class VariablesList
{	
    @GenModel(property="None")
	container Environment environment opposite variablesList
	contains Variable[0..*] variables opposite variablesList 
}

/*
 * Variable Definition
 */
class Variable extends Named
{
    @GenModel(property="None")
	container VariablesList variablesList opposite variables   
		
	refers Type[1] variableType
    
    @GenModel(children="false", notify="true", property="None")
	refers local readonly volatile transient derived Environment environment get
	{
		if (variablesList == null) return null else return variablesList.environment
	}
}

/* ------------------------------------------------------------------------- 
 * Contexts.
 * ------------------------------------------------------------------------- */
 
class ContextsList
{
	@GenModel(property="None")
 	container Environment environment opposite contextsList
 	
 	contains Context[0..*] contexts opposite contextsList
}

abstract class Context extends Named
{
	@GenModel(property="None")
	container ContextsList contextsList opposite contexts	
	contains VariableImplementationsList[0..1] variableImplementationsList

    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived Environment environment get
	{
		if (contextsList == null) return null else return contextsList.environment
	} 
		
	@GenModel(children="true")
	refers DataProductsList[1] dataProductsList
		
  	@GenModel(property="Readonly")
	Date instancesCreationDate
		
  	@GenModel(property="Readonly")		
	Date instancesDisposalDate 
}

class BasicContext extends Context
{
	
}

/* ------------------------------------------------------------------------- 
 * Variables & Type Implementations.
 * ------------------------------------------------------------------------- */
 
class VariableImplementationsList
{	
	contains VariableImplementation [0..*] variableImplementations opposite variableImplementationsList

	op VariableImplementation getVariableImplementation(Variable variable)
	
	/*
	 * Searches a {@link VariableImplementation} based on the variable name.
	 * @param name Search criteria.
	 * @return Reference to the {@link VariableImplementation} or null if not found.
	 */		
	op VariableImplementation getVariableImplementation(String name)
}

abstract class AbstractInitializationData
{	

}

class InitializationData extends AbstractInitializationData
{

}

abstract class AbstractTypeImplementation
{
	contains TypeMemberImplementation[0..*] typeMemberImplementations
	
	/*
	 * Searches a {@link TypeMemberImplementation} based on the type member name.
	 * @param name Search criteria.
	 * @return Reference to the {@link TypeMemberImplementation} or null if not found.
	 */		
	op TypeMemberImplementation getTypeMemberImplementation(String name)
		
	/*
	 * Search the {@link TypeMemberImplementation} that refers to the specified {@link TypeMember}.
	 * @param typeMember {@link TypeMember} Search Key. 
	 * @return Reference to the {@link TypeMemberImplementation} or null if the specified {@link TypeMember} was not found.
	 */
	op TypeMemberImplementation getTypeMemberImplementation(TypeMember typeMember)

    @GenModel(notify="true")
	refers EClass [0..1] implementationClass
		
	@GenModel(children="true", notify="true")
	contains AbstractInitializationData [0..1] abstractInitializationData
	
	@GenModel(children="true", notify="true")
	refers transient EObject [0..1] instance
		
	@GenModel(children="true", notify="true")
	refers transient TypeApiAdapter [0..1] adapterInstance
	
	refers transient readonly derived volatile Type handlingType
}

class VariableImplementation extends AbstractTypeImplementation
{
	@GenModel(property="None")
	container VariableImplementationsList variableImplementationsList opposite variableImplementations
	
	refers Variable [1] variable	
 }

class TypeMemberImplementation extends AbstractTypeImplementation
{
	refers TypeMember[1] typeMember	
}
 
/* -------------------------------------------------------------------------  
 * EValues
 * ------------------------------------------------------------------------- */

class ValuesList
{
	contains Value[0..*] values
}

class Value extends Named
{
	contains EObject[1] value 
}

/* ------------------------------------------------------------------------- 
 * 
 * Programs.
 * 
 * ------------------------------------------------------------------------- */         
class ProgramsList
{	
	@GenModel(property="None")
	container InvocatorSession invocatorSession opposite programsList
	
	contains Program[0..*] programs opposite programsList
}


/* -------------------------------------------------------------------------
 * Program.
 * ------------------------------------------------------------------------- */
abstract class Program extends Named, Described
{
 	@GenModel(property="None")
	container ProgramsList programsList opposite programs
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (programsList == null) return null else return programsList.invocatorSession
	} 	
		
	/* 
	 * Contains values that could be used as parameter values in the operation 
	 * calls.
	 */
	contains ValuesList[0..1] valuesList
}

interface OperationCallContainer
{
	contains OperationCall[0..*] operationCalls opposite operationCallContainer
	
	op InvocatorSession getInvocatorSession()
}

class OperationCallsList extends Program, OperationCallContainer
{
	
}

/*
 * Reference to the EMF feature of a specific variable and chain of {@link TypeMember} 
 */
class VariableFeatureReference extends Named
{
	/*
	 * Reference to the variable.
	 */
	@GenModel(notify="true")
	refers Variable[1] variable 	

	/* 
	 * Reference to the {@link TypeMember}
	 */
	@GenModel(property="None")
	contains TypeMemberReferenceListElement[0..1] typeMemberReferenceListElement
	
	/* 
	 * Reference to the EMF feature.
	 */
	contains ListRootNode[0..1] featureRoot
}
 
/* -------------------------------------------------------------------------
 * Operation Call.
 * ------------------------------------------------------------------------- */ 
class OperationCall extends VariableFeatureReference, Named, Described
{
    @GenModel(notify="true")
	refers EOperation[1] eOperation
	
    @GenModel(createChild="false")
	contains ArgumentsList[0..1] argumentsList opposite operationCall

    @GenModel(property="None")
	container OperationCallContainer operationCallContainer opposite operationCalls 
	
		
	@GenModel(property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (operationCallContainer == null)
		{
			return null
		}  
		else 
		{
			return operationCallContainer.invocatorSession
		}			
	}
		
	@GenModel(property="None")
	refers local readonly volatile transient derived Environment environment get
	{ 
		if (invocatorSession == null)
		{
			return null 
		}
		else
		{
			return invocatorSession.environment
		}
	}
}

class ArgumentsList
{
    @GenModel(property="None")
	container OperationCall operationCall opposite argumentsList
	
	contains Argument [0..*] arguments opposite argumentsList
	
	op List<?> getArgumentValues()
}

abstract class Argument
{	
	@GenModel(property="None")
	container ArgumentsList argumentsList opposite arguments
	
	op EParameter getEParameter()
	
	op Object getParameterValue()
	
	@GenModel(property="None")
	refers local readonly volatile transient derived OperationCall operationCall get
	{
		if (argumentsList == null)
		{
			return null
		} 
		else
		{
			return argumentsList.operationCall
		}
	} 		 	
}

class EDataTypeArgument extends Argument
{
	@GenModel(notify="true")
	String value	
}

class EEnumArgument extends Argument
{
	@GenModel(property="Editable")
	refers EEnumLiteral eEnumLiteral
	
	@GenModel(property="None", notify="true")
	refers EEnum eEnum 	
}

class EClassArgument extends Argument
{
    @GenModel(property="Editable")
	contains EObject value
}

/* ------------------------------------------------------------------------- 
 * Operation Call Results 
 * ------------------------------------------------------------------------- */
 
interface ResultsList extends Named, Described
{
    @GenModel(notify="true", createChild="false")
	contains AbstractResult[0..*] results opposite resultsList
				
	op InvocatorSession getInvocatorSession()	
}

class OperationCallResultsList extends ResultsList
{	
	@GenModel(property="None")
	container DataProductsList dataProductsList opposite operationCallResultsList
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (dataProductsList == null)
		{
			return null
		}
		else
		{
			return dataProductsList.invocatorSession
		}
	}
}

class RecordingResultsList extends ResultsList
{
	@GenModel(property="None")
	container DataProductsList dataProductsList opposite recordingResultsList
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get		
	{
		if (dataProductsList == null)
		{
			return null
		}
		else
		{
			return dataProductsList.invocatorSession
		}
	}
}

/*
 * A result that contains a values and its about the time and context
 */
abstract class AbstractResult extends Timed, Described
{
	@GenModel(property="None")
	container ResultsList resultsList opposite results
	
    @GenModel(children="false", property="None")
	refers local readonly volatile transient derived InvocatorSession invocatorSession get
	{
		if (resultsList == null)
		{
			return null
		}
		else
		{
			return resultsList.invocatorSession
		}
	}	
	
	/*
	 * The context in which the result was produced.
	 */
	refers Context[1] context
	
	/*
	 * The value itself.
	 */
	contains AbstractResultValue[0..1] resultValue opposite result
}

/*
 * A value stored in an AbstractResult.
 */
abstract class AbstractResultValue
{
	container AbstractResult result opposite resultValue
}

/*
 * The result associated with the invocation of an OperationCall.
 */
class OperationCallResult extends AbstractResult, OperationCallContainer
{
	/*
	 * In this case, operationCall refers to the OperationCall stored in the OperationCallContainer. 
	 */
	@GenModel(property="None", children="false", notify="true")
	refers local readonly volatile transient derived OperationCall operationCall get
	{
		if (operationCalls.size == 0)
		{
			return null
		}
		else
		{
			return operationCalls.get(0)
		}
	}		
		
	@GenModel(children="false", createChild="false", property="Readonly")
	contains ExceptionContainer[0..1] exceptionContainer
}
 
class ExceptionContainer
{
 	@GenModel(property="Readonly")
	Throwable exception
}

/*
 * A value of a basic type (i.e. not an EObject).
 */
class AttributeResultValue extends AbstractResultValue
{    
    /**
     * Reference to a container to the value.  This is required to permit
     * the value to be seen as a property and to allow override getText().
     * This permits as well to keep default implementation of 
     * serialization/deserialization of the data type EJavaObject defined
     * in EMF. 
     */
     @GenModel(property="Readonly", children="true", createChild="false")
	 contains AttributeValue value
}

class AttributeValue
{
	@GenModel(property="Readonly")
	Object object
}

/*
 * A value of a EMF type (i.e. an EObject).
 */
class ReferenceResultValue extends AbstractResultValue
{
 	@GenModel(createChild="true", property="Readonly")
	contains EObject value
}

/* -------------------------------------------------------------------------
 * WatchesListsContainer
 * ------------------------------------------------------------------------- */ 

class WatchesListsContainer extends AbstractToolsListContainer
{
	@GenModel(property="None") 
	contains WatchesList [0..*] watches opposite watchesListsContainer	
} 


/* -------------------------------------------------------------------------
 * WatchesList
 * ------------------------------------------------------------------------- */ 

class WatchesList extends Named, Described
{		
	container WatchesListsContainer watchesListsContainer opposite watches
	
	contains Watch[0..*] watches opposite watchesList	
}


/* -------------------------------------------------------------------------
 * Watch
 * ------------------------------------------------------------------------- */ 
 
class Watch extends Named, Described
{
 	@GenModel(property="None")
	container WatchesList watchesList opposite watches
	
	@GenModel(notify="true")
	refers Variable[1] variable

	contains TypeMemberReferenceTreeElement[0..1] typeMemberReferenceTreeElement

	contains TreeRootNode[0..1] treeRootNode
}

/* -------------------------------------------------------------------------
 * WatchFeatureNodeAdapter
 * ------------------------------------------------------------------------- */ 

 class WatchFeatureNodeAdapter
 {
 	/*
 	 * The object onto which to apply the WatchFeatureNodeAdapter.
 	 */
 	refers EObject sourceObject
 	
 	/*
 	 * The FeatureNode defining which feature to monitor.
 	 */
 	refers AbstractFeatureNode featureNode
 	
 	/*
 	 * The current value of the monitored feature.
 	 */
 	Object currentValue 
 	
	/*
	 * Tells whether or not the featureNode is currently resolved.
	 */
 	boolean resolved = "false"
 }


/* -------------------------------------------------------------------------
 * DisplaysListsContainer
 * ------------------------------------------------------------------------- */ 

class DisplaysListsContainer extends AbstractToolsListContainer
{
 	@GenModel(property="None")   
	contains DisplaysList [0..*] displays opposite displaysListsContainer	
} 

/* -------------------------------------------------------------------------
 * DisplaysList
 * ------------------------------------------------------------------------- */ 

class DisplaysList extends Named, Described
{			
 	@GenModel(property="None")
	container DisplaysListsContainer displaysListsContainer opposite displays 
	
	contains AbstractDisplay[0..*] displays opposite displaysList
}


/* -------------------------------------------------------------------------
 * Display
 * ------------------------------------------------------------------------- */ 
 
abstract class AbstractDisplay extends Described
{
	@GenModel(property="None")
	container DisplaysList displaysList opposite displays
}

/* -------------------------------------------------------------------------
 * RecordersListContainer
 * ------------------------------------------------------------------------- */ 
class RecordingToolsContainer extends AbstractToolsListContainer
{
	contains AbstractRecorder[1] recorder opposite recordingToolsContainer
 	contains AbstractPlayer[1] player opposite recordingToolsContainer 	
 	contains ChannelsList[0..*] channelsLists opposite recordingToolsContainer
} 

class ChannelsList extends Named, Described
{
	contains AbstractChannel[0..*] channels opposite channelsList 
	container RecordingToolsContainer recordingToolsContainer opposite channelsLists
}

abstract class AbstractChannel extends Named, Described
{
	container ChannelsList channelsList opposite channels
}

/* -------------------------------------------------------------------------
 * Recorder
 * ------------------------------------------------------------------------- */ 
 
abstract class AbstractRecorder extends Named, Described
{
 	@GenModel(property="None")
	container RecordingToolsContainer recordingToolsContainer opposite recorder
}

/* -------------------------------------------------------------------------
 * Player
 * ------------------------------------------------------------------------- */ 
abstract class AbstractPlayer extends Named, Described
{	
	container RecordingToolsContainer recordingToolsContainer opposite player
}

/* -------------------------------------------------------------------------
 * Specialized Time Sources
 * ------------------------------------------------------------------------- */

class OperationCallResultsListTimeSource extends CollectionTimedTimeSource
{
	refers OperationCallResultsList opsCallList
}
 