/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="ApogyCommonConverters",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  operationReflection="true",
		  copyrightText="Agence spatiale canadienne / Canadian Space Agency 2015 Copyrights (c)",
		  modelName="ApogyCommonConverters") 
@GenModel(modelDirectory="/ca.gc.asc_csa.apogy.common.converters/src-generated")

package ca.gc.asc_csa.apogy.common.converters

import ca.gc.asc_csa.apogy.common.converters.graphs.ConverterEdge

type List<E> wraps java.util.List
type SimpleDirectedWeightedGraph<V, E> wraps org.jgrapht.graph.SimpleDirectedWeightedGraph
type Exception wraps java.lang.Exception
type IConverter wraps ca.gc.asc_csa.apogy.common.converters.IConverter

/*
 * A utility class to perform a variety of common functions
 */
class ApogyCommonConvertersFacade
{	
	/*
	 * Converts an Object to an object of type targetType
	 * @param input The input object type.
	 * @param targetType The targeted output type required.
	 * @return The object of the targeted type, or null if no conversion was found. 
	 */
	op Object ^convert(Object input, Class<?> targetType)
	
	/*
	 * Return the list of registered converters.
	 * @return The list of converters.
	 */
	op List<IConverter> getAllRegisteredConverters()
	
	/*
	 * Returns the SimpleDirectedWeightedGraph representing the converters.
	 * @return The SimpleDirectedWeightedGraph where vertex are input/output types and edges contain converters.
	 */
	op SimpleDirectedWeightedGraph<Class<?>, ConverterEdge> getGraph()
}