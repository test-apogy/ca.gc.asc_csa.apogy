@GenModel(prefix="Pathplanners",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  copyrightText="Agence spatiale canadienne / Canadian Space Agency 2015 Copyrights (c)",
		  modelName="Pathplanners")
@GenModel(modelDirectory="/org.eclipse.symphony.addons.mobility.pathplanners/src-generated")
@GenModel(editDirectory="/org.eclipse.symphony.addons.mobility.pathplanners.edit/src-generated")

package org.eclipse.symphony.addons.mobility.pathplanners

import org.eclipse.symphony.common.processors.Processor
import org.eclipse.symphony.common.geometry.data3d.CartesianCoordinatesSet
import org.eclipse.symphony.addons.geometry.paths.WayPointPath
import org.eclipse.symphony.common.processors.Exception
import org.eclipse.symphony.common.geometry.data3d.CartesianPolygon
import org.eclipse.symphony.common.geometry.data3d.CartesianPositionCoordinates
import org.eclipse.symphony.common.geometry.data.Mesh
import org.eclipse.symphony.common.topology.Node
import org.eclipse.symphony.common.geometry.data.CoordinatesSamplingShape
import org.eclipse.symphony.common.geometry.data.PolygonSamplingShape
import org.eclipse.symphony.common.geometry.data3d.CartesianTriangle
import org.eclipse.symphony.common.topology.GroupNode

/**
 * A path planner that produces a WayPoinPath.
 */
class WayPointPathPlanner extends Processor<CartesianCoordinatesSet, WayPointPath>
{	
	op WayPointPath plan(CartesianPositionCoordinates currentPosition, CartesianPositionCoordinates destinationPosition) throws Exception
	
	refers transient CartesianPositionCoordinates currentPosition
	refers transient CartesianPositionCoordinates currentDestination
}

/**
 * A path planner that produces a WayPoinPath based on a triangular mesh.
 */
class MeshWayPointPathPlanner <T extends CartesianPolygon> extends WayPointPathPlanner
{
	refers transient Mesh<CartesianPositionCoordinates, CartesianPolygon> mesh
}

/**
 * Represent a zone to be excluded from trajectory generated by path planners that 
 * support exclusion zones.
 */
abstract class ExclusionZone extends Node
{		
	op boolean isInside(CartesianPositionCoordinates point)
	
	op boolean intersects(CartesianPositionCoordinates from, CartesianPositionCoordinates to)
}

/**
 * Represent an exclusion zone defined as a circle. 
 */
class CircularExclusionZone extends ExclusionZone, CoordinatesSamplingShape<CartesianPositionCoordinates>, PolygonSamplingShape<CartesianPositionCoordinates, CartesianTriangle>
{
	double radius
	boolean invertSamplingShape
}

class PathPlannersFacade
{
	op CircularExclusionZone createCircularExclusionZone(double radius, GroupNode parent)
}