/**
 * Agence spatiale canadienne / Canadian Space Agency 2012 Copyrights (c)
 */
package org.eclipse.symphony.core.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.symphony.common.topology.AggregateContentNode;
import org.eclipse.symphony.common.topology.AggregateGroupNode;
import org.eclipse.symphony.common.topology.ContentNode;
import org.eclipse.symphony.common.topology.Symphony__CommonTopologyPackage;
import org.eclipse.symphony.common.topology.bindings.EnumerationCase;
import org.eclipse.symphony.common.topology.bindings.Symphony__CommonTopologyBindingsPackage;
import org.eclipse.symphony.common.topology.bindings.util.Symphony__CommonTopologyBindingsSwitch;
import org.eclipse.symphony.common.topology.util.Symphony__CommonTopologySwitch;
import org.eclipse.symphony.core.Symphony__CoreFactory;
import org.eclipse.symphony.core.Symphony__CorePackage;
import org.eclipse.symphony.core.invocator.AbstractTypeImplementation;
import org.eclipse.symphony.core.invocator.InvocatorSession;
import org.eclipse.symphony.core.invocator.LocalTypesList;
import org.eclipse.symphony.core.invocator.Symphony__CoreInvocatorPackage;
import org.eclipse.symphony.core.invocator.util.Symphony__CoreInvocatorSwitch;
import org.eclipse.symphony.core.util.Symphony__CoreAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class Symphony__CoreItemProviderAdapterFactory extends
		Symphony__CoreAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(Symphony__CoreEditPlugin.INSTANCE, Symphony__CorePackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public Symphony__CoreItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.Symphony__CoreFacade} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Symphony__CoreFacadeItemProvider symphony__CoreFacadeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.Symphony__CoreFacade}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymphony__CoreFacadeAdapter() {
		if (symphony__CoreFacadeItemProvider == null) {
			symphony__CoreFacadeItemProvider = new Symphony__CoreFacadeItemProvider(this);
		}

		return symphony__CoreFacadeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.SymphonyEnvironment} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SymphonyEnvironmentItemProvider symphonyEnvironmentItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.symphony.core.SymphonyEnvironment}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSymphonyEnvironmentAdapter() {
		if (symphonyEnvironmentItemProvider == null) {
			symphonyEnvironmentItemProvider = new SymphonyEnvironmentItemProvider(this);
		}

		return symphonyEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.TimeSourcesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeSourcesListItemProvider timeSourcesListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.TimeSourcesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeSourcesListAdapter() {
		if (timeSourcesListItemProvider == null) {
			timeSourcesListItemProvider = new TimeSourcesListItemProvider(this);
		}

		return timeSourcesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.SymphonyTopology} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SymphonyTopologyItemProvider symphonyTopologyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.SymphonyTopology}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymphonyTopologyAdapter() {
		if (symphonyTopologyItemProvider == null) {
			symphonyTopologyItemProvider = new SymphonyTopologyItemProvider(this);
		}

		return symphonyTopologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.SymphonySystem} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected SymphonySystemItemProvider symphonySystemItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.SymphonySystem}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymphonySystemAdapter() {
		if (symphonySystemItemProvider == null) {
			symphonySystemItemProvider = new SymphonySystemItemProvider(this);
		}

		return symphonySystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.SymphonySystemApiAdapter} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SymphonySystemApiAdapterItemProvider symphonySystemApiAdapterItemProvider;

  /**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.SymphonySystemApiAdapter}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSymphonySystemApiAdapterAdapter()
  {
		if (symphonySystemApiAdapterItemProvider == null) {
			symphonySystemApiAdapterItemProvider = new SymphonySystemApiAdapterItemProvider(this);
		}

		return symphonySystemApiAdapterItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.ConnectionPointsList} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ConnectionPointsListItemProvider connectionPointsListItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.symphony.core.ConnectionPointsList}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createConnectionPointsListAdapter() {
		if (connectionPointsListItemProvider == null) {
			connectionPointsListItemProvider = new ConnectionPointsListItemProvider(this);
		}

		return connectionPointsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.ConnectionPoint} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ConnectionPointItemProvider connectionPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.ConnectionPoint}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionPointAdapter() {
		if (connectionPointItemProvider == null) {
			connectionPointItemProvider = new ConnectionPointItemProvider(this);
		}

		return connectionPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.AssemblyLink} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AssemblyLinkItemProvider assemblyLinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.AssemblyLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyLinkAdapter() {
		if (assemblyLinkItemProvider == null) {
			assemblyLinkItemProvider = new AssemblyLinkItemProvider(this);
		}

		return assemblyLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.AssemblyLinksList} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected AssemblyLinksListItemProvider assemblyLinksListItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.symphony.core.AssemblyLinksList}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createAssemblyLinksListAdapter() {
		if (assemblyLinksListItemProvider == null) {
			assemblyLinksListItemProvider = new AssemblyLinksListItemProvider(this);
		}

		return assemblyLinksListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.PoseProvider} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected PoseProviderItemProvider poseProviderItemProvider;

  /**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.PoseProvider}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createPoseProviderAdapter()
  {
		if (poseProviderItemProvider == null) {
			poseProviderItemProvider = new PoseProviderItemProvider(this);
		}

		return poseProviderItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.AbsolutePoseProvider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbsolutePoseProviderItemProvider absolutePoseProviderItemProvider;

		/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.AbsolutePoseProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbsolutePoseProviderAdapter() {
		if (absolutePoseProviderItemProvider == null) {
			absolutePoseProviderItemProvider = new AbsolutePoseProviderItemProvider(this);
		}

		return absolutePoseProviderItemProvider;
	}

		/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.SymphonyInitializationData} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected SymphonyInitializationDataItemProvider symphonyInitializationDataItemProvider;

	/**
	 * This creates an adapter for a
	 * {@link org.eclipse.symphony.core.SymphonyInitializationData}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createSymphonyInitializationDataAdapter() {
		if (symphonyInitializationDataItemProvider == null) {
			symphonyInitializationDataItemProvider = new SymphonyInitializationDataItemProvider(this);
		}

		return symphonyInitializationDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.WorksitesList} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected WorksitesListItemProvider worksitesListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.WorksitesList}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorksitesListAdapter() {
		if (worksitesListItemProvider == null) {
			worksitesListItemProvider = new WorksitesListItemProvider(this);
		}

		return worksitesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.OrbitModelsList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrbitModelsListItemProvider orbitModelsListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.OrbitModelsList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrbitModelsListAdapter() {
		if (orbitModelsListItemProvider == null) {
			orbitModelsListItemProvider = new OrbitModelsListItemProvider(this);
		}

		return orbitModelsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.Positioned} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PositionedItemProvider positionedItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.Positioned}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionedAdapter() {
		if (positionedItemProvider == null) {
			positionedItemProvider = new PositionedItemProvider(this);
		}

		return positionedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.TopologyRoot} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TopologyRootItemProvider topologyRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.TopologyRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopologyRootAdapter() {
		if (topologyRootItemProvider == null) {
			topologyRootItemProvider = new TopologyRootItemProvider(this);
		}

		return topologyRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.FeatureOfInterestList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureOfInterestListItemProvider featureOfInterestListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.FeatureOfInterestList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureOfInterestListAdapter() {
		if (featureOfInterestListItemProvider == null) {
			featureOfInterestListItemProvider = new FeatureOfInterestListItemProvider(this);
		}

		return featureOfInterestListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.FeatureOfInterest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureOfInterestItemProvider featureOfInterestItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.FeatureOfInterest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureOfInterestAdapter() {
		if (featureOfInterestItemProvider == null) {
			featureOfInterestItemProvider = new FeatureOfInterestItemProvider(this);
		}

		return featureOfInterestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.PositionedResult} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PositionedResultItemProvider positionedResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.PositionedResult}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPositionedResultAdapter() {
		if (positionedResultItemProvider == null) {
			positionedResultItemProvider = new PositionedResultItemProvider(this);
		}

		return positionedResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.OperationCallPositionedResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationCallPositionedResultItemProvider operationCallPositionedResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.OperationCallPositionedResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationCallPositionedResultAdapter() {
		if (operationCallPositionedResultItemProvider == null) {
			operationCallPositionedResultItemProvider = new OperationCallPositionedResultItemProvider(this);
		}

		return operationCallPositionedResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.UserDefinedResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDefinedResultItemProvider userDefinedResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.UserDefinedResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDefinedResultAdapter() {
		if (userDefinedResultItemProvider == null) {
			userDefinedResultItemProvider = new UserDefinedResultItemProvider(this);
		}

		return userDefinedResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.ResultNode} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResultNodeItemProvider resultNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.ResultNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultNodeAdapter() {
		if (resultNodeItemProvider == null) {
			resultNodeItemProvider = new ResultNodeItemProvider(this);
		}

		return resultNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.eclipse.symphony.core.ResultsListNode} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ResultsListNodeItemProvider resultsListNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.ResultsListNode}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultsListNodeAdapter() {
		if (resultsListNodeItemProvider == null) {
			resultsListNodeItemProvider = new ResultsListNodeItemProvider(this);
		}

		return resultsListNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.FeatureOfInterestNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureOfInterestNodeItemProvider featureOfInterestNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.FeatureOfInterestNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureOfInterestNodeAdapter() {
		if (featureOfInterestNodeItemProvider == null) {
			featureOfInterestNodeItemProvider = new FeatureOfInterestNodeItemProvider(this);
		}

		return featureOfInterestNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.symphony.core.FeatureOfInterestListNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureOfInterestListNodeItemProvider featureOfInterestListNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.symphony.core.FeatureOfInterestListNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureOfInterestListNodeAdapter() {
		if (featureOfInterestListNodeItemProvider == null) {
			featureOfInterestListNodeItemProvider = new FeatureOfInterestListNodeItemProvider(this);
		}

		return featureOfInterestListNodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object,
			EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (symphony__CoreFacadeItemProvider != null) symphony__CoreFacadeItemProvider.dispose();
		if (symphonyEnvironmentItemProvider != null) symphonyEnvironmentItemProvider.dispose();
		if (timeSourcesListItemProvider != null) timeSourcesListItemProvider.dispose();
		if (symphonyTopologyItemProvider != null) symphonyTopologyItemProvider.dispose();
		if (symphonySystemItemProvider != null) symphonySystemItemProvider.dispose();
		if (symphonySystemApiAdapterItemProvider != null) symphonySystemApiAdapterItemProvider.dispose();
		if (connectionPointsListItemProvider != null) connectionPointsListItemProvider.dispose();
		if (connectionPointItemProvider != null) connectionPointItemProvider.dispose();
		if (assemblyLinkItemProvider != null) assemblyLinkItemProvider.dispose();
		if (assemblyLinksListItemProvider != null) assemblyLinksListItemProvider.dispose();
		if (poseProviderItemProvider != null) poseProviderItemProvider.dispose();
		if (absolutePoseProviderItemProvider != null) absolutePoseProviderItemProvider.dispose();
		if (symphonyInitializationDataItemProvider != null) symphonyInitializationDataItemProvider.dispose();
		if (worksitesListItemProvider != null) worksitesListItemProvider.dispose();
		if (orbitModelsListItemProvider != null) orbitModelsListItemProvider.dispose();
		if (positionedItemProvider != null) positionedItemProvider.dispose();
		if (featureOfInterestItemProvider != null) featureOfInterestItemProvider.dispose();
		if (featureOfInterestListItemProvider != null) featureOfInterestListItemProvider.dispose();
		if (topologyRootItemProvider != null) topologyRootItemProvider.dispose();
		if (positionedResultItemProvider != null) positionedResultItemProvider.dispose();
		if (operationCallPositionedResultItemProvider != null) operationCallPositionedResultItemProvider.dispose();
		if (userDefinedResultItemProvider != null) userDefinedResultItemProvider.dispose();
		if (resultNodeItemProvider != null) resultNodeItemProvider.dispose();
		if (resultsListNodeItemProvider != null) resultsListNodeItemProvider.dispose();
		if (featureOfInterestNodeItemProvider != null) featureOfInterestNodeItemProvider.dispose();
		if (featureOfInterestListNodeItemProvider != null) featureOfInterestListNodeItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link Symphony__CoreInvocatorPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CoreInvocatorChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CoreInvocatorSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseInvocatorSession(InvocatorSession object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreInvocatorPackage.Literals.INVOCATOR_SESSION__ENVIRONMENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyEnvironment()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseLocalTypesList(LocalTypesList object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreInvocatorPackage.Literals.LOCAL_TYPES_LIST__TYPES,
						 Symphony__CoreFactory.eINSTANCE.createSymphonySystem()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseAbstractTypeImplementation(AbstractTypeImplementation object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CoreInvocatorPackage.Literals.ABSTRACT_TYPE_IMPLEMENTATION__ABSTRACT_INITIALIZATION_DATA,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyInitializationData()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__CoreEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link Symphony__CommonTopologyPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CommonTopologyChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CommonTopologySwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <T> Object caseContentNode(ContentNode<T> object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphony__CoreFacade()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyEnvironment()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createTimeSourcesList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyTopology()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonySystem()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonySystemApiAdapter()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createConnectionPointsList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createConnectionPoint()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createAssemblyLink()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createAssemblyLinksList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createPoseProvider()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createAbsolutePoseProvider()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyInitializationData()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createWorksitesList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createOrbitModelsList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createPositioned()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createTopologyRoot()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createPositionedResult()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createOperationCallPositionedResult()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createUserDefinedResult()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createResultNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createResultsListNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.CONTENT_NODE__CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestListNode()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <T> Object caseAggregateContentNode(AggregateContentNode<T> object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphony__CoreFacade()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyEnvironment()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createTimeSourcesList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyTopology()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonySystem()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonySystemApiAdapter()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createConnectionPointsList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createConnectionPoint()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createAssemblyLink()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createAssemblyLinksList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createPoseProvider()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createAbsolutePoseProvider()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createSymphonyInitializationData()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createWorksitesList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createOrbitModelsList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createPositioned()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterest()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestList()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createTopologyRoot()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createPositionedResult()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createOperationCallPositionedResult()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createUserDefinedResult()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createResultNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createResultsListNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_CONTENT_NODE__AGGREGATE_CONTENT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestListNode()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseAggregateGroupNode(AggregateGroupNode object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_GROUP_NODE__AGGREGATED_CHILDREN,
						 Symphony__CoreFactory.eINSTANCE.createResultNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_GROUP_NODE__AGGREGATED_CHILDREN,
						 Symphony__CoreFactory.eINSTANCE.createResultsListNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_GROUP_NODE__AGGREGATED_CHILDREN,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyPackage.Literals.AGGREGATE_GROUP_NODE__AGGREGATED_CHILDREN,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestListNode()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__CoreEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link Symphony__CommonTopologyBindingsPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Symphony__CommonTopologyBindingsChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends Symphony__CommonTopologyBindingsSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseEnumerationCase(EnumerationCase object) {
				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyBindingsPackage.Literals.ENUMERATION_CASE__TOPOLOGY_ROOT,
						 Symphony__CoreFactory.eINSTANCE.createResultNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyBindingsPackage.Literals.ENUMERATION_CASE__TOPOLOGY_ROOT,
						 Symphony__CoreFactory.eINSTANCE.createResultsListNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyBindingsPackage.Literals.ENUMERATION_CASE__TOPOLOGY_ROOT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestNode()));

				newChildDescriptors.add
					(createChildParameter
						(Symphony__CommonTopologyBindingsPackage.Literals.ENUMERATION_CASE__TOPOLOGY_ROOT,
						 Symphony__CoreFactory.eINSTANCE.createFeatureOfInterestListNode()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return Symphony__CoreEditPlugin.INSTANCE;
		}
	}

}
