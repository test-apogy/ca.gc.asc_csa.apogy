=Using Symphony=

==Eclipse Basics==

===Workspace===

* Workspace:
** Working environment of Eclipse;
** Contains '''Project'''s;
** Mapped to a folder

* Project:
** Groups together folder and files;
** Mapped to a sub-folder of the ''Workspace'';

===Preferences===

* Used to persist settings between sessions;
* Include UI settings, default values for various elements, data path, etc.

===Selection Providers & Listeners===

* '''Selection Provider''':
** UI component fires a selection upon user action;

* '''Selection Listener''':
** UI component intercepts a selection and reacts to it;

===Views===

* A window managed by the main window;
* Can be detached;
* Most are singleton;
* Most Symphony views are ''Selection Listeners''

====Project Explorer View====

* Is a singleton;
* Displays the content of the workspace;
* Is a ''Selection Provider''

====Properties View====

* Displays and edits the selection's attributes;
* It is a ''Selection Listener'';
* Multiple tabbed;

===Editors===

* Provides editing of resources;
* Specific for types of resource;
* Can be detached;
* Most are '''Selection Providers''';
* Most support ''Undo/Redo'';
* Have an * when the resource is modified;

===Menu Contributions===

* Specific actions(s) available on a user-selected element;
* Made available through a pull down;
* Action(s) available are selection dependent;

==Symphony Concepts==

===Session & Environment===

====Session====

* Resource that Symphony is centered around;
* Is the container for all Symphony session elements;

====Symphony Environment====

* Contains the definitions of the ''Worksite'', ''Time Sources'' and the registered ''Symphony Systems'';
* Defines what you have to work with in a specific deployment;

===Worksites===

* Defines the area that you are operating in;
* Include a priori information about the area (e.g. DEM, orbital imagery, etc.);
* Inherently generic concept that could be specialized as required (e.g. Earth surface);

====Surface Worksites====

* Defines a ''Worksite'' that resides on the surface of a Celestial body (e.g. Earth)

=====Reference Frame=====

=====Maps=====

* A component of a ''Worksite'' that contains ''Map Layers'' sharing a common pose relative to the ''Worksite'' origin;
* A '''''Map Layer''''' contains the actual data about the ''Worksite'' (e.g. DEM, Orbital Imagery, Slope, etc.);

======MapLayer======

* Currently support ''MapLayers'':
** '''''Triangular Mesh Map Layer''''' (a meshed DEM);
** '''''Features Of Interest Map Layer''''' (specific locations in the ''Worksite'');
** '''''Image Map Layer''''' (Image and its physical size on the ''Worksite'');

=====EarthSky=====

* Contains the Celestial bodies of interest (Sun, Moon, Stars);
* Ephemerides updates based on time and the ''Worksite'' location;
* Represented in the ''Topology''

====Orbital Worksites====

===Time Sources===

* '''''Time Sources''''' are used to feed the time to the ''Session''.
* This, in turn, updates the position of the sky elements (Sun, Moon, Stars);
* The ''Time Sources'' element contains the available ''Time Sources'', only one of which is set as the ''Session Active Time Source'';
* The ''Time Sources View'' can be used to access the various time source parameters.

====Available Time Sources====

<table>
	<tr>
		<th>Name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>'''''Fixed Time Source'''''</td>
		<td>A ''time source'' representing a fixed date and time.</td>
	</tr>
	<tr>
		<td>'''''Current Time Source'''''</td>
		<td>A ''time source'' that represents the current time, updated at a regular interval</td>
	</tr>
	<tr>
		<td>'''''Selection-based Time Source'''''</td>
		<td>A ''time source'' that updates its time upon the selection of any ''Timed'' element in the UI.</td>
	</tr>
	<tr>
		<td>'''''Browseable Time Source'''''</td>
		<td>A ''time source'' that can be browsed, reset, played forward or reset, and accelerated.</td>
	</tr>
	<tr>
		<td>'''''OperationCalls Result List Time Source'''''</td>
		<td>A specialized ''Browseable Time Source'' that allows browsing a list of ''OperationCalls''.</td>
	</tr>
</table>

===Types, Variables & Contexts===

====Types====

* A '''''Type''''' defines an entity that can execute commands and provides telemetry:
** Similar to an Interface Control Document (ICD);
** Used to specify what a ''Variable'' represents;
* Type can include ''Type Members'' in their definitions;
* Types include an ''API Adapter'' that acts as a bridge between Symphony and the ''Interface Class'';

=====Interface Class=====

* An '''''Interface Class''''' is the specific (i.e. real-world) Java type of the Symphony ''Type''

====Symphony System====

* Is the "LEGO block" of Symphony;
* A '''''System''''' is a specialization of ''Type'';
* Adds functions to assemble systems together through ''Connection Points'' and ''Assembly Links'';
* Provide 3D representation of the ''System'';

* A given ''System'' may have multiple implementations (e.g. Stub, Simulated, etc.);
* Implementation specific details transparent to Symphony: what matters is the interface.

=====Connection Points & Assembly Links=====

* A '''''Connection Point''''' represents a location in the ''System'' (as represented by a topology node) where another ''Type'' could connect to this System. 
* An '''''Assembly Link''''' actually provides the link between a ''Connection Point'' and another Type.

* In the diagram below, one could say that the ''Connection Points'' act like hooks while the ''Assembly Links'' act like strings.

=====Simple Systems=====

* It has no ''Type Member'' (i.e. it has no sub-systems);
* It typically represents a "building block" (sub-system) that can be used in the assembly of more complex ''Systems'';

=====Complex Types=====

* Has one or more ''Type Members'';
* Represents an assembly of sub-systems into an integrated ''System'';
* Complex Systems can also be nested;

====Variables & API Adapters====

=====Variables=====

* A '''''Variable''''' is a reference to a ''Type (System)'' <u>instance</u>;
* A ''Variable'' name should be unique;
* Multiple ''Variables'' of the same ''Type'' can be defined;

=====API Adapter=====

* An '''''API Adapter''''' is the object that acts as a brdige between the System (i.e. the ''Interface Class'') and Symphony;
* Automatically managed by Symphony;
* It provides:
** System to Symphony pose transformation and update functions;
** A ''Pose Corrector'';
** A reference to the ''Variable / Type Member'' instance;
** A reference to the ''Symphony Environment'';

====Pose Corrector====

* A '''''Pose Corrector''''' is used by the ''API Adapter'' to modify the ''System''-derived pose before updating;
* Can be used to keep a vehicle on the ground;
* Can be enabled/disabled on the fly;

====Context====

* A '''''Context''''' map ''Variables'' to an actual implementation through the ''Active Context'';
* Used by Symphony to dispatch commands to System instances;
* Includes:
** A name (which should be unique)
** Where the results from operation invocations will be stored (i.e. ''Data Product Set'');
** A hierarchy of ''Variable Implementation'';

=====Variable Implementations=====

* A '''''Variable Implementation''''' is used to specify the particular implementation (i.e. an ''Interface Class'' subclass) that a ''Variable'' should be using.
* Typically, used in ''Contexts''

===Data Products===

* A '''''Data Product''''' represents the result of an ''Operation Call'';
* Time-stamped;
* Geo-referenced;
* Conserves the operational context in which ''Operation'' was called;
* May have one or more 3D representations;

====Data Products Set====

* A '''''Data Products Set''''' contains all of the ''Data Products'' created with one or more ''Contexts'':
** Allows data generated using different ''Contexts'' to be stored separately (for example, separating simulated and real data.)
** Each ''Context'' refers to a ''Data Products Set''

===Operation Calls & Programs===

====Programs====

* A '''''Program''''' is an entity that invokes ''Operation Calls'' on ''Variables'';
* A ''Program'' includes:
** A name;
** A description; and
** A list of ''Operation Calls''

====Operation Call====

* An '''''Operation Call''''' is a specific invocation of an ''Operation'' on a ''Variable'' using a set of ''Parameters''
* It contains:
** A reference to the ''Variable'';
** References to a ''Variable'' type member and/or feature onto which to call the ''Operation'' (if applicable);
** An ''Operation'' to be called;
** A List of ''Parameters'' to use when calling the ''Operation'';

====Simple Program====

* A ''Program'' in the form of a flat list of ''Operation Calls'';
* Does not include execution flow control;
* Each ''Operation Call'' can be invoked individually, or
* It can be executed as a whole;

====Controller Bindings====

* 
*Triggers
*Input Values & Conditioning

===Tools===

====3D Viewer====
====Map View====
====Camera View====

=====Overlays=====
=====Image Filters=====
=====Camera Tools=====

====Controllers View====
====Virtual Reality Tools====
=====Nodes Distance View=====

===Topology===

==Symphony UI==

===Preferences===
===Data Products View===