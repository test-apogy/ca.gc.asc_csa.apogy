=Table Of Contents=
__TOC__
[[installation.mediawiki]]
[[user.mediawiki]]

=Introduction=

==Overview==
Symphony is a multi-mission software framework that simplifies the integration and operations of assemblies of modular systems in different environments. Symphony provides a single tool that supports the operation cycle (development, test, execution and monitoring). The framework only uses open-source and in particular the Eclipse platform. Symphony exploits modern model based software development tools and techniques such as the [https://eclipse.org/modeling/emf/ Eclipse Modeling Framework (EMF)]. This approach inherently promotes a highly modular and extendable software architecture that allows customization of functionalities with little effort. The usage of Eclipse provides state-of-the-art user interface experience that reflects today best user interface technologies.

For each system used, Symphony provides a single model that defines: command, telemetry, engineering units, limits, documentation, 3D topology and representation. System assemblies can then be created from these models to build different spacecraft configurations. The mission target environment can also be defined that includes maps (2D and 3D), location, annotations as well as location specific and time dependent model of the sky (sun, moon and stars). The framework provides basic operational plan editors that allow, through context switching, the tests and execution of plans in a seemless process. Teleoperations is supported through flexible hand controller mapping, camera displays with customizable overlays and image filtering, real-time map displays (2D and 3D). Symphony maintains rigorously contexts information such as the command and parameter used to generate the plan execution product, timing information and localization. Symphony then make use of these informations to provide the overall context of the operations and their products to the engineers and scientists.

In the last years, Symphony has been used in multiple deployments involving different types of rovers equipped with various sensors and instruments all operated through Symphony.

==Objectives==
The objective is to develop a software framework for mission operations that allows to:
#support mission planning,
#perform feasibility assessment,
#execute and monitor operations, and
#support and facilitate scientific and engineering data analysis. 

=Installation=


			
=Developing for Symphony=

==Symphony Concept==
===EMF Reflectivity===

===Type Interfaces Modeling===
===Variable Initialization===
===Operation Call Invocation===

==Symphonyzing==

===Definition, High-Level Details & Guidelines===
===The Three Steps to Symphonyzing===

====1. Defining the System in EMF====

=====Creating an EMF Model of the System=====
=====Recommended Class Hierarchy=====

====2. Creating the Symphony plugin====

=====Definition & Requirements=====
=====The Four Steps to making a Symphony Plugin=====

======i. Creating the Symphony Plugin Itself======
======ii. Creating an Xcore (.xcore) Model======
======iii. Defining a Subclass of SymphonyInitializationData======
=======Guidelines=======

======iv. Defining a Subclass of SymphonySystemApiAdapter======
=======Localization=======
=======Guidelines & Requirements=======

====3. Creating the Symphony System Model (*.ss) file====

=====Definition=====
=====The Six Steps to making a Symphony System Model=====

======i. Defining the Topology Root======
=======Topology Guidelines=======

======ii. Defining the Bindings======
=======Currently Available Bindings in Symphony=======
=======Populating the Feature Roots List=======
=======Populating the Bindings List=======

======iii. Defining the Connection Points======
======iv. Defining Type Members (Only for Composite Systems)======
======v. Defining Assembly Links (Only for Composite Systems)======
======vi. Registering your Symphony System Model with Symphony======
=======Steps to register a Symphony System Model=======  

==Advanced Topics==

===Specialized Topology Nodes===
===Currently available specialized topology nodes===
===Contributing new tools===

[[tutorial.mediawiki]]