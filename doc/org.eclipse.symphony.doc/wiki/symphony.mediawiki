=Table Of Contents=
__TOC__
[[installation.mediawiki]]

=Introduction=
==Overview==
Symphony is a multi-mission software framework that simplifies the integration and operations of assemblies of modular systems in different environments. Symphony provides a single tool that supports the operation cycle (development, test, execution and monitoring). The framework only uses open-source and in particular the Eclipse platform. Symphony exploits modern model based software development tools and techniques such as the [https://eclipse.org/modeling/emf/ Eclipse Modeling Framework (EMF)]. This approach inherently promotes a highly modular and extendable software architecture that allows customization of functionalities with little effort. The usage of Eclipse provides state-of-the-art user interface experience that reflects today best user interface technologies.

For each system used, Symphony provides a single model that defines: command, telemetry, engineering units, limits, documentation, 3D topology and representation. System assemblies can then be created from these models to build different spacecraft configurations. The mission target environment can also be defined that includes maps (2D and 3D), location, annotations as well as location specific and time dependent model of the sky (sun, moon and stars). The framework provides basic operational plan editors that allow, through context switching, the tests and execution of plans in a seemless process. Teleoperations is supported through flexible hand controller mapping, camera displays with customizable overlays and image filtering, real-time map displays (2D and 3D). Symphony maintains rigorously contexts information such as the command and parameter used to generate the plan execution product, timing information and localization. Symphony then make use of these informations to provide the overall context of the operations and their products to the engineers and scientists.

In the last years, Symphony has been used in multiple deployments involving different types of rovers equipped with various sensors and instruments all operated through Symphony.
==Objectives==
The objective is to develop a software framework for mission operations that allows to:
#support mission planning,
#perform feasibility assessment,
#execute and monitor operations, and
#support and facilitate scientific and engineering data analysis. 
=Installation=
==SDK==


==RCP==


=Using Symphony=
==Eclipse Basics==
===Workspace===
===Preferences===
===Views===
===Editors===
===Selection Providers & Listeners===
===Action Contexts===
==Symphony Concepts==
===Session & Environment===
*Editors
===Worksites===
*Topology
====Surface Worksites====
=====Maps=====
=====Sky=====
*Earth Sky View
====Orbital Worksites====
===Types, Variables & Contexts===
*Management of measurement units
====Types====
=====Simple Types=====
=====Complex Types=====
====Variables====
*API Adapters
*Topology
*Pose Corector
====Context====
===Data Products===
===Operation Calls & Programs===
====Simple Program====
====Controller Bindings====
*Triggers
*Input Values & Conditioning
===Tools===
====3D Viewer====
====Map View====
====Camera View====
=====Overlays=====
=====Image Filters=====
=====Camera Tools=====
====Controllers View====
====Virtual Reality Tools====
* Nodes Distance View
===Topology===
==Symphony UI==
===Preferences===
===Data Products View===
			
=Developing for Symphony=

==Symphony Concept==
*EMF Reflectivity
===Type Interfaces Modeling===
===Variable Initialization===
===Operation Call Invocation===
==Symphonyzing==
===Definition, High-Level Details & Guidelines===
====Symphonyzing Steps====
#Defining the EMF meta-model that represents the new type
* Recommended class hierarchy.
#Generate the code
#Implement the operations
#Create the topology (optional)
#Test the type
				<topic label="2. Creating the Symphony plugin">
					<topic label="Definition &amp; Requirements"/>
					<topic label="The Four Steps to making a Symphony plugin">
						<topic label="i.   Creating the Symphony plugin itself">
							<topic label="Example Exercise: Creating the PTU Camera's Symphony plugin"/>
						</topic>
						<topic label="ii.  Creating an Xcore model">
							<topic label="Example Exercise: Developing the PTU Camera's xCore model"/>
						</topic>
						<topic label="iii. Defining a subclass of SymphonyInitializationData">
							<topic label="Guidelines"/>
							<topic label="Example Exercise: Specializing SymphonyInitializationData for the PTU Camera"/>
						</topic>
						<topic label="iv.  Defining a subclass of SymphonySystemApiAdapter">
							<topic label="Localization"/>
							<topic label="Guidelines &amp; Requirements"/>
							<topic label="Example Exercise: Specializing SymphonySystemApiAdapter for the PTU Camera"/>
						</topic>
					</topic>
				</topic>
				<topic label="3. Creating the Symphony System Model (*.ss file)">
					<topic label="Definition"/>
					<topic label="The Six Steps to making a Symphony System Model">
						<topic label="i.   Defining the Topology Root">
							<topic label="Topology Guidelines"/>
						</topic>
						<topic label="ii.  Defining the Bindings">
							<topic label="Currently available bindings in Symphony"/>
							<topic label="Populating the Feature Roots List"/>
							<topic label="Populating the Bindings List"/>
						</topic>
						<topic label="iii. Defining the Connection Points"/>
						<topic label="iv.  Defining Type Members (Only for Composite Systems)"/>
						<topic label="v.   Defining Assembly Links (Only for Composite Systems)"/>
						<topic label="vi.  Registering your Symphony System Model with Symphony">
							<topic label="Steps to register a Symphony System Model"/>
						</topic>
					</topic>
					<topic label="Example Exercise: Creating a complete Symphony System Model for the PTU Camera">
						<topic label="Creating the PTU Camera's Symphony System Model file"/>
						<topic label="Specifying the PTU Camera's Topology">
							<topic label="Creating the CAD folder"/>
							<topic label="Populating the topology">
								<topic label="Desired final topology">
									<topic label="Node hierarchy"/>
									<topic label="Transformations"/>
								</topic>
							</topic>
						</topic>
						<topic label="Making the PTU Camera's Bindings">
							<topic label="Defining the Feature Nodes"/>
							<topic label="Making the Bindings themselves"/>
						</topic>
						<topic label="Registering the PTU Camera's Symphony System Model"/>
						<topic label="Testing the complete PTU Camera with Symphony"/>
					</topic>
				</topic>
			</topic>
		</topic>
		<topic label="Symphony Examples">
		</topic>
==Advanced Topics==
===Specialized Topology Nodes===
===Currently available specialized topology nodes===
===Contributing new tools===

=Examples=
*PTU Dish Antenna
*Camera
*PTU Camera
*Lander
*Lidar
*Mobile Platform
*Robotic Arm
*Rover (Complex Type)

=Tutorials=
==I'm hurry, I want to operate a rover!!!==
==Getting Started Exercises==
===Setting Up A Symphony Environment===
#Creating A Symphony Session
#Creating A Worksite
#Creating Map Layers
#Creating Variables & Contexts
#Creating Data Products Sets
===Issuing Commands===
#Invoking Operations On A Simple System
#Using The Pose Corrector
#Using Operation Call Controller Bindings
===Defining & Using Composite Types===
#Defining A Composite System
#Invoking Operation On Composite System Type Members
#Invoking Operation On A Feature Of Composite Type Members
===Setting Up & Using The Camera View===
#Configuring A Camera View
#Adding Overlays
===Setting Up & Using The Map View===
#Displaying The Environment
#Displaying The Variables
==Create Symphony Types==
===Create A Pan Tilt Unit (PTU) Camera===
#Creat The PTU Camera's EMF Meta-Model
#Implement The operations
#Test The PTU