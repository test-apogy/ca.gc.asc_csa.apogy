== Using cqfd

=== Requirements

To use cqfd, ensure the following requirements are satisfied on your
workstation:

* Bash 4.x
* Docker
** A +docker+ group in your /etc/group
** Your username is a member of the +docker+ group
** Restart your docker service if you needed to create the group.

=== The .sflproject file

The .sflproject file at the root of your project contains all the
required informations required to support project tooling.

Here is a sample .sflproject file:

[source,ini]
----
[customer]
codename='fooinc'
project='buildroot'

[build]
command='make foobar_defconfig && make && asciidoc README.FOOINC'

[release]
files='README.FOOINC output/images/sdcard.img'
----

==== Build flavors

In some cases, it may be desirable to build the project using variations of
the build and release methods. This is made possible in cqfd with the build
flavors feature.

In the .sflproject file, flavors may be listed in the +build+ section,
referencing sections prefixed with the +flavor_+ name.

[source,ini]
----
[flavor_1]
command='make foobar_flavor1_defconfig && make && asciidoc README.FOOINC'
files='README.FOOINC output/images/sdcard_flavor1.img'

[flavor_2]
command='make foobar_flavor2_defconfig && make && asciidoc README.FOOINC'
files='README.FOOINC output/images/sdcard_flavor2.img'

[build]
flavors='flavor_1 flavor_2'
----

==== Section customer

customer.codename::
+
This is a short, lowercase codename for our customer, it should be
decided once for every new customer. The codename will be used in
gerrit to prefix the repository paths, in docker to prefix the image
names, and in various other places.

customer.project::
+
This is a short, lowercase name for the project, used in gerrit as the
repository name, for example +buildroot+ or +linux+.

==== Section build

build.command::
+
The command (or list of commands). This string will be passed as an
argument to a classical +bash -c "commands"+, inside the build
container, to generate the build artefacts.

build.flavors::
+
List of build flavors. Each flavor has its own command just like build.command.

==== Section release

release.files::
+
A space-separated list of files generated by the build process that we
want to include inside a standard release archive.

==== Section flavor

flavor.command::
+
The equivalent of +build.command+ for a given flavor.

flavor.files::
+
The equivalent of +release.files+ for a given flavor.

==== Environment variables

The following environment variables are supported by +cqfd+ to provide
the user with extra flexibility during his day-to-day development
tasks:

CQFD_EXTRA_VOLUMES::
+
A space-separated list of additional volume mappings to be configured
inside the started container. Format is the same as docker-run's -v
option.

=== Initializing the build container

Once the initial configuration has been done, the +cqfd+ helper script
can be used to automate the generation of the build container, as well
as executing your build commands inside the container.

The following command creates the initial build container after
entering your project's git repository:

 $ cd path/to/fooinc/buildroot/
 $ sfl/cqfd init

+cqfd+ will use the provided Dockerfile to create a normalized runtime
build environment for your project.

=== Using the build container

==== Regular builds

To build your project from the configured build environment with the
default build command as configured in .sflproject, use:

 $ sfl/cqfd

Alternatively, you may want to specify a custom build command to be
executed from inside the build container.

 $ sfl/cqfd run make clean
 $ sfl/cqfd run "make linux-dirclean && make foobar-dirclean"

==== Release

The release command behaves exactly like run, but creates a release
tarball for your project additionally. The release files (as specified
in your +.sflproject+) will be included inside the release archive.

 $ sfl/cqfd release

The resulting release file is then called
${JOB_NAME}_${BUILD_ID}.tar.xz, where JOB_NAME is either your Jenkins
unique job name, or the string "local-build" when run from outside
Jenkins, and BUILD_ID is a Jenkins-generated unique and date-based
string, or the current date.

==== Flavor

You may also want to build a specific build flavor, for a regular build or a
release. To do so use the -b option:

 $ sfl/cqfd -b <flavor_name> run|release
